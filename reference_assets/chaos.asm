; Title screen
DISPLAY_FILE:
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$3C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$01,$FF,$FF,$F0,$3F,$E3,$FE,$0F,$FF,$FF,$83,$FF,$FF,$E1,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$FE,$0F,$80,$1F,$C1,$FC,$07,$F0,$7F,$01,$FC,$1F,$C0,$FE,$0F,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$FE,$00,$00,$1F,$F1,$FC,$07,$FC,$7F,$01,$FC,$1F,$C0,$3F,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$FE,$0F,$E0,$1F,$C1,$FC,$07,$F0,$7F,$01,$FC,$1F,$C0,$FE,$0F,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$42,$00,$3C,$00,$00,$00,$00,$00,$42,$00,$00,$20,$00,$40,$00,$00,$00,$18,$3C,$3C,$7E,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$FF,$FF,$E0,$1F,$C1,$FC,$07,$FF,$FF,$01,$FF,$FF,$C0,$FF,$FF,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$FE,$0E,$00,$1F,$C1,$FC,$07,$F0,$7F,$01,$FC,$1F,$C0,$FE,$0F,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$FE,$00,$60,$1F,$C1,$FC,$07,$F0,$7F,$01,$FC,$1F,$C0,$0F,$FF,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$FE,$0F,$E0,$1F,$C1,$FC,$07,$F0,$7F,$01,$FC,$1F,$C0,$FE,$0F,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$99,$00,$42,$38,$68,$38,$38,$00,$42,$38,$1C,$28,$38,$40,$38,$78,$00,$28,$42,$42,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$FF,$FF,$E0,$1F,$C1,$FC,$07,$FF,$FF,$01,$FF,$FF,$C0,$FF,$FF,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$FE,$08,$00,$1F,$C3,$FC,$07,$F0,$FF,$01,$FC,$1F,$C0,$FE,$07,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$FE,$01,$E0,$1F,$C1,$FC,$07,$F0,$7F,$01,$FC,$1F,$C0,$03,$FF,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$FF,$1F,$E0,$1F,$C1,$FC,$07,$F0,$7F,$01,$FE,$3F,$C0,$FF,$1F,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$A1,$00,$40,$04,$54,$44,$40,$00,$42,$44,$20,$30,$40,$78,$44,$44,$00,$08,$42,$3C,$7C,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$FF,$FF,$E0,$1F,$C1,$FC,$07,$FF,$FF,$01,$FF,$FF,$C0,$FF,$FF,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$FE,$00,$00,$1F,$CF,$FC,$07,$F3,$FF,$01,$FC,$1F,$C0,$FE,$01,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$FE,$07,$E0,$1F,$C1,$FC,$07,$F0,$7F,$01,$FC,$1F,$C0,$C0,$FF,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$FF,$FF,$E0,$1F,$C1,$FC,$07,$F0,$7F,$01,$FF,$FF,$C0,$FF,$FF,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$A1,$00,$4E,$3C,$54,$78,$38,$00,$42,$44,$20,$30,$38,$44,$44,$44,$00,$08,$3E,$42,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$FF,$FF,$E0,$1F,$C1,$FC,$07,$FF,$FF,$01,$FF,$FF,$C0,$FF,$FF,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$FE,$00,$00,$1F,$FF,$FC,$07,$FF,$FF,$01,$FC,$1F,$C0,$FF,$80,$60,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$FE,$0F,$E0,$1F,$C1,$FC,$07,$F0,$7F,$01,$FC,$1F,$C0,$F0,$3F,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$FF,$FF,$E0,$1F,$C1,$FC,$07,$F0,$7F,$01,$FF,$FF,$C0,$FF,$FF,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$99,$00,$42,$44,$54,$40,$04,$00,$5A,$44,$20,$28,$04,$44,$44,$78,$00,$08,$02,$42,$42,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$FF,$1F,$E0,$1F,$C1,$FC,$07,$F8,$FF,$01,$FE,$3F,$C0,$FF,$1F,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$FE,$00,$00,$1F,$FF,$FC,$07,$FF,$FF,$01,$FC,$1F,$C0,$FF,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$FE,$0F,$E0,$1F,$C1,$FC,$07,$F0,$7F,$01,$FC,$1F,$C0,$FC,$0F,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$FF,$FF,$E0,$1F,$C1,$FC,$07,$F0,$7F,$01,$FF,$FF,$C0,$FF,$FF,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$42,$00,$3C,$3C,$54,$3C,$78,$00,$24,$38,$20,$24,$78,$44,$38,$40,$00,$3E,$3C,$3C,$3C,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$FE,$0F,$E0,$1F,$C1,$FC,$07,$F0,$7F,$01,$FC,$1F,$C0,$FE,$0F,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$FE,$00,$00,$1F,$FF,$FC,$07,$FF,$FF,$01,$FC,$1F,$C0,$FF,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$FE,$0F,$E0,$1F,$C1,$FC,$07,$F0,$7F,$01,$FC,$1F,$C0,$FE,$0F,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$FF,$FF,$E0,$1F,$C1,$FC,$07,$F0,$7F,$01,$FF,$FF,$C0,$FF,$FF,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$3C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$FE,$0F,$E0,$1F,$C1,$FC,$07,$F0,$7F,$01,$FC,$1F,$C0,$FE,$0F,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$FE,$00,$00,$1F,$FD,$FC,$07,$FF,$7F,$01,$FC,$1F,$C0,$FF,$FE,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$FE,$0F,$E0,$1F,$C1,$FC,$07,$F0,$7F,$01,$FC,$1F,$C0,$FE,$0F,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$01,$FF,$FF,$F0,$3F,$E3,$FE,$0F,$F8,$FF,$83,$FF,$FF,$E1,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76,$FE,$3F,$FD,$EF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1E,$01,$E0,$00,$F7,$FC,$8C,$DE,$FF,$FF,$FD,$2F,$B8,$70,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$30,$3C,$00,$00,$07,$00,$07,$6F,$82,$FE,$FF,$00,$7B,$3D,$3E,$F5,$FA,$37,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$00,$00,$00,$00,$37,$FD,$FF,$F3,$79,$7F,$AF,$DF,$4F,$7D,$E0
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$F0,$00,$7F,$00,$1F,$0F,$EF,$DF,$DF,$D9,$1F,$C7,$7F,$7E,$F1
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$7F,$7D,$FD
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$8F,$79,$FF,$FE,$2F,$FF,$FF,$80,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$FF,$F8,$00,$F7,$FC,$EC,$DE,$FF,$FF,$FE,$F7,$BB,$AF,$C0,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$39,$FE,$00,$00,$07,$00,$07,$5F,$FD,$FE,$FE,$FF,$7C,$FE,$FE,$CE,$F9,$FB,$C0,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F,$00,$00,$00,$03,$83,$FD,$FF,$EF,$67,$BF,$9F,$DF,$BF,$7E,$E0
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$F8,$03,$FA,$00,$F8,$7F,$EF,$0F,$1F,$0F,$EF,$DF,$7F,$7F,$7F
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$7E,$FD,$FF
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0E,$00,$00,$00,$F3,$67,$FF,$FF,$DF,$FF,$FF,$E0,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$FF,$FC,$00,$7B,$FE,$73,$BE,$FF,$FF,$FF,$77,$5B,$9F,$E0,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$DF,$00,$00,$07,$00,$07,$3F,$FD,$FE,$FE,$FF,$3D,$FE,$FF,$3F,$65,$FD,$F0,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F,$00,$00,$00,$1F,$54,$FD,$F3,$EF,$1F,$BE,$5F,$DE,$3F,$7E,$F0
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$FF,$FF,$F4,$03,$C7,$FE,$00,$00,$00,$00,$6F,$BF,$7F,$7F,$7F
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$7E,$FB,$FF
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1E,$00,$00,$01,$5C,$6F,$FF,$FF,$C0,$1F,$FF,$F0,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7E,$00,$3D,$FF,$1F,$7F,$7F,$FF,$FF,$77,$6A,$6F,$E6,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$03,$80,$7F,$07,$00,$06,$0F,$E3,$FD,$FE,$FF,$D2,$FD,$7F,$7F,$5D,$FD,$F8,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$00,$00,$00,$3E,$AA,$1C,$0F,$AF,$7F,$B9,$DF,$DD,$BF,$7E,$F0
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$E8,$1C,$3F,$FC,$00,$00,$00,$00,$1C,$3E,$FF,$7E,$FF
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$CE,$FB,$FF
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$FF,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$00,$00,$01,$7B,$8F,$FF,$FF,$DF,$E0,$3F,$F0,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$00,$1E,$FE,$60,$FF,$7F,$FF,$FE,$F8,$F1,$F7,$CF,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$C0,$FF,$C7,$00,$06,$03,$DF,$FD,$FE,$FF,$CE,$F3,$7C,$BF,$BE,$FD,$FE,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$80,$00,$00,$FD,$55,$00,$F7,$5F,$7F,$A7,$DF,$C3,$BF,$7E,$F8
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F,$FF,$D0,$33,$FF,$F0,$00,$00,$00,$00,$03,$DE,$FC,$00,$FF
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$31,$17,$FF
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$38,$00,$0D,$FF,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$00,$00,$01,$BB,$70,$FF,$FF,$DF,$FF,$C7,$F0,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$00,$0F,$7D,$7D,$7F,$BF,$FF,$FE,$F3,$FB,$F7,$37,$C0,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$E3,$FF,$E7,$00,$03,$00,$EF,$FF,$FE,$FF,$DF,$6F,$73,$BF,$3E,$FE,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$80,$00,$03,$EA,$AA,$1F,$CF,$DC,$FF,$1F,$DE,$1F,$BF,$60,$F8
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$80,$4F,$F9,$C0,$00,$00,$00,$00,$01,$DE,$C3,$7E,$0F
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$EF,$E7,$FE
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7B,$FD,$FE,$1F,$FE,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$00,$00,$01,$C7,$7B,$7F,$FF,$3F,$FF,$FB,$F6,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$00,$07,$8D,$7E,$BF,$4F,$FF,$FD,$ED,$E5,$F6,$FB,$E0,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$C3,$FF,$00,$00,$00,$07,$FB,$FD,$7F,$DF,$1F,$0F,$BC,$BD,$F8,$FB,$80
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$80,$00,$0F,$D5,$55,$3C,$3F,$E3,$7C,$EF,$D1,$DF,$B8,$1E,$1C
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3C,$00,$00,$00,$00,$00,$00,$00,$E1,$3F,$7E,$F3
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$EF,$E8,$FD
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$78,$01,$C1,$E3,$F1,$FF,$F0,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1C,$00,$00,$01,$F7,$85,$80,$00,$FF,$FF,$FD,$CF,$B3,$F0,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$00,$00,$F3,$7E,$C0,$F0,$FF,$83,$DD,$DD,$F9,$FB,$D8,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$00,$FF,$00,$00,$00,$03,$F7,$FD,$00,$2C,$7F,$FF,$B3,$DD,$F7,$7D,$C0
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$C0,$00,$3F,$A0,$A0,$F3,$FF,$EF,$23,$E7,$CF,$D8,$07,$7E,$EE
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$70,$00,$00,$00,$00,$00,$00,$00,$1F,$7F,$7E,$FB
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$DF,$EF,$3B
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F,$FE,$3F,$C0,$00,$00,$00,$00,$00,$01,$BF,$DF,$D7
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$C0,$FF,$F8,$7F,$7F,$BF,$D3,$F7,$EF,$E0,$00,$00,$00,$7F,$E5,$FF
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$BF,$FF,$DF,$80,$7E,$FB,$F9,$F9,$FD,$3B,$FB,$F8,$00,$73,$7F,$7F,$D7
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$FA,$BC,$1F,$FF,$FF,$58,$00,$00,$00,$00,$28,$AC,$09,$CF,$7F,$DF,$FB,$FD
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$A3,$F9,$5F,$FF,$BF,$FE,$F8,$DF,$DF,$87,$01,$BF,$F7,$C6,$FF,$7F,$EF,$FD,$FF
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$57,$FB,$FF,$EF,$FD,$3E,$D3,$DF,$DE,$FD,$FF,$37,$FF,$BC,$EF,$FF,$7C
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1E,$FF,$DE,$3F,$E3,$F8,$55,$7F,$D3,$FD,$F7,$F7,$EF,$BF,$F7,$9F,$EF,$DF,$DF,$F7,$FF,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7E,$F3,$FE,$AB,$AF,$F4,$F5,$55,$C7,$7A,$FD,$FE,$DF,$FF,$BF,$FF,$DF,$FF,$EE,$7A,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$FF,$81,$F9,$DF,$F1,$E0,$00,$00,$00,$00,$00,$7F,$BF,$D7
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1E,$3F,$7F,$FB,$87,$7F,$BF,$EF,$F7,$C0,$40,$00,$00,$01,$8F,$FB,$FF
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$BF,$FF,$E0,$7F,$86,$F5,$F6,$E6,$F2,$FF,$FF,$6C,$00,$4F,$7F,$BF,$CF
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$F9,$7B,$EF,$FF,$FC,$E8,$00,$00,$00,$00,$14,$40,$53,$BF,$7F,$DF,$FB,$FD
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$AF,$FA,$9F,$FF,$7F,$FE,$E5,$DF,$9F,$F0,$FE,$3F,$EF,$F9,$7F,$7F,$EF,$FD,$FF
  DEFB $7C,$00,$10,$00,$00,$00,$00,$42,$3E,$7E,$3C,$3C,$78,$7E,$00,$3B,$FB,$FF,$EF,$F8,$FF,$6F,$EF,$BF,$3D,$FF,$D7,$FF,$BF,$6F,$FF,$78
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1E,$FF,$9E,$C0,$1F,$FA,$02,$EF,$EF,$FD,$EF,$F7,$DF,$DF,$EF,$EF,$DF,$EF,$DF,$F7,$FE,$00
  DEFB $00,$10,$00,$00,$78,$00,$00,$00,$00,$00,$7D,$FC,$7D,$55,$9F,$FB,$F8,$AA,$AE,$F6,$FB,$FE,$EF,$FF,$5F,$FF,$CF,$FF,$EF,$98,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$DF,$FF,$7E,$27,$E7,$CE,$F8,$00,$00,$00,$00,$01,$9F,$7F,$E7
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3D,$FF,$7F,$FB,$FB,$7F,$5F,$D7,$F4,$2F,$EE,$00,$00,$03,$F7,$E5,$FF
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$DF,$FC,$17,$FF,$B8,$0E,$EF,$1E,$0E,$FA,$AA,$F2,$01,$BF,$BF,$DF,$AF
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$FA,$FB,$F3,$FF,$E3,$E0,$00,$00,$00,$00,$0A,$02,$00,$7F,$7F,$DF,$FB,$FD
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$AF,$F9,$5F,$FF,$7F,$FD,$9E,$EF,$6F,$F6,$FE,$C7,$DF,$FD,$9F,$BF,$EF,$FE,$FF
  DEFB $42,$44,$38,$38,$38,$00,$00,$42,$08,$04,$42,$42,$44,$40,$00,$9F,$FB,$FF,$EF,$F5,$FF,$5F,$F7,$7F,$DB,$FF,$EF,$FF,$BF,$8F,$FF,$70
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3E,$FC,$6E,$FF,$DF,$FD,$50,$5C,$1F,$FD,$EF,$FB,$DF,$EF,$DF,$F7,$DF,$F3,$DF,$F7,$FC,$00
  DEFB $00,$10,$38,$00,$44,$38,$44,$44,$00,$00,$3D,$FB,$8A,$AB,$BF,$C5,$FE,$55,$45,$4F,$77,$FE,$F7,$FF,$6F,$FF,$B3,$FF,$EF,$E0,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$BF,$FE,$FF,$DF,$FB,$3F,$7D,$00,$00,$00,$00,$01,$E6,$FF,$EB
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$73,$FF,$7F,$FB,$FC,$FF,$5F,$B7,$F3,$F7,$EF,$00,$00,$03,$FB,$DE,$FF
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$EF,$F3,$F9,$FF,$DC,$00,$00,$0F,$56,$FD,$FD,$E8,$07,$BF,$BF,$EE,$77
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$F9,$77,$FC,$7F,$DF,$D8,$00,$00,$00,$00,$05,$15,$1F,$80,$7F,$DF,$FB,$F3
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$AF,$FA,$8F,$FE,$FF,$FB,$7E,$F6,$F7,$CF,$3D,$F8,$BF,$FB,$E3,$BF,$EF,$FE,$FF
  DEFB $7C,$44,$10,$44,$40,$10,$00,$42,$08,$08,$40,$42,$42,$7C,$00,$AF,$F7,$FF,$DF,$ED,$FF,$BF,$F6,$FF,$EB,$FF,$E7,$FF,$BF,$F1,$FF,$60
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F,$73,$EE,$FF,$BF,$FA,$AA,$83,$DF,$FD,$DF,$FD,$BF,$F7,$DF,$FB,$DF,$FD,$DF,$F7,$F8,$00
  DEFB $00,$10,$44,$00,$42,$44,$44,$28,$00,$00,$DD,$F7,$F7,$47,$37,$3D,$FF,$AA,$AB,$BF,$6F,$EC,$F7,$FF,$77,$FF,$BC,$3F,$F7,$F8,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$7F,$FC,$FF,$A7,$FC,$FF,$9E,$00,$00,$00,$00,$01,$F9,$FF,$DD
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$6F,$FF,$7F,$FD,$FF,$7F,$6F,$7B,$CB,$F7,$EF,$00,$00,$05,$FD,$3E,$FF
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0D,$B7,$EF,$FE,$FF,$E8,$00,$00,$00,$2A,$F3,$FB,$9A,$0F,$BF,$BF,$FF,$F7
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$FA,$F7,$FF,$87,$B8,$00,$00,$00,$00,$00,$00,$AA,$7F,$7F,$8F,$EF,$FD,$EF
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$77,$FD,$53,$FE,$FF,$F4,$FE,$F6,$FB,$BF,$DB,$FF,$1F,$FB,$FC,$3F,$EF,$FE,$FF
  DEFB $42,$44,$10,$78,$38,$00,$00,$42,$08,$10,$40,$42,$42,$40,$00,$D5,$F7,$FF,$DF,$ED,$FF,$5F,$FA,$FF,$F3,$FF,$EB,$FF,$BF,$F6,$1F,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$6F,$EA,$BF,$BF,$F7,$51,$7F,$DF,$FD,$BF,$FE,$BF,$F9,$DF,$FD,$DF,$FE,$DF,$F7,$F0,$00
  DEFB $00,$10,$78,$00,$42,$44,$44,$10,$00,$00,$EE,$EF,$B0,$28,$80,$ED,$FF,$00,$14,$55,$55,$DB,$FB,$FF,$7B,$FF,$BF,$DF,$F7,$E0,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$7F,$FB,$7F,$B9,$FB,$7F,$E1,$7E,$00,$00,$00,$01,$FA,$7F,$BF
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$9F,$FF,$BF,$FD,$FF,$9E,$F6,$FB,$BB,$F7,$CF,$C0,$00,$0D,$F8,$FF,$7E
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1D,$7B,$DF,$FF,$3F,$F0,$00,$00,$00,$15,$45,$75,$45,$0F,$BF,$DF,$E3,$FB
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$DF,$F9,$6F,$FF,$F8,$47,$BB,$00,$00,$00,$00,$00,$10,$FE,$FF,$73,$EF,$FD,$9F
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$79,$FC,$9C,$7D,$FF,$07,$FE,$FD,$FC,$BF,$E7,$FF,$67,$FB,$FF,$BF,$EF,$FE,$FF
  DEFB $42,$3C,$10,$40,$04,$00,$00,$5A,$08,$20,$42,$42,$44,$40,$00,$CA,$F7,$EF,$DF,$9D,$FE,$DF,$F9,$FF,$F5,$FF,$ED,$FF,$BF,$F7,$E0,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$5F,$EC,$7D,$BF,$F7,$AA,$EF,$DF,$ED,$7F,$FF,$7F,$FD,$DF,$FE,$DF,$FF,$1F,$F7,$C0,$00
  DEFB $00,$10,$40,$00,$44,$44,$44,$28,$00,$00,$F6,$55,$45,$D5,$55,$5C,$FF,$CA,$82,$AA,$2B,$BB,$FD,$FF,$7D,$FF,$BF,$EF,$F7,$C0,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$FF,$FF,$FB,$FF,$7E,$E7,$BF,$1F,$BF,$00,$00,$00,$01,$E7,$BF,$7F
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$FF,$BF,$FE,$FF,$6E,$FA,$FD,$7B,$FE,$2F,$E0,$00,$3D,$E6,$FF,$BD
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7A,$FD,$3F,$FF,$CF,$E8,$00,$00,$00,$0A,$22,$E3,$80,$1F,$9F,$DF,$17,$FB
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$DF,$FC,$EF,$FF,$E7,$FF,$BD,$80,$00,$00,$00,$07,$F9,$FE,$FF,$7C,$6F,$FC,$7F
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$7E,$7D,$5F,$80,$00,$F7,$FE,$F5,$FF,$7F,$F3,$FE,$FB,$FB,$FF,$8F,$EF,$FF,$7F
  DEFB $7C,$04,$0C,$3C,$78,$10,$00,$24,$3E,$7E,$3C,$3C,$78,$7E,$00,$25,$77,$DF,$DF,$7D,$FD,$EF,$F6,$FF,$F6,$FF,$EE,$7F,$BF,$F7,$FF,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$3F,$F6,$EB,$BF,$F7,$D5,$5F,$5F,$DE,$FF,$7F,$3F,$FE,$BF,$FF,$1F,$FF,$EF,$FB,$80,$00
  DEFB $00,$0C,$3C,$00,$78,$38,$38,$44,$00,$00,$FB,$2A,$AB,$CA,$8A,$AA,$7F,$E5,$51,$55,$17,$5B,$FE,$FE,$FE,$FF,$BF,$F3,$F7,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$FF,$00,$03,$FF,$7F,$5F,$DC,$EF,$DF,$80,$00,$00,$01,$9F,$DE,$FF
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$FF,$DF,$FF,$7F,$75,$FD,$FE,$FD,$C5,$F7,$F0,$00,$3C,$1F,$7F,$BB
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$F9,$FE,$FF,$FF,$F0,$18,$00,$00,$00,$00,$59,$51,$14,$50,$60,$00,$F7,$FB
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$DC,$02,$6F,$FF,$DF,$FF,$7D,$3F,$00,$00,$00,$1F,$FA,$3E,$FF,$7F,$80,$01,$FF
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0E,$FF,$80,$8F,$FD,$FF,$EF,$FE,$C2,$FC,$BF,$ED,$FD,$FC,$FB,$FF,$B3,$EF,$FF,$7E
  DEFB $00,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$F2,$B2,$BF,$DC,$FD,$FB,$EF,$EF,$7F,$F7,$7F,$EF,$BF,$DF,$F7,$FF,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7E,$CF,$F9,$57,$B7,$F7,$E8,$BA,$DB,$BC,$FE,$FF,$3F,$FF,$3F,$FF,$DF,$FF,$E0,$FB,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FD,$55,$47,$E5,$55,$57,$3F,$F2,$A8,$AA,$AA,$BB,$FF,$3E,$FF,$7F,$7F,$FD,$F0,$00,$00,$00
  DEFB $07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07
  DEFB $06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$07,$07,$07,$07,$07
  DEFB $06,$02,$42,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$42,$02,$02,$02,$02,$02,$02,$02,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07
  DEFB $06,$42,$02,$42,$02,$02,$02,$02,$02,$02,$02,$02,$02,$42,$02,$42,$02,$02,$02,$02,$02,$02,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07
  DEFB $06,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07
  DEFB $06,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07
  DEFB $06,$02,$42,$02,$42,$02,$42,$02,$42,$02,$42,$02,$42,$02,$42,$02,$42,$02,$42,$02,$02,$02,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07
  DEFB $06,$02,$02,$42,$02,$42,$02,$42,$02,$42,$02,$42,$02,$42,$02,$42,$02,$42,$02,$04,$04,$04,$04,$04,$04,$04,$07,$07,$07,$07,$07,$04
  DEFB $06,$07,$07,$07,$42,$07,$42,$07,$42,$07,$42,$02,$42,$02,$42,$02,$42,$06,$06,$04,$04,$04,$04,$04,$04,$44,$04,$04,$07,$07,$07,$04
  DEFB $06,$07,$07,$07,$07,$42,$07,$42,$07,$42,$02,$42,$02,$02,$02,$02,$02,$06,$04,$44,$44,$44,$44,$44,$44,$44,$44,$04,$04,$04,$04,$04
  DEFB $06,$07,$07,$07,$07,$07,$42,$07,$42,$07,$42,$07,$02,$02,$42,$02,$02,$06,$06,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44
  DEFB $06,$02,$02,$02,$02,$02,$02,$42,$02,$42,$02,$42,$42,$42,$42,$42,$42,$02,$06,$06,$04,$04,$44,$44,$44,$04,$04,$44,$44,$44,$44,$44
  DEFB $06,$07,$07,$07,$07,$07,$07,$07,$42,$42,$42,$42,$42,$42,$42,$42,$42,$02,$47,$06,$06,$06,$06,$04,$04,$04,$04,$04,$44,$44,$44,$44
  DEFB $06,$07,$07,$07,$07,$07,$07,$07,$07,$42,$07,$07,$02,$42,$42,$42,$42,$42,$02,$02,$02,$02,$06,$06,$06,$04,$04,$04,$04,$44,$44,$44
  DEFB $06,$07,$07,$07,$07,$07,$07,$07,$07,$07,$42,$07,$07,$07,$02,$02,$02,$02,$02,$02,$06,$06,$06,$06,$06,$06,$06,$06,$04,$04,$04,$44
  DEFB $06,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$04,$04,$04,$04,$04,$04,$04,$04,$04,$06,$06,$06,$06,$06,$06,$06,$06,$06,$04,$04,$44
  DEFB $06,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$44,$44,$44,$04,$04,$04,$44,$44,$44,$44,$44,$44,$44,$44,$44,$04,$04,$06,$04,$04,$04
  DEFB $06,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$04,$04,$04,$04,$04,$44,$44,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
  DEFB $06,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$44,$44,$44,$04,$04,$04,$04,$04,$06,$06,$06,$06,$04,$04,$04,$04,$04,$04,$04,$04
  DEFB $06,$07,$07,$07,$07,$07,$07,$07,$07,$07,$04,$04,$44,$44,$44,$04,$04,$04,$04,$04,$04,$04,$04,$04,$44,$44,$44,$04,$04,$04,$04,$04
  DEFB $07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$44,$44,$44,$04,$04,$04,$04,$04,$04,$04,$44,$44,$44,$44,$44,$04,$04,$04,$04,$04,$04,$04
  DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
  DEFB $07,$07,$07,$07,$07,$04,$04,$04,$04,$04,$44,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$44
  DEFB $03,$03,$03,$03,$03,$03,$03,$03,$03,$04,$44,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$44

; Data block at 5B00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $FF,$00,$00,$00,$FF,$00,$23,$0D
  DEFB $0D,$23,$05,$00,$00,$00,$10,$14
  DEFB $01,$00,$06,$00,$0B,$00,$01,$00
  DEFB $01,$00,$06,$00,$10,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$3C
  DEFB $40,$00,$FF,$CD,$00,$15,$79,$00
  DEFB $00,$00,$0A,$00,$FF,$28,$00,$01
  DEFB $38,$00,$00,$26,$5D,$00,$00,$B6
  DEFB $5C,$BB,$5C,$CB,$5C,$18,$5D,$CA
  DEFB $5C,$27,$5D,$2A,$5D,$17,$5D,$81
  DEFB $5D,$2C,$5D,$2C,$5D,$2C,$5D,$2D
  DEFB $92,$5C,$00,$02,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$B6,$1A,$00,$00
  DEFB $05,$00,$00,$58,$FF,$00,$00,$21
  DEFB $00,$5B,$21,$17,$C0,$50,$E0,$50
  DEFB $21,$02,$21,$17,$03,$38,$00,$38
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$18,$79,$FF,$FF,$F4,$09
  DEFB $A8,$10,$4B,$F4,$09,$C4,$15,$53
  DEFB $81,$0F,$C4,$15,$52,$F4,$09,$C4
  DEFB $15,$50,$80,$00,$0A,$0D,$00,$FD
  DEFB $33,$31,$30,$30,$30,$0E,$00,$00
  DEFB $18,$79,$00,$0D,$00,$14,$05,$00
  DEFB $EF,$22,$22,$AA,$0D,$00,$19,$14
  DEFB $00,$F5,$AC,$32,$30,$0E,$00,$00
  DEFB $14,$00,$00,$2C,$30,$0E,$00,$00
  DEFB $00,$00,$00,$3B,$0D,$00,$1E,$05
  DEFB $00,$EF,$22,$22,$AF,$0D,$00,$28
  DEFB $0E,$00,$F9,$C0,$33,$32,$30,$30
  DEFB $30,$0E,$00,$00,$00,$7D,$00,$0D
  DEFB $00,$32,$0A,$00,$EC,$34,$30,$0E
  DEFB $00,$00,$28,$00,$00,$0D,$80,$EF
  DEFB $22,$22,$0D,$80,$00,$00,$00,$7D
  DEFB $00,$20,$20,$20,$20,$20,$20,$00
  DEFB $00,$00,$00,$00,$00,$03,$57,$49
  DEFB $5A,$43,$4F,$44,$45,$10,$00,$20
  DEFB $E8,$86,$00,$7D,$00,$80,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$DB,$02,$DB
  DEFB $02,$4D,$00,$B3,$34,$21,$02,$A3
  DEFB $2D,$B7,$2D,$2C,$5D,$27,$5D,$00
  DEFB $7D,$2B,$2D,$65,$33,$00,$00,$ED
  DEFB $10,$0D,$00,$09,$00,$85,$1C,$10
  DEFB $1C,$52,$1B,$76,$1B,$03,$13,$00
  DEFB $3E,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Entrypoint
;
; Simply jumps to MAIN_LOOP.
ENTRYPOINT:
  JP MAIN_LOOP

; Variable - Round counter
ROUND_COUNTER:
  DEFB $03

; Routine at 7D04
;
; Used by the routine at CAST_SPELLS.
ROUTINE_7D04:
  LD A,(ROUND_COUNTER)    ; If the round counter < 6, return. TODO Why?
  CP $06                  ;
  RET M                   ;
  LD HL,ARENA_STATE_1     ; Set the target location to the top left space in
  LD (LOCATION_TARGET),HL ; table 1.
  LD B,$9F                ; Going to loop for every space in the arena.
ROUTINE_7D04_0:
  PUSH BC
  LD A,(HL)               ; A = object at the target location.
  CP $02                  ; If A < 2 jump to ROUTINE_7D04_1.
  JP M,ROUTINE_7D04_1     ;
  CP $22                  ; If A >= $22 (gooey blob and up) jump to
  JP P,ROUTINE_7D04_1     ; ROUTINE_7D04_1.
  LD DE,$0281             ; HL = HL + $0281, so that it's pointing at the
  ADD HL,DE               ; equivalent location in table 5 (see ARENA_STATE_5).
  LD A,(HL)               ; A = data from table 5
  SUB $29                 ; Subtract $29 to convert from a wizard's "creature
                          ; ID" to the player ID. (First wizard has ID 0 and
                          ; creature ID $29, etc. See
                          ; TABLE_CREATURE_DATA_ADDRESSES.)
  LD HL,CURRENT_WIZARD_ID ; HL = memory address of current wizard ID
  CP (HL)                 ; If A == current wizard ID jump to ROUTINE_7D04_1.
  JR Z,ROUTINE_7D04_1     ;
  LD HL,(LOCATION_TARGET) ; HL = target location
  LD DE,$01E1             ; HL = HL + $01E1, so that it's pointing at the
  ADD HL,DE               ; equivalent location in table 4 (see ARENA_STATE_4).
  LD A,(HL)               ; A = data from table 4
  AND $07                 ; AND 7 - i.e. reset all but the three least
                          ; significant bits. This is because table 4 contains
                          ; information in those other bits that isn't relevant
                          ; right now.
  LD HL,CURRENT_WIZARD_ID ; If A == current wizard ID (i.e. the creature we're
  CP (HL)                 ; looking at is owned by the current wizard), jump to
  JR Z,ROUTINE_7D04_2     ; ROUTINE_7D04_2.
ROUTINE_7D04_1:
  POP BC
  LD HL,(LOCATION_TARGET) ; Increase LOCATION_TARGET by 1, moving on to the
  INC HL                  ; next arena space.
  LD (LOCATION_TARGET),HL ;
  DJNZ ROUTINE_7D04_0     ; If we still have spaces to look at, jump back to
                          ; ROUTINE_7D04_0.
  LD HL,UNKNOWN_WIZARD_STATUS_VALUES ; Set the wizard's status value in the
  LD D,$00                           ; small table at
  LD A,(CURRENT_WIZARD_ID)           ; UNKNOWN_WIZARD_STATUS_VALUES to $14 (20
  LD E,A                             ; in decimal). TODO Why?
  ADD HL,DE                          ;
  LD (HL),$14                        ;
  RET
ROUTINE_7D04_2:
  POP BC
  LD HL,UNKNOWN_WIZARD_STATUS_VALUES ; Set the wizard's status value in the
  LD D,$00                           ; small table at
  LD A,(CURRENT_WIZARD_ID)           ; UNKNOWN_WIZARD_STATUS_VALUES to 0. TODO
  LD E,A                             ; Why?
  ADD HL,DE                          ;
  LD (HL),$00                        ;
  RET

; Table - spells
;
; This holds the information for all of the spells in the game. TODO Why are
; some of the addresses in here different from the ID that is stored when the
; user selects the spell?
;
; * ID: The spell's ID.
; * Casting chance. 0 is 10%, 9 is 100%.
; * The max cast distance, times two then plus 1. Stored like this for use in
;   calculating diagonal distances.
; * Effect on the chaos/law indicator. This is in two's complement for negative
;   values. Positive is lawful and negative is chaotic.
; * TODO: Unknown. Saved into the wizard's spell inventory alongside the spell
;   ID.
; * The last two values are the address of the routine to call when casting the
;   spell, swapped around.
;
; +-----+----------------+--------------+-----------+---------+---------+
; | ID  | Casting Chance | Distance * 2 | Chaos/law | Unknown | Routine |
; +-----+----------------+--------------+-----------+---------+---------+
; | 93  | 9              | 255          | 0         | 0       |         |
; | 2   | 8              | 3            | 1         | 18      |         |
; | 3   | 8              | 3            | 255       | 18      |         |
; | 4   | 8              | 3            | 255       | 18      |         |
; | 5   | 7              | 3            | 0         | 18      |         |
; | 6   | 7              | 3            | 255       | 18      |         |
; | 7   | 5              | 3            | 1         | 18      |         |
; | 8   | 6              | 3            | 2         | 18      |         |
; | 9   | 9              | 3            | 255       | 18      |         |
; | 10  | 5              | 3            | 1         | 18      |         |
; | 11  | 6              | 3            | 0         | 18      |         |
; | 12  | 6              | 3            | 255       | 18      |         |
; | 13  | 4              | 3            | 255       | 18      |         |
; | 14  | 9              | 3            | 0         | 18      |         |
; | 15  | 3              | 3            | 1         | 18      |         |
; | 16  | 8              | 3            | 1         | 18      |         |
; | 17  | 5              | 3            | 2         | 18      |         |
; | 18  | 6              | 3            | 1         | 18      |         |
; | 19  | 5              | 3            | 2         | 18      |         |
; | 20  | 5              | 3            | 1         | 18      |         |
; | 21  | 3              | 3            | 255       | 18      |         |
; | 22  | 7              | 3            | 255       | 18      |         |
; | 23  | 0              | 3            | 255       | 18      |         |
; | 24  | 0              | 3            | 255       | 18      |         |
; | 25  | 0              | 3            | 2         | 18      |         |
; | 26  | 5              | 3            | 255       | 18      |         |
; | 27  | 6              | 3            | 1         | 18      |         |
; | 28  | 1              | 3            | 254       | 18      |         |
; | 29  | 4              | 3            | 255       | 18      |         |
; | 30  | 5              | 3            | 255       | 18      |         |
; | 31  | 4              | 3            | 255       | 18      |         |
; | 32  | 6              | 3            | 255       | 18      |         |
; | 33  | 8              | 3            | 255       | 18      |         |
; | 97  | 8              | 13           | 255       | 18      |         |
; | 96  | 7              | 13           | 255       | 18      |         |
; | 36  | 7              | 17           | 1         | 17      |         |
; | 37  | 3              | 17           | 255       | 18      |         |
; | 38  | 4              | 17           | 1         | 23      |         |
; | 39  | 4              | 17           | 255       | 23      |         |
; | 40  | 7              | 13           | 0         | 12      |         |
; | 112 | 9              | 13           | 0         | 18      |         |
; | 112 | 9              | 13           | 0         | 18      |         |
; | 98  | 9              | 9            | 0         | 18      |         |
; | 98  | 9              | 9            | 0         | 18      |         |
; | 99  | 7              | 30           | 255       | 12      |         |
; | 101 | 7              | 30           | 1         | 12      |         |
; | 100 | 4              | 30           | 254       | 11      |         |
; | 102 | 4              | 30           | 2         | 11      |         |
; | 107 | 6              | 0            | 1         | 23      |         |
; | 108 | 3              | 0            | 1         | 23      |         |
; | 109 | 3              | 0            | 1         | 16      |         |
; | 110 | 6              | 0            | 1         | 16      |         |
; | 111 | 4              | 0            | 1         | 17      |         |
; | 123 | 4              | 0            | 0         | 14      |         |
; | 103 | 7              | 0            | 2         | 5       |         |
; | 104 | 5              | 0            | 4         | 6       |         |
; | 105 | 7              | 0            | 254       | 5       |         |
; | 106 | 5              | 0            | 252       | 6       |         |
; | 125 | 6              | 0            | 0         | 18      |         |
; | 117 | 9              | 15           | 0         | 18      |         |
; | 117 | 9              | 15           | 0         | 18      |         |
; | 115 | 4              | 9            | 255       | 18      |         |
; | 115 | 4              | 9            | 255       | 18      |         |
; | 118 | 9              | 20           | 255       | 17      |         |
; | 118 | 9              | 20           | 255       | 17      |         |
; +-----+----------------+--------------+-----------+---------+---------+
TABLE_SPELLS:
  DEFB $5D,$09,$FF,$00,$00,$F1,$99 ; 1:  $01 CAST_DISBELIEVE_CHOOSE_TARGET
                                   ; Disbelieve
  DEFB $02,$08,$03,$01,$12,$75,$99 ; 2:  $02 CAST_CREATURE King Cobra
  DEFB $03,$08,$03,$FF,$12,$75,$99 ; 3:  $03 CAST_CREATURE Dire Wolf
  DEFB $04,$08,$03,$FF,$12,$75,$99 ; 4:  $04 CAST_CREATURE Goblin
  DEFB $05,$07,$03,$00,$12,$75,$99 ; 5:  $05 CAST_CREATURE Crocodile
  DEFB $06,$07,$03,$FF,$12,$75,$99 ; 6:  $06 CAST_CREATURE Faun
  DEFB $07,$05,$03,$01,$12,$75,$99 ; 7:  $07 CAST_CREATURE Lion
  DEFB $08,$06,$03,$02,$12,$75,$99 ; 8:  $08 CAST_CREATURE Elf
  DEFB $09,$09,$03,$FF,$12,$75,$99 ; 9:  $09 CAST_CREATURE Orc
  DEFB $0A,$05,$03,$01,$12,$75,$99 ; 10: $0A CAST_CREATURE Bear
  DEFB $0B,$06,$03,$00,$12,$75,$99 ; 11: $0B CAST_CREATURE Gorilla
  DEFB $0C,$06,$03,$FF,$12,$75,$99 ; 12: $0C CAST_CREATURE Ogre
  DEFB $0D,$04,$03,$FF,$12,$75,$99 ; 13: $0D CAST_CREATURE Hydra
  DEFB $0E,$09,$03,$00,$12,$75,$99 ; 14: $0E CAST_CREATURE Giant Rat
  DEFB $0F,$03,$03,$01,$12,$75,$99 ; 15: $0F CAST_CREATURE Giant
  DEFB $10,$08,$03,$01,$12,$75,$99 ; 16: $10 CAST_CREATURE Horse
  DEFB $11,$05,$03,$02,$12,$75,$99 ; 17: $11 CAST_CREATURE Unicorn
  DEFB $12,$06,$03,$01,$12,$75,$99 ; 18: $12 CAST_CREATURE Centaur
  DEFB $13,$05,$03,$02,$12,$75,$99 ; 19: $13 CAST_CREATURE Pegasus
  DEFB $14,$05,$03,$01,$12,$75,$99 ; 20: $14 CAST_CREATURE Gryphon
  DEFB $15,$03,$03,$FF,$12,$75,$99 ; 21: $15 CAST_CREATURE Manticore
  DEFB $16,$07,$03,$FF,$12,$75,$99 ; 22: $16 CAST_CREATURE Bat
  DEFB $17,$00,$03,$FF,$12,$75,$99 ; 23: $17 CAST_CREATURE Green Dragon
  DEFB $18,$00,$03,$FF,$12,$75,$99 ; 24: $18 CAST_CREATURE Red Dragon
  DEFB $19,$00,$03,$02,$12,$75,$99 ; 25: $19 CAST_CREATURE Golden Dragon
  DEFB $1A,$05,$03,$FF,$12,$75,$99 ; 26: $1A CAST_CREATURE Harpy
  DEFB $1B,$06,$03,$01,$12,$75,$99 ; 27: $1B CAST_CREATURE Eagle
  DEFB $1C,$01,$03,$FE,$12,$75,$99 ; 28: $1C CAST_CREATURE Vampire
  DEFB $1D,$04,$03,$FF,$12,$75,$99 ; 29: $1D CAST_CREATURE Ghost
  DEFB $1E,$05,$03,$FF,$12,$75,$99 ; 30: $1E CAST_CREATURE Spectre
  DEFB $1F,$04,$03,$FF,$12,$75,$99 ; 31: $1F CAST_CREATURE Wraith
  DEFB $20,$06,$03,$FF,$12,$75,$99 ; 32: $20 CAST_CREATURE Skeleton
  DEFB $21,$08,$03,$FF,$12,$75,$99 ; 33: $21 CAST_CREATURE Zombie
  DEFB $61,$08,$0D,$FF,$12,$75,$99 ; 34: $22 CAST_CREATURE Gooey Blob
  DEFB $60,$07,$0D,$FF,$12,$75,$99 ; 35: $23 CAST_CREATURE Magic Fire
  DEFB $24,$07,$11,$01,$11,$DD,$9A ; 36: $24 CAST_TREES_OR_CASTLE Magic Wood
  DEFB $25,$03,$11,$FF,$12,$DD,$9A ; 37: $25 CAST_TREES_OR_CASTLE Shadow Wood
  DEFB $26,$04,$11,$01,$17,$DD,$9A ; 38: $26 CAST_TREES_OR_CASTLE Magic Castle
  DEFB $27,$04,$11,$FF,$17,$DD,$9A ; 39: $27 CAST_TREES_OR_CASTLE Dark Citadel
  DEFB $28,$07,$0D,$00,$0C,$76,$9B ; 40: $28 CAST_WALL Wall
  DEFB $70,$09,$0D,$00,$12,$59,$9C ; 41: $29 CAST_LIGHTNING Magic Bolt
  DEFB $70,$09,$0D,$00,$12,$59,$9C ; 42: $2A CAST_LIGHTNING Magic Bolt
  DEFB $62,$09,$09,$00,$12,$59,$9C ; 43: $2B CAST_LIGHTNING Lightning
  DEFB $62,$09,$09,$00,$12,$59,$9C ; 44: $2C CAST_LIGHTNING Lightning
  DEFB $63,$07,$1E,$FF,$0C,$E0,$9D ; 45: $2D CAST_DARK_POWER_SELECT_TARGET
                                   ; Vengeance
  DEFB $65,$07,$1E,$01,$0C,$E0,$9D ; 46: $2E CAST_DARK_POWER_SELECT_TARGET
                                   ; Decree
  DEFB $64,$04,$1E,$FE,$0B,$E0,$9D ; 47: $2F CAST_DARK_POWER_SELECT_TARGET Dark
                                   ; Power
  DEFB $66,$04,$1E,$02,$0B,$E0,$9D ; 48: $30 CAST_DARK_POWER_SELECT_TARGET
                                   ; Justice
  DEFB $6B,$06,$00,$01,$17,$04,$84 ; 49: $31 CAST_MAGIC_SHIELD Magic Shield
  DEFB $6C,$03,$00,$01,$17,$6A,$83 ; 50: $32 CAST_MAGIC_ARMOUR Magic Armour
  DEFB $6D,$03,$00,$01,$10,$9C,$83 ; 51: $33 CAST_MAGIC_SWORD Magic Sword
  DEFB $6E,$06,$00,$01,$10,$D0,$83 ; 52: $34 CAST_MAGIC_KNIFE Magic Knife
  DEFB $6F,$04,$00,$01,$11,$6A,$84 ; 53: $35 CAST_MAGIC_BOW Magic Bow
  DEFB $7B,$04,$00,$00,$0E,$38,$84 ; 54: $36 CAST_MAGIC_WINGS Magic Wings
  DEFB $67,$07,$00,$02,$05,$B0,$84 ; 55: $37 CAST_CHAOS_OR_LAW Law-1
  DEFB $68,$05,$00,$04,$06,$B0,$84 ; 56: $38 CAST_CHAOS_OR_LAW Law-2
  DEFB $69,$07,$00,$FE,$05,$B0,$84 ; 57: $39 CAST_CHAOS_OR_LAW Chaos-1
  DEFB $6A,$05,$00,$FC,$06,$B0,$84 ; 58: $3A CAST_CHAOS_OR_LAW Chaos-2
  DEFB $7D,$06,$00,$00,$12,$C0,$84 ; 59: $3B CAST_SHADOW_FORM Shadow Form
  DEFB $75,$09,$0F,$00,$12,$F7,$84 ; 60: $3C CAST_SUBVERSION Subversion
  DEFB $75,$09,$0F,$00,$12,$F7,$84 ; 61: $3D CAST_SUBVERSION Subversion
  DEFB $73,$04,$09,$FF,$12,$F6,$85 ; 62: $3E CAST_RAISE_DEAD Raise Dead
  DEFB $73,$04,$09,$FF,$12,$F6,$85 ; 63: $3F CAST_RAISE_DEAD Raise Dead
  DEFB $76,$09,$14,$FF,$11,$EF,$86 ; CAST_TURMOIL Turmoil
  DEFB $76,$09,$14,$FF,$11,$EF,$86 ; CAST_TURMOIL Turmoil

; Graphics - select cursor
GRAPHICS_SELECT_CURSOR:
  DEFB $FF,$80,$80,$87,$8C,$88,$8C,$87
  DEFB $FF,$01,$01,$E1,$31,$11,$01,$E1
  DEFB $80,$80,$88,$8C,$87,$80,$80,$FF
  DEFB $31,$11,$11,$31,$E1,$01,$01,$FF

; Table - Wizard spell inventories
;
; Contains the set of spells assigned to a wizard at the start of the game.
; They're arranged in two bytes - the purpose of the first byte is unknown, but
; the second byte is the spell ID. (TODO: investigate first byte) As the spell
; is cast, the byte representing the spell ID is set to 0.
TABLE_WIZARD_SPELL_INVENTORIES:
  DEFB $0F,$01,$12,$1C,$12,$00,$12,$17,$12,$3E
  DEFB $0E,$36,$12,$00,$12,$20,$12,$00,$12,$2B
  DEFB $12,$0B,$12,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $12,$00,$12,$00,$12,$00,$12,$00,$12,$3C
  DEFB $12,$1D,$12,$0B,$12,$19,$12,$17,$12,$19
  DEFB $10,$2C,$10,$34,$10,$34,$0F,$01,$0D,$1F
  DEFB $0C,$28,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$12,$02,$00,$05,$00,$1F,$00,$08,$00
  DEFB $1D,$00,$01,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00

; Graphics - wizard - magic sword
GRAPHICS_WIZ_SWORD:
  DEFB $00,$00,$00,$81,$41,$21,$13,$0F
  DEFB $00,$00,$00,$80,$80,$C0,$C0,$C0
  DEFB $00,$01,$03,$03,$03,$07,$00,$00
  DEFB $C0,$C0,$C0,$C0,$E0,$F0,$00,$00
  DEFB $00,$00,$20,$21,$11,$11,$0F,$03
  DEFB $00,$00,$00,$80,$80,$C0,$C0,$C0
  DEFB $00,$01,$03,$03,$03,$07,$00,$00
  DEFB $C0,$C0,$C0,$C0,$E0,$F0,$00,$00
  DEFB $08,$08,$08,$09,$09,$0D,$07,$01
  DEFB $00,$00,$00,$80,$80,$C0,$C0,$C0
  DEFB $00,$01,$03,$03,$03,$07,$00,$00
  DEFB $C0,$C0,$C0,$C0,$E0,$F0,$00,$00

; Graphics - wizard - magic knife
GRAPHICS_WIZ_KNIFE:
  DEFB $00,$00,$00,$01,$01,$01,$03,$03
  DEFB $00,$00,$00,$80,$80,$C0,$E0,$D0
  DEFB $03,$03,$0F,$03,$03,$07,$00,$00
  DEFB $D0,$D0,$C0,$C0,$E0,$E0,$00,$00
  DEFB $00,$00,$00,$01,$01,$01,$03,$23
  DEFB $00,$00,$00,$80,$80,$C0,$E0,$D0
  DEFB $15,$09,$03,$03,$03,$07,$00,$00
  DEFB $D0,$D0,$C0,$C0,$E0,$E0,$00,$00
  DEFB $00,$00,$00,$01,$01,$41,$23,$1F
  DEFB $00,$00,$00,$80,$80,$C0,$E0,$D0
  DEFB $01,$01,$03,$03,$03,$07,$00,$00
  DEFB $D0,$D0,$C0,$C0,$E0,$E0,$00,$00

; Graphics - wizard - magic armour
GRAPHICS_WIZ_ARMOUR:
  DEFB $01,$01,$05,$0E,$07,$0B,$09,$0A
  DEFB $80,$80,$A0,$70,$E0,$D0,$90,$50
  DEFB $0B,$07,$06,$06,$0C,$0C,$0C,$00
  DEFB $D0,$E0,$60,$60,$30,$30,$30,$00

; Graphics - wizard - magic shield
GRAPHICS_WIZ_SHIELD:
  DEFB $00,$00,$00,$01,$01,$01,$03,$05
  DEFB $00,$00,$00,$80,$80,$C0,$B0,$78
  DEFB $09,$03,$03,$03,$07,$07,$00,$00
  DEFB $78,$78,$78,$B0,$C0,$F0,$00,$00

; Graphics - wizard - magic wings
GRAPHICS_WIZ_WINGS:
  DEFB $00,$00,$00,$31,$79,$FF,$8F,$05
  DEFB $00,$00,$00,$8C,$9E,$FF,$F1,$A0
  DEFB $09,$03,$02,$06,$04,$04,$00,$00
  DEFB $90,$C0,$40,$60,$20,$20,$00,$00
  DEFB $00,$00,$00,$01,$01,$0F,$3F,$7D
  DEFB $00,$00,$00,$80,$80,$F0,$FC,$BE
  DEFB $89,$03,$02,$06,$04,$04,$00,$00
  DEFB $91,$C0,$40,$60,$20,$20,$00,$00
  DEFB $00,$00,$00,$01,$01,$03,$0F,$1F
  DEFB $00,$00,$00,$80,$80,$C0,$F0,$F8
  DEFB $19,$33,$22,$26,$04,$04,$00,$00
  DEFB $98,$CC,$44,$64,$20,$20,$00,$00

; Graphics - wizard - magic bow
GRAPHICS_WIZ_BOW:
  DEFB $00,$01,$03,$03,$03,$1F,$03,$03
  DEFB $00,$00,$60,$60,$70,$F0,$70,$70
  DEFB $03,$01,$01,$01,$01,$01,$00,$00
  DEFB $70,$F0,$F0,$F0,$F8,$FC,$00,$00
  DEFB $00,$01,$01,$02,$02,$0F,$02,$02
  DEFB $00,$00,$60,$E0,$F0,$F8,$F0,$F0
  DEFB $01,$01,$01,$01,$01,$01,$00,$00
  DEFB $70,$F0,$F0,$F0,$F8,$FC,$00,$00
  DEFB $00,$00,$01,$01,$02,$07,$02,$01
  DEFB $00,$80,$60,$60,$70,$FC,$70,$70
  DEFB $01,$00,$01,$01,$01,$01,$00,$00
  DEFB $70,$F0,$F0,$F0,$F8,$FC,$00,$00
  DEFB $00,$01,$03,$03,$03,$FB,$03,$03
  DEFB $00,$00,$60,$60,$70,$F8,$70,$70
  DEFB $03,$01,$01,$01,$01,$01,$00,$00
  DEFB $70,$F0,$F0,$F0,$F8,$FC,$00,$00

; Graphics data for a wizard with a sword
GRAPHICS_DATA_WIZ_SWORD:
  DEFB $B0,$80,$D0,$80,$F0,$80,$D0,$80 ; GRAPHICS_WIZ_SWORD

; Graphics data for a wizard with a knife
GRAPHICS_DATA_WIZ_KNIFE:
  DEFB $10,$81,$30,$81,$50,$81,$30,$81 ; GRAPHICS_WIZ_KNIFE

; Graphics data for a wizard with magic armour
GRAPHICS_DATA_WIZ_ARMOUR:
  DEFB $70,$81,$70,$81,$70,$81,$70,$81 ; GRAPHICS_WIZ_ARMOUR

; Graphics data for a wizard with a magic shield
GRAPHICS_DATA_WIZ_SHIELD:
  DEFB $90,$81,$90,$81,$90,$81,$90,$81 ; GRAPHICS_WIZ_SHIELD

; Graphics data for a wizard with magic wings
GRAPHICS_DATA_WIZ_WINGS:
  DEFB $B0,$81,$D0,$81,$F0,$81,$D0,$81 ; GRAPHICS_WIZ_WINGS

; Graphics data for a wizard with bow
GRAPHICS_DATA_WIZ_BOW:
  DEFB $10,$82,$30,$82,$50,$82,$70,$82 ; GRAPHICS_WIZ_BOW

; Table - Defines the graphics data for wizards.
TABLE_WIZ_GRAPHICS:
  DEFB $34,$FD,$34,$FD,$34,$FD,$34,$FD ; GRAPHICS_WIZ_1 Wizard 1
  DEFB $54,$FD,$54,$FD,$54,$FD,$54,$FD ; GRAPHICS_WIZ_2 Wizard 2
  DEFB $74,$FD,$74,$FD,$74,$FD,$74,$FD ; GRAPHICS_WIZ_3 Wizard 3
  DEFB $94,$FD,$94,$FD,$94,$FD,$94,$FD ; GRAPHICS_WIZ_4 Wizard 4
  DEFB $B4,$FD,$B4,$FD,$B4,$FD,$B4,$FD ; GRAPHICS_WIZ_5 Wizard 5
  DEFB $D4,$FD,$D4,$FD,$D4,$FD,$D4,$FD ; GRAPHICS_WIZ_6 Wizard 6
  DEFB $F4,$FD,$F4,$FD,$F4,$FD,$F4,$FD ; GRAPHICS_WIZ_7 Wizard 7
  DEFB $14,$FE,$14,$FE,$14,$FE,$14,$FE ; GRAPHICS_WIZ_8 Wizard 8

; Load current wizard details.
;
; Afterwards CURRENT_WIZ_NAME_POINTER will contain the memory address at which
; the current wizard's name can be found, and CURRENT_WIZ_GRAPHICS_POINTER will
; contain the memory address of the wizard's graphics.
;
; Used by the routines at CHANGE_WIZARD_GRAPHICS, CAST_MAGIC_BOW,
; CAST_SHADOW_FORM and MAIN_LOOP.
LOAD_CURRENT_WIZARD_DETAILS:
  PUSH HL
  LD A,(CURRENT_WIZARD_ID) ; Load the current player number from
                           ; CURRENT_WIZARD_ID into A.
  LD B,$00                ; Get the offset from which we can get the current
  ADD A,$28               ; wizard's information from the table at
  SLA A                   ; TABLE_CREATURE_DATA_ADDRESSES, and store it in BC.
  LD C,A                  ; We add 40 to the player number and double it using
                          ; SLA (we double it because that table has two bytes
                          ; for each entry).
  LD HL,TABLE_CREATURE_DATA_ADDRESSES ; Add the offset that was just calculated
  ADD HL,BC                           ; to the start address of the
                                      ; TABLE_CREATURE_DATA_ADDRESSES table to
                                      ; get the address at which the current
                                      ; wizard's name can be found. This is
                                      ; then stored in HL.
  LD E,(HL)               ; Load DE with the contents at the memory address we
  INC HL                  ; just found, i.e. the address at which we can find
  LD D,(HL)               ; the current wizard's name.
  EX DE,HL                ; Swap DE and HL. HL now contains the address at
                          ; which the current wizard's name can be found.
  LD DE,$0017             ; Set DE to 23 (because the graphics data is 23 bytes
                          ; after the start of the wizard name).
  LD (CURRENT_WIZ_NAME_POINTER),HL ; Store the memory address for the wizard's
                                   ; name into CURRENT_WIZ_NAME_POINTER.
  ADD HL,DE                            ; Calculate the start of the wizard's
  LD (CURRENT_WIZ_GRAPHICS_POINTER),HL ; graphics data and store it in
                                       ; CURRENT_WIZ_GRAPHICS_POINTER.
  POP HL
  RET

; Pointer - graphics data to apply to a wizard
;
; Will contain one of the addresses in the table starting at
; GRAPHICS_DATA_WIZ_SWORD. Mostly used in routine CHANGE_WIZARD_GRAPHICS, and
; at the start of a game when choosing the wizard graphics (MAIN_LOOP_9).
NEW_WIZ_GRAPHICS_POINTER:
  DEFB $D0,$82

; Pointer - address of the current wizard's graphics data.
;
; Populated in LOAD_CURRENT_WIZARD_DETAILS.
CURRENT_WIZ_GRAPHICS_POINTER:
  DEFB $A1,$90

; Flag - Is number key input limited to 2 to 8.
;
; 1 if the routine at KEYS_INPUT_NUMBERS should stop the user selecting the
; value 1.
PRESS_2_TO_8_FLAG:
  DEFB $00

; Change wizard graphics.
;
; Required variables: NEW_WIZ_GRAPHICS_POINTER (and the next byte) should
; contain the address of the graphics data to apply, and
; CURRENT_WIZ_GRAPHICS_POINTER (and the next byte) will contain the start
; address of the wizard's graphics data.
;
; An example of the wizard graphics settings we'll overwrite is at GRAPH_WIZ_1.
; Four sets of three bytes, consisting of: two bytes indicating the memory
; address of the graphics to use; then one byte indicating the paper and ink
; colour (which is chosen during game setup).
;
; Used by the routines at CAST_MAGIC_ARMOUR, CAST_MAGIC_SWORD,
; CAST_MAGIC_KNIFE, CAST_MAGIC_SHIELD, CAST_MAGIC_WINGS, CAST_MAGIC_BOW and
; MAIN_LOOP.
CHANGE_WIZARD_GRAPHICS:
  CALL LOAD_CURRENT_WIZARD_DETAILS ; Load current wizard details.
  LD B,$04                ; Going to loop four times...
CHANGE_WIZARD_GRAPHICS_0:
  PUSH BC                 ;
  LD B,$02                ; And two loops within that...
CHANGE_WIZARD_GRAPHICS_1:
  PUSH BC                 ;
  LD HL,(NEW_WIZ_GRAPHICS_POINTER) ; Load the address of the graphics data to
                                   ; apply from NEW_WIZ_GRAPHICS_POINTER into
                                   ; HL.
  LD A,(HL)
  INC HL
  LD (NEW_WIZ_GRAPHICS_POINTER),HL
  LD HL,(CURRENT_WIZ_GRAPHICS_POINTER)
  LD (HL),A
  INC HL
  LD (CURRENT_WIZ_GRAPHICS_POINTER),HL
  POP BC
  DJNZ CHANGE_WIZARD_GRAPHICS_1
  LD HL,(CURRENT_WIZ_GRAPHICS_POINTER)
  INC HL
  LD (CURRENT_WIZ_GRAPHICS_POINTER),HL
  POP BC
  DJNZ CHANGE_WIZARD_GRAPHICS_0
  RET

; Load the current wizard's status.
;
; Used by the routines at CAST_MAGIC_ARMOUR, CAST_MAGIC_SWORD,
; CAST_MAGIC_KNIFE, CAST_MAGIC_SHIELD, CAST_MAGIC_WINGS and CAST_SHADOW_FORM.
;
; Output:A The current wizard's status mask.
;        HL The memory location at which the current wizard's status mask can
;           be found.
LOAD_CURRENT_WIZARD_STATUS:
  LD A,(CURRENT_WIZARD_ID) ; Load the current player number from
                           ; CURRENT_WIZARD_ID into A.
  LD D,$00                ; Set DE to the current player number.
  LD E,A                  ;
  LD HL,WIZARD_STATUS_VALUES ; WIZARD_STATUS_VALUES is the address that stores
                             ; the wizard status flags. Load that address into
                             ; HL.
  ADD HL,DE               ; Adds DE to HL and stores the result in HL. This
                          ; gives us the memory address of the current wizard's
                          ; status.
  LD A,(HL)               ; Load the contents of HL into A.
  RET

; Cast wizard buff spell, e.g magic items, wings, shadow form
;
; Used by the routines at CAST_MAGIC_ARMOUR, CAST_MAGIC_SWORD,
; CAST_MAGIC_KNIFE, CAST_MAGIC_SHIELD, CAST_MAGIC_WINGS,CAST_MAGIC_BOW and
; CAST_SHADOW_FORM.
CAST_WIZARD_BUFF_SPELL:
  LD A,(WIZ_IS_COMP_CONTROLLED) ; If the current wizard is player controlled
  OR A                          ; jump to CAST_WIZARD_BUFF_SPELL_0.
  JR Z,CAST_WIZARD_BUFF_SPELL_0 ;
  CALL PRINT_SPELL_TO_CAST
CAST_WIZARD_BUFF_SPELL_0:
  CALL SPELL_ATTEMPT
  CALL FIND_CURRENT_WIZARD
  CALL DISPLAY_CAST_ANIMATION
  RET

; Cast Magic Armour
CAST_MAGIC_ARMOUR:
  LD A,(WIZ_IS_COMP_CONTROLLED) ; If the current wizard is player controlled
  OR A                          ; jump to CAST_MAGIC_ARMOUR_0.
  JR Z,CAST_MAGIC_ARMOUR_0      ;
  CALL LOAD_CURRENT_WIZARD_STATUS ; Load the wizard's status. Afterwards, A
                                  ; will contain the current wizard's status
                                  ; mask, and HL will contain the memory
                                  ; location at which that status mask can be
                                  ; found.
  AND $80                  ; Check the 128 bit of the wizard status. If it's
  JR Z,CAST_MAGIC_ARMOUR_0 ; set, the wizard already has magic armour, and we
                           ; fall through. Otherwise jump to
                           ; CAST_MAGIC_ARMOUR_0.
  LD A,$00                ; Record that the spell was not cast.
  LD (IS_SPELL_VALID),A   ;
  RET
CAST_MAGIC_ARMOUR_0:
  CALL CAST_WIZARD_BUFF_SPELL
  LD A,(SPELL_SUCCESS_FLAG) ; If the spell failed (see SPELL_SUCCESS_FLAG) jump
  OR A                      ; to CAST_MAGIC_ARMOUR_1.
  JR Z,CAST_MAGIC_ARMOUR_1  ;
  LD HL,GRAPHICS_DATA_WIZ_ARMOUR   ; Load NEW_WIZ_GRAPHICS_POINTER with the
  LD (NEW_WIZ_GRAPHICS_POINTER),HL ; graphics data for the magic armour (see
                                   ; table at GRAPHICS_DATA_WIZ_SWORD).
  CALL CHANGE_WIZARD_GRAPHICS ; Change the current wizard's graphics.
  CALL LOAD_CURRENT_WIZARD_STATUS ; Load the wizard's status. Afterwards, A
                                  ; will contain the current wizard's status
                                  ; mask, and HL will contain the memory
                                  ; location at which that status mask can be
                                  ; found.
  OR $C0
  LD (HL),A
CAST_MAGIC_ARMOUR_1:
  CALL MAYBE_MARK_ARENA_SQUARES_0
  CALL DISPLAY_SUCCESS_FAIL_MESSAGE ; Display the spell succeeds/fails message.
  RET

; Cast Magic Sword
CAST_MAGIC_SWORD:
  LD A,(WIZ_IS_COMP_CONTROLLED) ; If the current wizard is player controlled
  OR A                          ; jump to CAST_MAGIC_SWORD_0.
  JR Z,CAST_MAGIC_SWORD_0       ;
  CALL LOAD_CURRENT_WIZARD_STATUS ; Load the wizard's status. Afterwards, A
                                  ; will contain the current wizard's status
                                  ; mask, and HL will contain the memory
                                  ; location at which that status mask can be
                                  ; found.
  AND $04                 ; Check the 4 bit of the wizard status. If it's set,
  JR Z,CAST_MAGIC_SWORD_0 ; the wizard already has a magic sword, and we fall
                          ; through. Otherwise jump to CAST_MAGIC_SWORD_0.
  LD A,$00                ; Record that the spell was not cast.
  LD (IS_SPELL_VALID),A   ;
  RET
CAST_MAGIC_SWORD_0:
  CALL CAST_WIZARD_BUFF_SPELL
  LD A,(SPELL_SUCCESS_FLAG) ; If the spell failed (see SPELL_SUCCESS_FLAG) jump
  OR A                      ; to CAST_MAGIC_SWORD_1.
  JR Z,CAST_MAGIC_SWORD_1   ;
  LD HL,GRAPHICS_DATA_WIZ_SWORD    ; Load NEW_WIZ_GRAPHICS_POINTER with the
  LD (NEW_WIZ_GRAPHICS_POINTER),HL ; graphics data for the magic sword (see
                                   ; table at GRAPHICS_DATA_WIZ_SWORD).
  CALL CHANGE_WIZARD_GRAPHICS ; Change the current wizard's graphics.
  CALL LOAD_CURRENT_WIZARD_STATUS ; Load the wizard's status. Afterwards, A
                                  ; will contain the current wizard's status
                                  ; mask, and HL will contain the memory
                                  ; location at which that status mask can be
                                  ; found.
  AND $FC
  OR $04
  LD (HL),A
CAST_MAGIC_SWORD_1:
  CALL MAYBE_MARK_ARENA_SQUARES_0
  CALL DISPLAY_SUCCESS_FAIL_MESSAGE ; Display the spell succeeds/fails message.
  RET

; Cast Magic Knife
CAST_MAGIC_KNIFE:
  LD A,(WIZ_IS_COMP_CONTROLLED) ; If the current wizard is player controlled
  OR A                          ; jump to CAST_MAGIC_KNIFE_0.
  JR Z,CAST_MAGIC_KNIFE_0       ;
  CALL LOAD_CURRENT_WIZARD_STATUS ; Load the wizard's status. Afterwards, A
                                  ; will contain the current wizard's status
                                  ; mask, and HL will contain the memory
                                  ; location at which that status mask can be
                                  ; found.
  AND $07                 ; Check the 4,2 and 1 bits of the wizard status. If
  JR Z,CAST_MAGIC_KNIFE_0 ; they're set, the wizard already has a magic knife,
                          ; and we fall through. Otherwise jump to
                          ; CAST_MAGIC_KNIFE_0.
  LD A,$00                ; Record that the spell was not cast.
  LD (IS_SPELL_VALID),A   ;
  RET
CAST_MAGIC_KNIFE_0:
  CALL CAST_WIZARD_BUFF_SPELL
  LD A,(SPELL_SUCCESS_FLAG) ; If the spell failed (see SPELL_SUCCESS_FLAG) jump
  OR A                      ; to CAST_MAGIC_KNIFE_1.
  JR Z,CAST_MAGIC_KNIFE_1   ;
  LD HL,GRAPHICS_DATA_WIZ_KNIFE    ; Load NEW_WIZ_GRAPHICS_POINTER with the
  LD (NEW_WIZ_GRAPHICS_POINTER),HL ; graphics data for the magic knife (see
                                   ; table at GRAPHICS_DATA_WIZ_SWORD).
  CALL CHANGE_WIZARD_GRAPHICS ; Change the current wizard's graphics.
  CALL LOAD_CURRENT_WIZARD_STATUS ; Load the wizard's status. Afterwards, A
                                  ; will contain the current wizard's status
                                  ; mask, and HL will contain the memory
                                  ; location at which that status mask can be
                                  ; found.
  AND $F8
  OR $02
  LD (HL),A
CAST_MAGIC_KNIFE_1:
  CALL MAYBE_MARK_ARENA_SQUARES_0
  CALL DISPLAY_SUCCESS_FAIL_MESSAGE ; Display the spell succeeds/fails message.
  RET

; Cast Magic Shield
CAST_MAGIC_SHIELD:
  LD A,(WIZ_IS_COMP_CONTROLLED) ; If the current wizard is player controlled
  OR A                          ; jump to CAST_MAGIC_SHIELD_0.
  JR Z,CAST_MAGIC_SHIELD_0      ;
  CALL LOAD_CURRENT_WIZARD_STATUS ; Load the wizard's status. Afterwards, A
                                  ; will contain the current wizard's status
                                  ; mask, and HL will contain the memory
                                  ; location at which that status mask can be
                                  ; found.
  AND $40                  ; Check the 64 bit of the wizard status. If it's
  JR Z,CAST_MAGIC_SHIELD_0 ; set, the wizard already has a magic shield, and we
                           ; fall through. Otherwise jump to
                           ; CAST_MAGIC_SHIELD_0.
  LD A,$00                ; Record that the spell was not cast.
  LD (IS_SPELL_VALID),A   ;
  RET
CAST_MAGIC_SHIELD_0:
  CALL CAST_WIZARD_BUFF_SPELL
  LD A,(SPELL_SUCCESS_FLAG) ; If the spell failed (see SPELL_SUCCESS_FLAG) jump
  OR A                      ; to CAST_MAGIC_SHIELD_1.
  JR Z,CAST_MAGIC_SHIELD_1  ;
  LD HL,GRAPHICS_DATA_WIZ_SHIELD   ; Load NEW_WIZ_GRAPHICS_POINTER with the
  LD (NEW_WIZ_GRAPHICS_POINTER),HL ; graphics data for the magic shield (see
                                   ; table at GRAPHICS_DATA_WIZ_SWORD).
  CALL CHANGE_WIZARD_GRAPHICS ; Change the current wizard's graphics.
  CALL LOAD_CURRENT_WIZARD_STATUS ; Load the wizard's status. Afterwards, A
                                  ; will contain the current wizard's status
                                  ; mask, and HL will contain the memory
                                  ; location at which that status mask can be
                                  ; found.
  AND $7F
  OR $40
  LD (HL),A
CAST_MAGIC_SHIELD_1:
  CALL MAYBE_MARK_ARENA_SQUARES_0
  CALL DISPLAY_SUCCESS_FAIL_MESSAGE ; Display the spell succeeds/fails message.
  RET

; Cast Magic Wings
CAST_MAGIC_WINGS:
  LD A,(WIZ_IS_COMP_CONTROLLED) ; If the current wizard is player controlled
  OR A                          ; jump to CAST_MAGIC_WINGS_0.
  JR Z,CAST_MAGIC_WINGS_0       ;
  CALL LOAD_CURRENT_WIZARD_STATUS ; Load the wizard's status. Afterwards, A
                                  ; will contain the current wizard's status
                                  ; mask, and HL will contain the memory
                                  ; location at which that status mask can be
                                  ; found.
  AND $20                 ; Check the 32 bit of the wizard status. If it's set,
  JR Z,CAST_MAGIC_WINGS_0 ; the wizard already has magic wings, and we fall
                          ; through. Otherwise jump to CAST_MAGIC_WINGS_0.
  LD A,$00                ; Record that the spell was not cast.
  LD (IS_SPELL_VALID),A   ;
  RET
CAST_MAGIC_WINGS_0:
  CALL CAST_WIZARD_BUFF_SPELL
  LD A,(SPELL_SUCCESS_FLAG) ; If the spell failed (see SPELL_SUCCESS_FLAG) jump
  OR A                      ; to CAST_MAGIC_WINGS_1.
  JR Z,CAST_MAGIC_WINGS_1   ;
  LD HL,GRAPHICS_DATA_WIZ_WINGS    ; Load NEW_WIZ_GRAPHICS_POINTER with the
  LD (NEW_WIZ_GRAPHICS_POINTER),HL ; graphics data for the magic wings (see
                                   ; table at GRAPHICS_DATA_WIZ_SWORD).
  CALL CHANGE_WIZARD_GRAPHICS ; Change the current wizard's graphics.
  CALL LOAD_CURRENT_WIZARD_STATUS ; Load the wizard's status. Afterwards, A
                                  ; will contain the current wizard's status
                                  ; mask, and HL will contain the memory
                                  ; location at which that status mask can be
                                  ; found.
  OR $20
  LD (HL),A
CAST_MAGIC_WINGS_1:
  CALL MAYBE_MARK_ARENA_SQUARES_0
  CALL DISPLAY_SUCCESS_FAIL_MESSAGE ; Display the spell succeeds/fails message.
  RET

; Cast Magic Bow
CAST_MAGIC_BOW:
  LD A,(WIZ_IS_COMP_CONTROLLED) ; If the current wizard is player controlled
  OR A                          ; jump to CAST_MAGIC_BOW_0.
  JR Z,CAST_MAGIC_BOW_0         ;
  CALL LOAD_CURRENT_WIZARD_DETAILS ; Load current wizard details.
  OR A
  LD HL,(CURRENT_WIZ_GRAPHICS_POINTER)
  LD DE,$0009
  SBC HL,DE
  LD A,(HL)
  OR A
  JR Z,CAST_MAGIC_BOW_0
  LD A,$00                ; Record that the spell was not cast.
  LD (IS_SPELL_VALID),A   ;
  RET
CAST_MAGIC_BOW_0:
  CALL CAST_WIZARD_BUFF_SPELL
  LD A,(SPELL_SUCCESS_FLAG) ; If the spell failed (see SPELL_SUCCESS_FLAG) jump
  OR A                      ; to CAST_MAGIC_BOW_1.
  JR Z,CAST_MAGIC_BOW_1     ;
  LD HL,GRAPHICS_DATA_WIZ_BOW      ; Load NEW_WIZ_GRAPHICS_POINTER with the
  LD (NEW_WIZ_GRAPHICS_POINTER),HL ; graphics data for the magic bow (see table
                                   ; at GRAPHICS_DATA_WIZ_SWORD).
  CALL CHANGE_WIZARD_GRAPHICS ; Change the current wizard's graphics.
  CALL LOAD_CURRENT_WIZARD_DETAILS ; Load current wizard details.
  LD DE,$0009
  OR A
  LD HL,(CURRENT_WIZ_GRAPHICS_POINTER)
  SBC HL,DE
  LD (HL),$03
  INC HL
  LD (HL),$06
CAST_MAGIC_BOW_1:
  CALL MAYBE_MARK_ARENA_SQUARES_0
  CALL DISPLAY_SUCCESS_FAIL_MESSAGE ; Display the spell succeeds/fails message.
  RET

; Cast Chaos/Law
CAST_CHAOS_OR_LAW:
  LD A,(WIZ_IS_COMP_CONTROLLED) ; If the current wizard is player controlled
  OR A                          ; jump to CAST_CHAOS_OR_LAW_0.
  JR Z,CAST_CHAOS_OR_LAW_0      ;
  CALL PRINT_SPELL_TO_CAST
CAST_CHAOS_OR_LAW_0:
  CALL SPELL_ATTEMPT
  CALL DISPLAY_SUCCESS_FAIL_MESSAGE ; Display the spell succeeds/fails message.
  RET

; Cast Shadow Form
CAST_SHADOW_FORM:
  LD A,(WIZ_IS_COMP_CONTROLLED) ; If the current wizard is player controlled
  OR A                          ; jump to CAST_SHADOW_FORM_0.
  JR Z,CAST_SHADOW_FORM_0       ;
  CALL LOAD_CURRENT_WIZARD_STATUS ; Load the wizard's status. Afterwards, A
                                  ; will contain the current wizard's status
                                  ; mask, and HL will contain the memory
                                  ; location at which that status mask can be
                                  ; found.
  BIT 3,(HL)
  JR Z,CAST_SHADOW_FORM_0
  LD A,$00                ; Record that the spell was not cast.
  LD (IS_SPELL_VALID),A   ;
  RET
CAST_SHADOW_FORM_0:
  CALL CAST_WIZARD_BUFF_SPELL
  CALL DISPLAY_SUCCESS_FAIL_MESSAGE ; Display the spell succeeds/fails message.
  LD A,(SPELL_SUCCESS_FLAG) ; If the spell failed (see SPELL_SUCCESS_FLAG),
  OR A                      ; return.
  RET Z                     ;
  CALL LOAD_CURRENT_WIZARD_DETAILS ; Load current wizard details.
  LD HL,(CURRENT_WIZ_GRAPHICS_POINTER)
  LD DE,$0005
  ADD HL,DE
  LD (HL),$00
  LD DE,$0006
  ADD HL,DE
  LD (HL),$00
  CALL LOAD_CURRENT_WIZARD_STATUS ; Load the wizard's status. Afterwards, A
                                  ; will contain the current wizard's status
                                  ; mask, and HL will contain the memory
                                  ; location at which that status mask can be
                                  ; found.
  OR $08
  LD (HL),A
  RET

; Cast Subversion
CAST_SUBVERSION:
  LD A,(WIZ_IS_COMP_CONTROLLED) ; If the current wizard is computer controlled
  OR A                          ; jump to CAST_SUBVERSION_2.
  JR NZ,CAST_SUBVERSION_2       ;
  CALL CLEAR_MESSAGE_BAR  ; Clear the message bar.
  LD A,$03
  LD ($5C91),A
CAST_SUBVERSION_0:
  CALL KEY_INPUT          ; User key input.
  CALL $02BF              ; Keyboard ROM subroutine.
  CP $53                  ; If the user pressed S jump to CAST_SUBVERSION_1.
  JR Z,CAST_SUBVERSION_1  ;
  CP $4B                  ; If the user pressed anything other than K jump back
  JR NZ,CAST_SUBVERSION_0 ; to CAST_SUBVERSION_0.
  LD HL,$C2B1             ; The user pressed K. Play a sound effect, enable
  CALL SOUND_EFFECT_0     ; interrupts and return.
  EI                      ;
  RET                     ;
CAST_SUBVERSION_1:
  CALL GET_INFO_FROM_BOARD_STATE_TABLE_5 ; Get the value in board state table 5
                                         ; representing the spot at which the
                                         ; cursor is pointing. TODO - what does
                                         ; table 5 represent though?
  JR NZ,CAST_SUBVERSION_0 ; If it's not 0, jump back to the start.
  LD HL,(LOCATION_TARGET) ; A = ID of the target object.
  LD A,(HL)               ;
  CP $22                  ; If A == 0, or A >= $22 (i.e. not a creature that
  JP P,CAST_SUBVERSION_0  ; can be subverted) jump back to CAST_SUBVERSION_0.
  OR A                    ;
  JR Z,CAST_SUBVERSION_0  ;
  CALL SPELL_RANGE_CHECK
  JP M,CAST_SUBVERSION_0
  CALL ROUTINE_98DB
  JR NZ,CAST_SUBVERSION_0
  CALL ROUTINE_859C
  RET
CAST_SUBVERSION_2:
  LD HL,(LOCATION_SOURCE)
  LD (VAR_C78B),HL
  CALL ROUTINE_C7BC
  LD HL,(VAR_C78B)
  LD (LOCATION_SOURCE),HL
  LD HL,MAYBE_AI_TABLE
  LD (VAR_CD86),HL
  LD A,(VAR_C7BB)
  INC A
  CALL SHUFFLE_INVENTORY_MAYBE
CAST_SUBVERSION_3:
  CALL ROUTINE_A17E
  CP $FF
  JR NZ,CAST_SUBVERSION_4
  LD A,$00                ; Record that the spell was not cast.
  LD (IS_SPELL_VALID),A   ;
  CALL ROUTINE_96E6_MAYBE_BRIEF_PAUSE
  RET
CAST_SUBVERSION_4:
  LD HL,ARENA_STATE_1
  LD D,$00
  LD E,A
  ADD HL,DE
  LD (LOCATION_TARGET),HL
  CALL GET_INFO_FROM_BOARD_STATE_TABLE_5
  JR NZ,CAST_SUBVERSION_3
  LD HL,(LOCATION_TARGET)
  LD A,(HL)
  CP $22
  JP P,CAST_SUBVERSION_3
  OR A
  JR Z,CAST_SUBVERSION_3
  CALL SPELL_RANGE_CHECK
  JP M,CAST_SUBVERSION_3
  CALL ROUTINE_98DB
  JR NZ,CAST_SUBVERSION_3
  LD HL,(LOCATION_TARGET)
  LD DE,$01E1
  ADD HL,DE
  BIT 5,(HL)
  JR NZ,CAST_SUBVERSION_3
  CALL ROUTINE_859C
  RET

; Routine at 859C
;
; Used by the routine at CAST_SUBVERSION.
ROUTINE_859C:
  LD A,(WIZ_IS_COMP_CONTROLLED) ; If the current wizard is player controlled
  OR A                          ; jump to ROUTINE_859C_0.
  JR Z,ROUTINE_859C_0           ;
  CALL PRINT_SPELL_TO_CAST
ROUTINE_859C_0:
  CALL DISPLAY_CAST_ANIMATION
  LD HL,(LOCATION_TARGET)
  LD DE,$01E1
  ADD HL,DE
  BIT 4,(HL)
  JR NZ,ROUTINE_859C_1
  LD HL,(LOCATION_TARGET)
  LD D,(HL)
  LD E,$13                ; A = the creature's magic resistance.
  CALL GET_CREATURE_DATA  ;
  INC A
  LD (VAR_A172),A
  CALL MAYBE_RANDOM_NUM_GENERATOR
  LD HL,VAR_A172
  CP (HL)
  JP M,ROUTINE_859C_2
ROUTINE_859C_1:
  LD A,$00
  LD (SPELL_SUCCESS_FLAG),A
  CALL DISPLAY_SUCCESS_FAIL_MESSAGE ; Display the spell succeeds/fails message.
  RET
ROUTINE_859C_2:
  LD HL,(LOCATION_TARGET)
  LD DE,$01E1
  ADD HL,DE
  LD A,(HL)
  AND $F8
  LD E,A
  LD A,(CURRENT_WIZARD_ID)
  ADD A,E
  LD (HL),A
  LD A,$01
  LD (SPELL_SUCCESS_FLAG),A
  CALL DISPLAY_SUCCESS_FAIL_MESSAGE ; Display the spell succeeds/fails message.
  RET

; Maybe get owner
;
; Used by the routine at CAST_SUBVERSION.
GET_INFO_FROM_BOARD_STATE_TABLE_5:
  LD HL,(LOCATION_TARGET) ; Load the memory address at which the cursor is
  LD DE,$0281             ; pointing and add $0281. Go to that memory location
  ADD HL,DE               ; and set A to its value, OR A to set the registers,
  LD A,(HL)               ; and return. A now contains the corresponding
  OR A                    ; location in the fifth board state table. TODO -
  RET                     ; what does it represent?

; Cast Raise Dead
CAST_RAISE_DEAD:
  LD A,(WIZ_IS_COMP_CONTROLLED) ; If the current wizard is computer controlled
  OR A                          ; jump to CAST_RAISE_DEAD_3.
  JR NZ,CAST_RAISE_DEAD_3       ;
  CALL CLEAR_MESSAGE_BAR  ; Clear the message bar.
  LD A,$03
  LD ($5C91),A
CAST_RAISE_DEAD_1:
  CALL KEY_INPUT          ; User key input.
  CALL $02BF              ; Keyboard ROM subroutine.
  CP $53                  ; If the user pressed S jump to CAST_RAISE_DEAD_2.
  JR Z,CAST_RAISE_DEAD_2  ;
  CP $4B                  ; If the user pressed anything other than K jump back
  JR NZ,CAST_RAISE_DEAD_1 ; to CAST_RAISE_DEAD_1.
  LD HL,$C2B1             ; The user pressed K. Play a sound effect, enable
  CALL SOUND_EFFECT_0     ; interrupts and return.
  EI                      ;
  RET                     ;
CAST_RAISE_DEAD_2:
  LD HL,(LOCATION_TARGET) ; Set A to the ID of the creature at the cursor
  LD A,(HL)               ; location.
  OR A                    ; If there is no creature, jump back to
  JR Z,CAST_RAISE_DEAD_1  ; CAST_RAISE_DEAD_1.
  LD DE,$0141             ; A = data at cursor location for arena status table
  ADD HL,DE               ; 3.
  LD A,(HL)               ;
  CP $04                  ; If A != 4, jump back to CAST_RAISE_DEAD_1. 4 is
  JR NZ,CAST_RAISE_DEAD_1 ; used to indicate that the creature is dead.
  CALL SPELL_RANGE_CHECK
  JP M,CAST_RAISE_DEAD_1
  CALL ROUTINE_98DB
  JR NZ,CAST_RAISE_DEAD_1
  CALL ATTEMPT_RAISE_DEAD
  RET
CAST_RAISE_DEAD_3:
  LD HL,MAYBE_AI_TABLE
  LD (VAR_CD86),HL
  LD HL,ARENA_STATE_1     ; HL = first entry in arena table 1
  LD (LOCATION_TARGET),HL ; Cursor location = HL
  LD B,$9F                ; B = $9F (looping 160 times, once for each entry in
                          ; the arena table)
CAST_RAISE_DEAD_4:
  PUSH BC
  LD A,(HL)               ; A = entry at cursor location
  LD (VAR_A172),A
  LD DE,$0141             ; A = entry at cursor location in arena table 3.
  ADD HL,DE               ;
  LD A,(HL)               ;
  CP $04                  ; If A != 4 (i.e. the creature is not dead) jump to
  JR NZ,CAST_RAISE_DEAD_5 ; CAST_RAISE_DEAD_5.
  LD HL,VAR_C6D4
  LD D,$00
  LD A,(VAR_A172)
  SUB $02
  LD E,A
  ADD HL,DE
  LD B,(HL)
  LD HL,(LOCATION_TARGET)
  LD DE,ARENA_STATE_1
  OR A
  SBC HL,DE
  LD A,L
  LD HL,(VAR_CD86)
  LD (HL),B
  INC HL
  LD (HL),A
  INC HL
  LD (VAR_CD86),HL
CAST_RAISE_DEAD_5:
  LD HL,(LOCATION_TARGET) ; Increment the cursor location and set HL to the new
  INC HL                  ; value.
  LD (LOCATION_TARGET),HL ;
  POP BC                  ; If there are still spaces to check, jump back to
  DJNZ CAST_RAISE_DEAD_4  ; CAST_RAISE_DEAD_4.
  LD HL,MAYBE_AI_TABLE
  LD (VAR_CD86),HL
  LD A,(VAR_C7BB)
  INC A
  CALL SHUFFLE_INVENTORY_MAYBE
CAST_RAISE_DEAD_6:
  CALL ROUTINE_A17E
  CP $FF
  JR NZ,CAST_RAISE_DEAD_7
  LD A,$00                ; Record that the spell was not cast.
  LD (IS_SPELL_VALID),A   ;
  RET
CAST_RAISE_DEAD_7:
  LD HL,ARENA_STATE_1
  LD D,$00
  LD E,A
  ADD HL,DE
  LD (LOCATION_TARGET),HL
  LD A,(HL)
  OR A
  JR Z,CAST_RAISE_DEAD_6
  LD DE,$0141
  ADD HL,DE
  LD A,(HL)
  CP $04
  JR NZ,CAST_RAISE_DEAD_6
  CALL SPELL_RANGE_CHECK
  JP M,CAST_RAISE_DEAD_6
  CALL ROUTINE_98DB
  JR NZ,CAST_RAISE_DEAD_6
  CALL PRINT_SPELL_TO_CAST
  CALL ATTEMPT_RAISE_DEAD
  RET

; Attempt to raise the dead.
;
; Used by the routine at CAST_RAISE_DEAD.
ATTEMPT_RAISE_DEAD:
  CALL DISPLAY_CAST_ANIMATION ; Display cast animation.
  CALL SPELL_ATTEMPT      ; Work out if the spell succeeded.
  LD A,(SPELL_SUCCESS_FLAG) ; A = whether the spell succeeded
  OR A                    ; If A == 0, return.
  RET Z                   ;
  LD HL,(LOCATION_TARGET) ; The spell succeeded. Point HL to the memory address
  LD DE,$0141             ; of the dead creature in arena table 3.
  ADD HL,DE               ;
  LD (HL),$00             ; Set the value in arena table 3 to 0, the first
                          ; animation frame.
  LD DE,$00A0             ; Move HL on by 160 to get the matching location in
  ADD HL,DE               ; table 4.
  LD E,$60                 ; Add the current wizard ID to $60. We're building
  LD A,(CURRENT_WIZARD_ID) ; up a status value showing that the current wizard
  ADD A,E                  ; owns the creature, with bits 5 and 6 are set
                           ; (setting bit 5 stops the computer from
                           ; disbelieving it, and bit 6 ??? TODO).
  LD (HL),A               ; Set the new status in arena table 4.
  LD DE,$0140             ; HL = pointer to status value in arena table 6.
  ADD HL,DE               ;
  LD (HL),$00             ; Reset the value in arena table 6 to 0. TODO Why?
  CALL MAYBE_MARK_ARENA_SQUARES_0
  CALL DISPLAY_SUCCESS_FAIL_MESSAGE ; Display the spell succeeds/fails message.
  RET

; Cast Turmoil
CAST_TURMOIL:
  LD A,(WIZ_IS_COMP_CONTROLLED) ; If the current wizard is computer controlled
  OR A                          ; jump to CAST_TURMOIL_0.
  JR NZ,CAST_TURMOIL_0          ;
  CALL CAST_TURMOIL_3
  RET
CAST_TURMOIL_0:
  LD HL,(LOCATION_SOURCE)
  LD (VAR_C78B),HL
  CALL ROUTINE_C7BC
  LD HL,(VAR_C78B)
  LD (LOCATION_SOURCE),HL
  LD HL,MAYBE_AI_TABLE
  LD (VAR_CD86),HL
  LD A,(VAR_C7BB)
  INC A
  CALL SHUFFLE_INVENTORY_MAYBE
  LD A,$00
  LD (VAR_A172),A
CAST_TURMOIL_1:
  LD HL,(VAR_CD86)
  LD A,(HL)
  INC HL
  LD (VAR_CD86),HL
  OR A
  JR NZ,CAST_TURMOIL_2
  LD A,$00                ; Record that the spell was not cast.
  LD (IS_SPELL_VALID),A   ;
  RET
CAST_TURMOIL_2:
  LD HL,(VAR_A172)
  ADD A,(HL)
  LD (HL),A
  CP $1E
  JP M,CAST_TURMOIL_1
  CALL PRINT_SPELL_TO_CAST
  CALL CAST_TURMOIL_3
  RET
  NOP
  NOP
  NOP
  NOP
  NOP
CAST_TURMOIL_3:
  CALL SPELL_ATTEMPT
  LD A,(SPELL_SUCCESS_FLAG) ; If the spell failed (see SPELL_SUCCESS_FLAG) jump
  OR A                      ; to CAST_TURMOIL_7.
  JP Z,CAST_TURMOIL_7       ;
  CALL SET_ALL_CREATURES_READY ; Mark all objects in the arena as being ready
  LD HL,ARENA_STATE_1
  LD (LOCATION_SOURCE),HL
  LD B,$9F
CAST_TURMOIL_4:
  PUSH BC
  LD A,(HL)
  OR A
  JP Z,CAST_TURMOIL_6
  LD DE,$01E1
  ADD HL,DE
  BIT 7,(HL)
  JR NZ,CAST_TURMOIL_6
  LD HL,(LOCATION_SOURCE)
  LD ($873C),A
  LD DE,$0141
  ADD HL,DE
  LD A,(HL)
  LD ($8740),A
  LD DE,$00A0
  ADD HL,DE
  LD A,(HL)
  LD ($873D),A
  ADD HL,DE
  LD A,(HL)
  LD ($873E),A
  ADD HL,DE
  LD A,(HL)
  LD ($873F),A
CAST_TURMOIL_5:
  CALL MAYBE_RANDOM_NUM_GENERATOR
  LD HL,RANDOM_NUM_RESULT
  ADD A,(HL)
  CP $9F
  JP P,CAST_TURMOIL_5
  LD HL,ARENA_STATE_1
  LD D,$00
  LD E,A
  ADD HL,DE
  LD (LOCATION_TARGET),HL
  LD A,(HL)
  OR A
  JR NZ,CAST_TURMOIL_5
  CALL ROUTINE_980E
  JR Z,CAST_TURMOIL_5
  CALL DISPLAY_CAST_ANIMATION
  LD HL,(LOCATION_TARGET)
  LD A,($873C)
  LD (HL),A
  LD DE,$0141
  ADD HL,DE
  LD A,($8740)
  LD (HL),A
  LD DE,$00A0
  ADD HL,DE
  LD A,($873D)
  OR $80
  LD (HL),A
  ADD HL,DE
  LD A,($873E)
  LD (HL),A
  ADD HL,DE
  LD A,($873F)
  LD (HL),A
  LD HL,(LOCATION_SOURCE)
  LD (HL),$00
  LD DE,$0281
  ADD HL,DE
  LD (HL),$00
  LD DE,$00A0
  ADD HL,DE
  LD (HL),$00
  CALL MAYBE_MARK_ARENA_SQUARES_0
  HALT
  HALT
CAST_TURMOIL_6:
  LD HL,(LOCATION_SOURCE)
  INC HL
  LD (LOCATION_SOURCE),HL
  POP BC
  DEC B
  JP NZ,CAST_TURMOIL_4
CAST_TURMOIL_7:
  CALL DISPLAY_SUCCESS_FAIL_MESSAGE ; Display the spell succeeds/fails message.
  RET

; Print message to screen
;
; Prints one of the messages starting at TEXT_TITLE_1 (described in the table
; at TABLE_TEXT_MESSAGES_1).
;
; Used by the routines at MAIN_LOOP and CHECK_TREES_FOR_NEW_SPELL.
;
; Input:A the number of the message in the table at TABLE_TEXT_MESSAGES_1. (The
;         first entry is 0.)
;       BC the screen address where the message should be printed.
PRINT_MESSAGE_1:
  PUSH HL
  PUSH DE
  PUSH BC
  LD H,$00
  LD L,A
  ADD HL,HL
  ADD HL,HL
  LD DE,TABLE_TEXT_MESSAGES_1
  ADD HL,DE
  LD E,(HL)
  INC HL
  LD D,(HL)
  INC HL
  LD C,(HL)
  EX DE,HL
  LD E,C
  POP BC
  CALL ROUTINE_BAEE_PRINT_WORD
  POP DE
  POP HL
  RET

; Table - text message information
;
; Lists information about the text messages starting at TEXT_TITLE_1. Organised
; in sets of 4 bytes.
;
; * First two bytes (swapped around) list the memory address of the message
; * Third byte is the length of the message.
; * The last byte is zero.
TABLE_TEXT_MESSAGES_1:
  DEFB $59,$88,$1C,$00    ; TEXT_TITLE_1 $00 CHAOS -THE BATTLE OF WIZARDS
  DEFB $75,$88,$10,$00    ; TEXT_TITLE_2 $01 By Julian Gollop
  DEFB $85,$88,$12,$00    ; TEXT_HOW_MANY $02 How many wizards?
  DEFB $97,$88,$0F,$00    ; TEXT_PRESS_1_TO_8 $03 (Press 1 to 8)
  DEFB $A6,$88,$07,$00    ; TEXT_PLAYER $04 PLAYER
  DEFB $AD,$88,$15,$00    ; TEXT_COMP_CONTROLLED $05 Computer controlled?
  DEFB $C2,$88,$03,$00    ; TEXT_YES $06 YES
  DEFB $C5,$88,$02,$00    ; TEXT_NO $07 NO
  DEFB $C7,$88,$1B,$00    ; TEXT_WIZ_LEVEL $08 Level of computer wizards?
  DEFB $E2,$88,$1C,$00    ; TEXT_ENTER_NAME $09 Enter name (12 letters max.)
  DEFB $FE,$88,$0E,$00    ; TEXT_Y_OR_N $0A (Press Y or N)
  DEFB $0C,$89,$0E,$00    ; TEXT_WHICH_COLOUR $0B Which colour?
  DEFB $1A,$89,$11,$00    ; TEXT_WHICH_CHAR $0C Which character?
  DEFB $2B,$89,$18,$00    ; TEXT_12345678 $0D 1  2  3  4  5  6  7  8
  DEFB $41,$89,$0E,$00    ; TEXT_PRESS_2_TO_8 $0E (Press 2 to 8)
  DEFB $4F,$89,$0E,$00    ; TEXT_NEW_SPELL $0F NEW SPELL FOR
  DEFB $5D,$89,$1C,$00    ; TEXT_DRAW $10 THE CONTEST IS DRAWN BETWEEN
  DEFB $79,$89,$0E,$00    ; TEXT_WINNER_IS $11 THE WINNER IS:
  DEFB $87,$89,$10,$00    ; Possibly not used?
  DEFB $97,$89,$10,$00    ; Possibly not used?

; CHAOS -THE BATTLE OF WIZARDS
TEXT_TITLE_1:
  DEFM "CHAOS -THE BATTLE OF WIZARDS"

; By Julian Gollop
TEXT_TITLE_2:
  DEFM "By Julian Gollop"

; How many wizards?
TEXT_HOW_MANY:
  DEFM "How many wizards? "

; (Press 1 to 8)
TEXT_PRESS_1_TO_8:
  DEFM "(Press 1 to 8) "

; PLAYER
TEXT_PLAYER:
  DEFM "PLAYER "

; Computer controlled?
TEXT_COMP_CONTROLLED:
  DEFM "Computer controlled? "

; YES
TEXT_YES:
  DEFM "YES"

; NO
TEXT_NO:
  DEFM "NO"

; Level of computer wizards?
TEXT_WIZ_LEVEL:
  DEFM "Level of computer wizards? "

; Enter name (12 letters max.)
TEXT_ENTER_NAME:
  DEFM "Enter name (12 letters max.)"

; (Press Y or N)
TEXT_Y_OR_N:
  DEFM "(Press Y or N)"

; Which colour?
TEXT_WHICH_COLOUR:
  DEFM "Which colour? "

; Which character?
TEXT_WHICH_CHAR:
  DEFM "Which character? "

; 1  2  3  4  5  6  7  8
TEXT_12345678:
  DEFM "1  2  3  4  5  6  7  8"

; (Press 2 to 8)
TEXT_PRESS_2_TO_8:
  DEFM "(Press 2 to 8)"

; NEW SPELL FOR
TEXT_NEW_SPELL:
  DEFM "NEW SPELL FOR "

; THE CONTEST IS DRAWN BETWEEN
TEXT_DRAW:
  DEFM "THE CONTEST IS DRAWN BETWEEN"

; THE WINNER IS:
TEXT_WINNER_IS:
  DEFM "THE WINNER IS:"

; Data block at 8987
  DEFB $5E,$5E,$5E,$5E,$5E,$5E,$5E,$5E
  DEFB $5E,$5E,$5E,$5E,$5E,$5E,$5E,$5E
  DEFB $5E

; Blank string
  DEFM "              "

; Data block at 89A6
VAR_89A6:
  DEFB $5E

; Variable - strength of computer-controlled wizards.
COMP_WIZ_STRENGTH:
  DEFB $00

; Variable - last key pressed. (TODO: only number keys?)
;
; Stored as the hex ID from the character set (e.g. A is $41).
LAST_KEY_PRESSED:
  DEFB $32

; Variable - maybe computer wizard strength
VAR_89A9_MAYBE_COMP_WIZ_STRENGTH:
  DEFB $0F

; Pointer - address of the current wizard's name
;
; Populated in LOAD_CURRENT_WIZARD_DETAILS.
CURRENT_WIZ_NAME_POINTER:
  DEFB $5C,$EA

; Data block at 89AC
VAR_89AC:
  DEFB $11,$10

; Variable - name length during name entry
NAME_ENTRY_LENGTH:
  DEFB $07

; Data block at 89AF
VAR_89AF_MAYBE_LAST_LETTER_PRESSED:
  DEFB $0D

; Keyboard input: picking a number from 1 to 8.
;
; Waits for the user to pick a number between 1 and 8, and sets A to the chosen
; number minus 1. i.e. pressing 3 will result in A having value $02. A will
; then match up with the ID of a wizard with that number, as the wizard IDs
; start counting from 0.
;
; If the flag at PRESS_2_TO_8_FLAG is set, TODO
;
; Used by the routine at MAIN_LOOP.
;
; Output:A The number chosen minus 1.
KEYS_INPUT_NUMBERS:
  PUSH BC
KEYS_INPUT_NUMBERS_0:
  CALL $02BF              ; Keyboard ROM subroutine.
  CP $31                    ; Don't continue until the number pressed is
  JP M,KEYS_INPUT_NUMBERS_0 ; between 1 and 8 inclusive.
  CP $39                    ;
  JP P,KEYS_INPUT_NUMBERS_0 ;
  LD (LAST_KEY_PRESSED),A ; Save the last key pressed to LAST_KEY_PRESSED.
  LD A,(PRESS_2_TO_8_FLAG)  ; Check the flag at PRESS_2_TO_8_FLAG. If it's 0,
  OR A                      ; jump to KEYS_INPUT_NUMBERS_1. Otherwise fall
  JR Z,KEYS_INPUT_NUMBERS_1 ; through.
  LD A,(LAST_KEY_PRESSED) ; Load the key pressed back into A.
  CP $32                    ; If it's less than 2, jump back to
  JP M,KEYS_INPUT_NUMBERS_0 ; KEYS_INPUT_NUMBERS_0. The flag had been set, so
                            ; we're not allowed to choose the number 1.
KEYS_INPUT_NUMBERS_1:
  POP BC
  LD A,$47                ; Set the colours to white on black ($47).
  LD ($5C8F),A            ;
  LD A,(LAST_KEY_PRESSED)
  CALL PRINT_SINGLE_CHAR
  LD HL,VAR_89EF_MAYBE_TABLE
  CALL SOUND_EFFECT_0
  CALL UNKNOWN_SETUP_ROUTINE_907B
  LD A,$00                 ; Set the "press 2 to 8 only" flag back to 0.
  LD (PRESS_2_TO_8_FLAG),A ;
  LD A,(LAST_KEY_PRESSED)
  SUB $31
  RET

; Data block at 89EF
VAR_89EF_MAYBE_TABLE:
  DEFB $04,$0C,$04,$03,$02,$01,$01,$07
  DEFB $50,$22

; Main game loop.
;
; Used by the routine at ENTRYPOINT.
MAIN_LOOP:
  XOR A
  OUT ($FE),A
  LD ($5C8F),A
  LD ($5C8D),A
  LD A,$FF
  LD ($5C8E),A
  LD A,$03
  LD ($5C91),A
  DI
  CALL CLEAR_SCREEN       ; Clear the screen.
  LD HL,WIZARD_STATUS_VALUES ; Clear the data at WIZARD_STATUS_VALUES (wizard
  LD DE,$AC17                ; status) and UNKNOWN_WIZARD_STATUS_VALUES (TODO
  LD (HL),$00                ; ???).
  LD BC,$001F                ;
  LDIR                       ;
  LD HL,TABLE_WIZARD_SPELL_INVENTORIES ; Clear the wizard spell inventories
  LD DE,$7F48                          ; (TABLE_WIZARD_SPELL_INVENTORIES to
  LD (HL),$00                          ; 8086).
  LD BC,$013F                          ;
  LDIR                                 ;
  LD HL,ARENA_STATE_1     ; Clear out the game board state information at
  LD DE,$E020             ; ARENA_STATE_1.
  LD (HL),$00             ;
  LD BC,$009F             ;
  LDIR                    ;
  LD HL,ARENA_STATE_2     ; Clear out the information from board state tables
  LD DE,$E0C1             ; 2-6 (from ARENA_STATE_2 to E3DF)
  LD (HL),$00             ;
  LD BC,$031F             ;
  LDIR                    ;
  LD A,$00
  LD (CHAOS_LAW_LEVEL),A
  LD A,$5A                ; Draw the border in red on magenta ($5A).
  LD ($5C8F),A            ;
  CALL DRAW_BORDER        ;
  LD A,$43                ; Print the message with ID $00 (CHAOS - THE BATTLE
  LD ($5C8F),A            ; OF WIZARDS) in magenta on black ($43) at screen
  LD BC,$0202             ; position $0202.
  LD A,$00                ;
  CALL PRINT_MESSAGE_1    ;
  LD A,$42                ; Print the message with ID $01 (By Julian Gollop) in
  LD ($5C8F),A            ; red on black ($42) at screen position $0408.
  LD BC,$0408             ;
  LD A,$01                ;
  CALL PRINT_MESSAGE_1    ;
  LD A,$46                ; Print the message with ID $02 (How many wizards?)
  LD ($5C8F),A            ; in yellow on black ($46) at screen position $0902.
  LD BC,$0902             ;
  LD A,$02                ;
  CALL PRINT_MESSAGE_1    ;
  LD A,$44                ; Print the message with ID $0E ((Press 2 to 8)) in
  LD ($5C8F),A            ; green on black ($44) at screen position $0B02.
  LD BC,$0B02             ;
  LD A,$0E                ;
  CALL PRINT_MESSAGE_1    ;
  LD BC,$0914
  LD A,$01                 ; Set the flag which indicates we're picking the
  LD (PRESS_2_TO_8_FLAG),A ; number of wizards in the game, and have the user
  CALL KEYS_INPUT_NUMBERS  ; pick a number between 2 and 8.
  INC A                   ; Set NUM_OF_WIZARDS, which stores the number of
  LD (NUM_OF_WIZARDS),A   ; wizards in the game.
  LD A,$46                ; Print the message with ID $08 (Level of computer
  LD ($5C8F),A            ; wizards?) in yellow on black ($46) at screen
  LD BC,$0E02             ; position $0E02.
  LD A,$08                ;
  CALL PRINT_MESSAGE_1    ;
  LD A,$43                ; Print the message with ID $03 ((Press 1 to 8)) in
  LD ($5C8F),A            ; magenta on black ($43) at screen position $1002.
  LD BC,$1002             ;
  LD A,$03                ;
  CALL PRINT_MESSAGE_1    ;
  LD BC,$0E1D
  CALL KEYS_INPUT_NUMBERS ; Have the user pick a number between 1 and 8.
  LD (COMP_WIZ_STRENGTH),A ; Store the number selected at COMP_WIZ_STRENGTH.
  SLA A                                   ; Double it twice and add 15, then
  SLA A                                   ; store the result in
  ADD A,$0F                               ; VAR_89A9_MAYBE_COMP_WIZ_STRENGTH.
  LD (VAR_89A9_MAYBE_COMP_WIZ_STRENGTH),A ; 0,1,2,3,4,5,6,7 maps to 15, 19, 23,
                                          ; 27, 31, 35, 39, 43
  LD B,$0A                            ; TODO Pause for a short time?
MAIN_LOOP_0:
  PUSH BC                             ;
  CALL ROUTINE_96E6_MAYBE_BRIEF_PAUSE ;
  POP BC                              ;
  DJNZ MAIN_LOOP_0                    ;
  LD A,$00                 ; Set current wizard ID to 0.
  LD (CURRENT_WIZARD_ID),A ;
  LD A,(NUM_OF_WIZARDS)   ; Load B with the number of wizards in this game.
  LD B,A                  ; We're setting up to loop between MAIN_LOOP_1 and
                          ; 8E11.
  LD HL,MAYBE_AI_TABLE
  LD (VAR_CD86),HL
MAIN_LOOP_1:
  PUSH BC
  CALL CLEAR_SCREEN       ; Clear the screen.
  LD A,$69                ; Draw the border in blue on cyan ($69).
  LD ($5C8F),A            ;
  CALL DRAW_BORDER        ;
  LD BC,$0202             ; Print the message with ID $04 (PLAYER ) in yellow
  LD A,$46                ; on black ($46) at screen position $0202.
  LD ($5C8F),A            ;
  LD A,$04                ;
  CALL PRINT_MESSAGE_1    ;
  LD A,(CURRENT_WIZARD_ID) ; Print the current player number.
  ADD A,$31                ;
  CALL PRINT_SINGLE_CHAR   ;
  LD A,$43                ; Print the message with ID $09 (Enter name (12
  LD ($5C8F),A            ; letters max.)) in magenta on black ($43)  at screen
  LD BC,$0402             ; position $0402.
  LD A,$09                ;
  CALL PRINT_MESSAGE_1    ;
  CALL LOAD_CURRENT_WIZARD_DETAILS ; Load current wizard details.
  LD A,$00
  LD (NAME_ENTRY_LENGTH),A
  LD HL,$0602
  LD (VAR_89AC),HL
  LD A,$45                ; Set the colours to cyan on black ($45).
  LD ($5C8F),A            ;
MAIN_LOOP_2:
  CALL $02BF              ; Keyboard ROM subroutine.
  LD (VAR_89AF_MAYBE_LAST_LETTER_PRESSED),A
  CP $0D                          ; If the last key pressed was Enter jump to
  JP Z,MAIN_LOOP_5_STORE_WIZ_NAME ; MAIN_LOOP_5_STORE_WIZ_NAME.
  CP $0C                  ; If the last key pressed was Delete jump to
  JR NZ,MAIN_LOOP_3       ; MAIN_LOOP_3.
  LD A,(NAME_ENTRY_LENGTH)
  OR A
  JR Z,MAIN_LOOP_2
  LD BC,(VAR_89AC)
  DEC BC
  LD A,$20
  CALL PRINT_SINGLE_CHAR
  LD HL,(VAR_89AC)
  DEC HL
  LD (VAR_89AC),HL
  LD HL,NAME_ENTRY_LENGTH
  DEC (HL)
  LD HL,(CURRENT_WIZ_NAME_POINTER)
  DEC HL
  LD (CURRENT_WIZ_NAME_POINTER),HL
  LD HL,VAR_89EF_MAYBE_TABLE
  CALL SOUND_EFFECT_0
  CALL ROUTINE_96E6_MAYBE_BRIEF_PAUSE
  JP MAIN_LOOP_2
MAIN_LOOP_3:
  LD A,(NAME_ENTRY_LENGTH)
  CP $0B
  JP Z,MAIN_LOOP_2
  LD A,(VAR_89AF_MAYBE_LAST_LETTER_PRESSED)
  CP $20
  JR Z,MAIN_LOOP_4
  CP $41
  JP M,MAIN_LOOP_2
  CP $7B
  JP P,MAIN_LOOP_2
MAIN_LOOP_4:
  LD HL,(CURRENT_WIZ_NAME_POINTER)
  LD (HL),A
  INC HL
  LD (CURRENT_WIZ_NAME_POINTER),HL
  LD HL,NAME_ENTRY_LENGTH
  INC (HL)
  LD BC,(VAR_89AC)
  CALL PRINT_SINGLE_CHAR
  LD HL,(VAR_89AC)
  INC HL
  LD (VAR_89AC),HL
  LD HL,VAR_89EF_MAYBE_TABLE
  CALL SOUND_EFFECT_0
  CALL UNKNOWN_SETUP_ROUTINE_907B
  JP MAIN_LOOP_2
MAIN_LOOP_5_STORE_WIZ_NAME:
  LD A,(NAME_ENTRY_LENGTH) ; If the name entered had zero characters in it,
  OR A                     ; jump back to MAIN_LOOP_2.
  JP Z,MAIN_LOOP_2         ;
  LD H,$00                    ; Load HL with the address at which we should
  LD A,(CURRENT_WIZARD_ID)    ; store the wizard's name data. To calculate
  ADD A,$29                   ; this, take the wizard ID and add $29. Quadruple
  LD L,A                      ; that figure. That tells you the number of bytes
  ADD HL,HL                   ; after TABLE_TEXT_MESSAGES_2 at which you should
  ADD HL,HL                   ; store the data. Add them together and store the
  LD DE,TABLE_TEXT_MESSAGES_2 ; result in HL.
  ADD HL,DE                   ;
  INC HL                   ; Move the pointer two bytes forward, so that it
  INC HL                   ; points to the memory location storing the name's
  LD A,(NAME_ENTRY_LENGTH) ; length. Store the name's length in there.
  LD (HL),A                ;
  CALL UNKNOWN_SETUP_ROUTINE_907B
  LD BC,$0902             ; Print the message with ID $05 (Computer
  LD A,$43                ; controlled?) in magenta on black ($43) at screen
  LD ($5C8F),A            ; position $0902.
  LD A,$05                ;
  CALL PRINT_MESSAGE_1    ;
  LD A,$46                ; Set the colours to yellow on black ($46).
  LD ($5C8F),A            ;
  LD A,$00                      ; Set WIZ_IS_COMP_CONTROLLED (flag indicating
  LD (WIZ_IS_COMP_CONTROLLED),A ; if this wizard is computer controlled) to 0
                                ; (false) by default.
MAIN_LOOP_6_IS_WIZ_COMP:
  CALL $02BF              ; Keyboard ROM subroutine.
  CP $59                        ; If the user pressed Y jump to
  JR Z,MAIN_LOOP_7_SET_WIZ_COMP ; MAIN_LOOP_7_SET_WIZ_COMP.
  CP $4E                        ; If the user pressed any key other than N jump
  JR NZ,MAIN_LOOP_6_IS_WIZ_COMP ; back to MAIN_LOOP_6_IS_WIZ_COMP.
  LD BC,$0917             ; Print the message with ID $07 (NO) in yellow on
  LD A,$07                ; black ($46) at screen position $0917.
  CALL PRINT_MESSAGE_1    ;
  JR MAIN_LOOP_8_WHICH_CHAR
MAIN_LOOP_7_SET_WIZ_COMP:
  LD BC,$0917             ; Print the message with ID $06 (YES) in yellow on
  LD A,$06                ; black ($46) at screen position $0917.
  CALL PRINT_MESSAGE_1    ;
  LD HL,COMP_CONTROLLED_WIZARDS ; Going to update the flag which indicates
  LD D,$00                      ; whether the wizard is computer controlled.
  LD A,(CURRENT_WIZARD_ID)      ; See COMP_CONTROLLED_WIZARDS. We'll set DE to
  LD E,A                        ; the current wizard number (found at
  ADD HL,DE                     ; CURRENT_WIZARD_ID) and add it to
  LD (HL),$01                   ; COMP_CONTROLLED_WIZARDS to get the memory
                                ; location to alter. Then set it to 1.
  LD A,$01                      ; Set WIZ_IS_COMP_CONTROLLED (flag indicating
  LD (WIZ_IS_COMP_CONTROLLED),A ; if this wizard is computer controlled) to 1
                                ; (true).
MAIN_LOOP_8_WHICH_CHAR:
  LD HL,VAR_89EF_MAYBE_TABLE
  CALL SOUND_EFFECT_0
  CALL UNKNOWN_SETUP_ROUTINE_907B
  LD BC,$0B02             ; Print the message with ID $0C (Which character?) in
  LD A,$43                ; magenta on black ($43) at screen position $0B02.
  LD ($5C8F),A            ;
  LD A,$0C                ;
  CALL PRINT_MESSAGE_1    ;
  LD A,$45                ; Print the message with ID $0D (1 2 3 4 5 6 7 8) in
  LD ($5C8F),A            ; cyan on black ($45) at screen position $0D02.
  LD BC,$0D02             ;
  LD A,$0D                ;
  CALL PRINT_MESSAGE_1    ;
  LD BC,$0D03
  LD (VAR_89AC),BC
  LD A,$00
  LD (LAST_KEY_PRESSED),A
  LD B,$08
MAIN_LOOP_9:
  PUSH BC
  LD A,(LAST_KEY_PRESSED) ; A = last key pressed (LAST_KEY_PRESSED)
  LD (WIZARD_CHARACTER_PICK),A ; Set the wizard character that's been picked
                               ; (WIZARD_CHARACTER_PICK)
  INC A
  LD (LAST_KEY_PRESSED),A
  CALL DRAW_PICKED_CHARACTER ; Call DRAW_PICKED_CHARACTER to draw the picked
                             ; character.
  LD BC,(VAR_89AC)
  INC BC
  INC BC
  INC BC
  LD (VAR_89AC),BC
  POP BC
  DJNZ MAIN_LOOP_9
  LD BC,$0B13
  CALL KEYS_INPUT_NUMBERS ; Have the user pick a number between 1 and 8.
  LD (WIZARD_CHARACTER_PICK),A ; Save the key pressed to WIZARD_CHARACTER_PICK.
  LD BC,$0B14
  LD (VAR_89AC),BC
  CALL DRAW_PICKED_CHARACTER ; Display the picked character on screen.
  LD HL,TABLE_WIZ_GRAPHICS     ; HL = the wizard's graphics data in the table
  LD D,$00                     ; at TABLE_WIZ_GRAPHICS.
  LD A,(WIZARD_CHARACTER_PICK) ;
  SLA A                        ;
  SLA A                        ;
  SLA A                        ;
  LD E,A                       ;
  ADD HL,DE                    ;
  LD (NEW_WIZ_GRAPHICS_POINTER),HL ; Set NEW_WIZ_GRAPHICS_POINTER (the next
                                   ; routine will save the current wizard's
                                   ; graphics to this address)
  CALL CHANGE_WIZARD_GRAPHICS ; Change the current wizard's graphics.
  LD A,$43                ; Print the message with ID $0B (Which colour?) in
  LD ($5C8F),A            ; magenta on black ($43) at screen position $1002.
  LD BC,$1002             ;
  LD A,$0B                ;
  CALL PRINT_MESSAGE_1    ;
  LD A,$46                ; Print the message with ID $0D (1 2 3 4 5 6 7 8) in
  LD ($5C8F),A            ; yellow on black ($46) at screen position $1202.
  LD BC,$1202             ;
  LD A,$0D                ;
  CALL PRINT_MESSAGE_1    ;
  LD BC,$1203
  LD (VAR_89AC),BC
  LD HL,VAR_90D7_MAYBE_TABLE
  LD (CURRENT_WIZ_GRAPHICS_POINTER),HL
  LD B,$08
MAIN_LOOP_10:
  PUSH BC
  LD HL,(CURRENT_WIZ_GRAPHICS_POINTER)
  LD A,(HL)
  LD ($5C8F),A
  INC HL
  LD (CURRENT_WIZ_GRAPHICS_POINTER),HL
  CALL DRAW_PICKED_CHARACTER
  LD HL,(VAR_89AC)
  LD DE,$0003
  ADD HL,DE
  LD (VAR_89AC),HL
  POP BC
  DJNZ MAIN_LOOP_10
  LD BC,$1010
  CALL KEYS_INPUT_NUMBERS ; Have the user pick a number between 1 and 8.
  LD HL,VAR_90D7_MAYBE_TABLE
  LD D,$00
  LD E,A
  ADD HL,DE
  LD A,(HL)
  LD ($5C8F),A
  LD BC,$1011
  LD (VAR_89AC),BC
  CALL DRAW_PICKED_CHARACTER
  CALL LOAD_CURRENT_WIZARD_DETAILS ; Load current wizard details.
  LD HL,(CURRENT_WIZ_GRAPHICS_POINTER)
  DEC HL
  LD DE,$0003
  LD A,($5C8F)
  LD B,$04
MAIN_LOOP_11:
  ADD HL,DE
  LD (HL),A
  DJNZ MAIN_LOOP_11
  LD A,$00
  LD (VAR_9049_MAYBE_COMP_WIZ_STRENGTH),A
  LD A,(WIZ_IS_COMP_CONTROLLED) ; If the current wizard is player controlled
  OR A                          ; jump to MAIN_LOOP_12.
  JR Z,MAIN_LOOP_12             ;
  LD A,(COMP_WIZ_STRENGTH)
  LD (VAR_9049_MAYBE_COMP_WIZ_STRENGTH),A
MAIN_LOOP_12:
  CALL LOAD_CURRENT_WIZARD_DETAILS ; Load current wizard details.
  LD HL,(CURRENT_WIZ_NAME_POINTER)
  LD D,$00
  LD E,$0D
  ADD HL,DE
  CALL MAYBE_RANDOM_NUM_GENERATOR
  SRA A
  INC A
  LD E,A
  LD A,(VAR_9049_MAYBE_COMP_WIZ_STRENGTH)
  SRA A
  ADD A,E
  LD (HL),A
  INC HL
  LD (HL),$00
  INC HL
  LD (HL),$00
  CALL MAYBE_RANDOM_NUM_GENERATOR
  SRA A
  INC A
  LD E,A
  LD A,(VAR_9049_MAYBE_COMP_WIZ_STRENGTH)
  SRA A
  ADD A,E
  INC HL
  LD (HL),A
  INC HL
  LD (HL),$01
  CALL MAYBE_RANDOM_NUM_GENERATOR
  SRA A
  ADD A,$03
  LD E,A
  LD A,(VAR_9049_MAYBE_COMP_WIZ_STRENGTH)
  SRA A
  SRA A
  ADD A,E
  INC HL
  LD (HL),A
  CALL MAYBE_RANDOM_NUM_GENERATOR
  SRA A
  SRA A
  ADD A,$06
  INC HL
  LD (HL),A
  CALL MAYBE_RANDOM_NUM_GENERATOR
  SRA A
  ADD A,$0B
  LD E,A
  LD A,(VAR_9049_MAYBE_COMP_WIZ_STRENGTH)
  ADD A,E
  CP $15
  JP M,MAIN_LOOP_13
  LD A,$14
MAIN_LOOP_13:
  INC HL
  LD (WIZARD_SPELL_COUNT),A ; Set WIZARD_SPELL_COUNT (wizard spell count)
  LD (HL),A
  INC HL
  LD (HL),$00
  LD A,(VAR_9049_MAYBE_COMP_WIZ_STRENGTH)
  SRA A
  LD E,A
  LD A,$05
  SUB E
  LD (VAR_A172),A
  CALL MAYBE_RANDOM_NUM_GENERATOR
  LD E,A
  LD A,(VAR_A172)
  CP E
  JP P,MAIN_LOOP_14_ASSIGN_SPELLS
  CALL MAYBE_RANDOM_NUM_GENERATOR
  SRA A
  SRA A
  LD (HL),A
MAIN_LOOP_14_ASSIGN_SPELLS:
  CALL GET_CURRENT_WIZ_INVENTORY_LOCATION ; Get the current wizard's inventory
                                          ; location
  LD HL,(CURRENT_WIZ_INVENTORY_POINTER) ; HL = current wizard's inventory
  DEC HL                                ; location
  LD (CURRENT_WIZ_INVENTORY_POINTER),HL ; Save HL to
                                        ; CURRENT_WIZ_INVENTORY_POINTER (the
                                        ; wizard's inventory location)
  CALL MAYBE_RANDOM_NUM_GENERATOR ; Get a random number (0-9?) and add 12 to
  ADD A,$0C                       ; it. TODO Why?
  LD HL,(CURRENT_WIZ_INVENTORY_POINTER) ; HL = CURRENT_WIZ_INVENTORY_POINTER
                                        ; (the wizard's inventory location)
  LD (HL),A               ; Save the mystery number to the inventory
  INC HL                  ; Move to the next inventory slot
  LD (HL),$01             ; Set the first spell to disbelieve.
  INC HL                  ; Move to the next inventory slot
  LD (CURRENT_WIZ_INVENTORY_POINTER),HL ; Save HL to
                                        ; CURRENT_WIZ_INVENTORY_POINTER (the
                                        ; current inventory location)
  LD HL,MAYBE_AI_TABLE
  LD (VAR_CD86),HL
  LD A,(WIZARD_SPELL_COUNT) ; Going to loop the number of times set in
  LD B,A                    ; WIZARD_SPELL_COUNT.
MAIN_LOOP_15_ASSIGN_SPELLS:
  PUSH BC
MAIN_LOOP_16_ASSIGN_SPELL:
  LD A,R                  ; A = random data from the start of memory?
  AND $07                 ;
  LD H,A                  ;
  LD A,R                  ;
  LD L,A                  ;
  LD A,(HL)               ;
  LD HL,(VAR_CD86)        ; TODO Why are we adding data from VAR_CD86 to A?
  ADD A,(HL)              ;
  AND $3F                 ; Max spell ID is $3F (Raise Dead)
  CP $02                         ; If the spell ID is less than 2 (i.e. if it's
  JP M,MAIN_LOOP_16_ASSIGN_SPELL ; disbelieve) or if it's $42 or more jump back
  CP $42                         ; to MAIN_LOOP_16_ASSIGN_SPELL and pick
  JP P,MAIN_LOOP_16_ASSIGN_SPELL ; another one.
  INC HL
  LD (VAR_CD86),HL
  LD (CURRENT_SPELL_ID),A ; Save the spell ID to CURRENT_SPELL_ID
  CALL GET_SPELL_INFO     ; Get the spell info
  LD A,(IX+$04)           ; A = the new spell ID? TODO Doesn't seem to be the
                          ; spell ID, it's the number between each spell ID
  LD HL,(CURRENT_WIZ_INVENTORY_POINTER) ; HL = CURRENT_WIZ_INVENTORY_POINTER
                                        ; (the current inventory location)
  LD (HL),A               ; Save the spell ID to the inventory
  INC HL
  LD A,(CURRENT_SPELL_ID) ; Load the current spell ID into A.
  LD (HL),A
  INC HL
  LD (CURRENT_WIZ_INVENTORY_POINTER),HL
  POP BC
  DJNZ MAIN_LOOP_15_ASSIGN_SPELLS
  LD A,(WIZ_IS_COMP_CONTROLLED) ; If the current wizard is player controlled
  OR A                          ; jump to MAIN_LOOP_20.
  JR Z,MAIN_LOOP_20             ;
  CALL GET_CURRENT_WIZ_INVENTORY_LOCATION
  LD HL,(CURRENT_WIZ_INVENTORY_POINTER)
  DEC HL
  LD B,$13
MAIN_LOOP_17:
  PUSH BC
  PUSH HL
  LD B,$13
MAIN_LOOP_18:
  PUSH BC
  LD E,(HL)
  INC HL
  LD D,(HL)
  INC HL
  LD C,(HL)
  INC HL
  LD B,(HL)
  DEC HL
  LD A,C
  CP E
  JR Z,MAIN_LOOP_19
  JR C,MAIN_LOOP_19
  INC HL
  LD (HL),D
  DEC HL
  LD (HL),E
  DEC HL
  LD (HL),B
  DEC HL
  LD (HL),C
  INC HL
  INC HL
MAIN_LOOP_19:
  POP BC
  DJNZ MAIN_LOOP_18
  POP HL
  POP BC
  DJNZ MAIN_LOOP_17
MAIN_LOOP_20:
  LD A,(CURRENT_WIZARD_ID)
  INC A
  LD (CURRENT_WIZARD_ID),A
  POP BC
  DEC B
  JP NZ,MAIN_LOOP_1
  LD A,(NUM_OF_WIZARDS)
  DEC A
  DEC A
  SLA A
  SLA A
  SLA A
  LD HL,VAR_909F_MAYBE_TABLE
  LD D,$00
  LD E,A
  ADD HL,DE
  LD (CURRENT_WIZ_GRAPHICS_POINTER),HL
  LD A,$00
  LD (CURRENT_WIZARD_ID),A
  LD A,(NUM_OF_WIZARDS)
  LD B,A
MAIN_LOOP_21:
  LD HL,(CURRENT_WIZ_GRAPHICS_POINTER)
  LD A,(HL)
  INC HL
  LD (CURRENT_WIZ_GRAPHICS_POINTER),HL
  LD HL,ARENA_STATE_1
  LD D,$00
  LD E,A
  ADD HL,DE
  LD A,(CURRENT_WIZARD_ID)
  ADD A,$29
  LD (HL),A
  LD DE,$01E1
  ADD HL,DE
  LD A,(CURRENT_WIZARD_ID)
  LD (HL),A
  INC A
  LD (CURRENT_WIZARD_ID),A
  DJNZ MAIN_LOOP_21
  LD A,$00                ; Set the round counter to 0.
  LD (ROUND_COUNTER),A    ;
  LD A,(NUM_OF_WIZARDS)   ; Load B with the number of rounds before a draw is
  SLA A                   ; called. Take the number of players from
  ADD A,$0F               ; NUM_OF_WIZARDS, double it using SLA, and add 15.
  LD B,A                  ; e.g. 19 rounds in a game with 2 wizards, and 31 in
                          ; a game with 8 wizards.
MAIN_LOOP_22_SELECT_SPELL_PHASE:
  PUSH BC                 ; Push BC to the stack. B contains the number of
                          ; rounds left until the game is called a draw. This
                          ; is the start of the main game loop.
  CALL PRE_TURN_MENU      ; Display the pre-turn (select spell) menus
  LD A,(DEAD_WIZARD_COUNT)
  INC A
  LD HL,NUM_OF_WIZARDS    ; HL = number of wizards in the game.
  CP (HL)                 ;
  JR Z,MAIN_LOOP_24       ; If A == number of wizards jump to MAIN_LOOP_24.
  CALL SPREAD_BLOB_AND_FIRE ; Spread gooey blob and magic fire
  CALL CHECK_TREES_FOR_NEW_SPELL_0 ; Check magic woods for new wizard spells
  CALL SET_ALL_CREATURES_READY ; Mark all creatures as ready to move.
  CALL WIZARD_TURN        ; Wizard takes a turn.
  CALL ROUTINE_FE56
  LD B,$0A
MAIN_LOOP_23:
  PUSH BC
  CALL ROUTINE_96E6_MAYBE_BRIEF_PAUSE
  POP BC
  DJNZ MAIN_LOOP_23
  CALL ROUTINE_FE60
  LD A,(DEAD_WIZARD_COUNT) ; A = number of dead wizards in the game
  INC A
  LD HL,NUM_OF_WIZARDS    ; HL = address which contains the number of wizards
  CP (HL)                 ; If there's only one wizard left...
MAIN_LOOP_24:
  POP BC                  ; Pop BC from the stack. B contains the number of
                          ; rounds left until the game is called a draw.
  JR Z,MAIN_LOOP_28       ; ...jump to MAIN_LOOP_28
  LD HL,ROUND_COUNTER     ; Increment the round counter.
  INC (HL)                ;
  DJNZ MAIN_LOOP_22_SELECT_SPELL_PHASE ; Decrease B and jump back to
                                       ; MAIN_LOOP_22_SELECT_SPELL_PHASE if
                                       ; it's greater than 0 (i.e. if there are
                                       ; still rounds left).
  CALL CLEAR_SCREEN       ; Clear the screen.
  LD A,$01                ; Set the colours to blue on black ($01).
  LD ($5C8F),A            ;
MAIN_LOOP_25:
  CALL CHECK_TREES_FOR_NEW_SPELL
  CALL DRAW_BORDER
  CALL CHECK_TREES_FOR_NEW_SPELL
  LD BC,$0202
  LD A,$10
  CALL PRINT_MESSAGE_1
  LD HL,WIZARD_STATUS_VALUES
  LD BC,$030A
  LD (VAR_89AC),BC
  LD A,$29
  LD (CURRENT_WIZARD_ID),A
  LD A,(NUM_OF_WIZARDS)
  LD B,A
MAIN_LOOP_26:
  PUSH BC
  PUSH HL
  BIT 4,(HL)
  JR NZ,MAIN_LOOP_27
  CALL CHECK_TREES_FOR_NEW_SPELL
  LD HL,CURRENT_WIZARD_ID
  LD A,(HL)
  LD BC,(VAR_89AC)
  INC B
  INC B
  LD (VAR_89AC),BC
  CALL PRINT_MESSAGE_2
MAIN_LOOP_27:
  POP HL
  INC HL
  LD A,(CURRENT_WIZARD_ID)
  INC A
  LD (CURRENT_WIZARD_ID),A
  POP BC
  DJNZ MAIN_LOOP_26
  CALL CHECK_TREES_FOR_NEW_SPELL
  LD A,$3D                ; Print the message with ID $3D (PRESS ANY KEY) at
  LD BC,$1600             ; screen position $1600.
  CALL PRINT_MESSAGE_2    ;
  CALL ROUTINE_96E6_MAYBE_BRIEF_PAUSE
  CALL $028E              ; Keyboard scanning ROM subroutine.
  LD A,E
  INC A
  JR Z,MAIN_LOOP_25
  RET
MAIN_LOOP_28:
  CALL CLEAR_SCREEN       ; Clear the screen.
  LD A,$01                ; Set the colours to blue on black ($01).
  LD ($5C8F),A            ;
MAIN_LOOP_29:
  CALL CHECK_TREES_FOR_NEW_SPELL
  CALL DRAW_BORDER
  CALL CHECK_TREES_FOR_NEW_SPELL
  LD BC,$0409
  LD A,$11
  CALL PRINT_MESSAGE_1
  CALL CHECK_TREES_FOR_NEW_SPELL
  LD A,$12
  LD BC,$0808
  CALL PRINT_MESSAGE_1
  LD A,$13
  LD BC,$0A08
  CALL PRINT_MESSAGE_1
  LD A,$13
  LD BC,$0C08
  CALL PRINT_MESSAGE_1
  LD A,$13
  LD BC,$0E08
  CALL PRINT_MESSAGE_1
  LD A,$12
  LD BC,$1008
  CALL PRINT_MESSAGE_1
  CALL CHECK_TREES_FOR_NEW_SPELL
  LD HL,WIZARD_STATUS_VALUES
  LD B,$08
MAIN_LOOP_30:
  BIT 4,(HL)
  JR Z,MAIN_LOOP_31
  INC HL
  DJNZ MAIN_LOOP_30
MAIN_LOOP_31:
  LD A,$31
  SUB B
  PUSH AF
  LD BC,$0C0A
  LD H,$00
  LD L,A
  ADD HL,HL
  ADD HL,HL
  LD DE,TABLE_TEXT_MESSAGES_2
  ADD HL,DE
  INC HL
  INC HL
  LD A,(HL)
  SRA A
  LD E,A
  LD A,$10
  SUB E
  LD C,A
  POP AF
  CALL PRINT_MESSAGE_2
  CALL CHECK_TREES_FOR_NEW_SPELL
  LD A,$3D                ; Print the message with ID $3D (PRESS ANY KEY) at
  LD BC,$1600             ; screen position $1600.
  CALL PRINT_MESSAGE_2    ;
  CALL ROUTINE_96E6_MAYBE_BRIEF_PAUSE
  CALL $028E              ; Keyboard scanning ROM subroutine.
  LD A,E
  INC E
  JR Z,MAIN_LOOP_29
  RET

; Go through the magic trees and check if any wizards hiding in them get a new
; spell.
;
; Used by the routine at MAIN_LOOP.
CHECK_TREES_FOR_NEW_SPELL:
  LD A,($5C8F)
  INC A
  LD ($5C8F),A
  CP $08
  RET NZ
  LD A,$01                ; Set the colours to blue on black ($01).
  LD ($5C8F),A            ;
; This entry point is used by the routine at MAIN_LOOP.
CHECK_TREES_FOR_NEW_SPELL_0:
  LD HL,ARENA_STATE_1     ; Set the cursor location to the top left corner.
  LD (LOCATION_TARGET),HL ;
  LD B,$9F                ; Going to check all 150 cells. Load B with 159, as
                          ; that's how often we'll increase HL. (There are 10
                          ; "blank cell" memory locations that are not used.)
CHECK_TREES_FOR_NEW_SPELL_1:
  PUSH BC
  LD A,(HL)                         ; Does the cell contain a magic tree? If
  CP $24                            ; not, jump to CHECK_TREES_FOR_NEW_SPELL_6.
  JP NZ,CHECK_TREES_FOR_NEW_SPELL_6 ;
  LD DE,$0281             ; Adding $0281 to HL so that it's pointing to the
  ADD HL,DE               ; corresponding location in table 5 (ARENA_STATE_5).
  LD A,(HL)               ; Load the entry from table 5 into A.
  OR A                             ; If there's nothing in the corresponding
  JP Z,CHECK_TREES_FOR_NEW_SPELL_6 ; entry in table 5 (TODO: what would be in
                                   ; there? The wizard ID?), jump to
                                   ; CHECK_TREES_FOR_NEW_SPELL_6.
  LD (VAR_A172),A
  CALL MAYBE_RANDOM_NUM_GENERATOR
  CP $04                           ; If the player didn't get a new spell, jump
  JP P,CHECK_TREES_FOR_NEW_SPELL_6 ; to CHECK_TREES_FOR_NEW_SPELL_6.
  LD A,(VAR_A172)         ; The player gets a new spell.
  SUB $29
  LD (CURRENT_WIZARD_ID),A
  LD A,$46                ; Set the colours to yellow on black ($46).
  LD ($5C8F),A            ;
  LD A,$0F                ; Print the message with ID $0F (NEW SPELL FOR) at
  LD BC,$1600             ; screen position $1600.
  CALL PRINT_MESSAGE_1    ;
  INC C
  LD A,(VAR_A172)         ; Print the player's name.
  CALL PRINT_MESSAGE_2    ;
  LD HL,VAR_903E_MAYBE_TABLE
  CALL SOUND_EFFECT_0
  EI
  LD B,$0A
CHECK_TREES_FOR_NEW_SPELL_2:
  CALL ROUTINE_96E6_MAYBE_BRIEF_PAUSE
  DJNZ CHECK_TREES_FOR_NEW_SPELL_2
  CALL CLEAR_MESSAGE_BAR  ; Clear the message bar.
CHECK_TREES_FOR_NEW_SPELL_3:
  CALL MAYBE_RANDOM_NUM_GENERATOR
  LD A,(RANDOM_NUM_RESULT)
  CP $02
  JP M,CHECK_TREES_FOR_NEW_SPELL_3
  CP $41
  JP P,CHECK_TREES_FOR_NEW_SPELL_3
  LD (CURRENT_SPELL_ID),A
  CALL GET_CURRENT_WIZ_INVENTORY_LOCATION
  LD HL,(CURRENT_WIZ_INVENTORY_POINTER)
  INC HL
  INC HL
  LD B,$13
CHECK_TREES_FOR_NEW_SPELL_4:
  LD A,(HL)
  OR A
  JR Z,CHECK_TREES_FOR_NEW_SPELL_5
  INC HL
  INC HL
  DJNZ CHECK_TREES_FOR_NEW_SPELL_4
CHECK_TREES_FOR_NEW_SPELL_5:
  LD A,(CURRENT_SPELL_ID)
  LD (HL),A
  LD A,(VAR_A172)
  LD HL,(LOCATION_TARGET)
  LD (HL),A
  LD DE,$0281
  ADD HL,DE
  LD (HL),$00
  LD HL,(LOCATION_TARGET)
  LD DE,$01E1
  ADD HL,DE
  LD A,(VAR_A172)
  SUB $29
  LD (HL),A
  CALL MAYBE_MARK_ARENA_SQUARES_0
  HALT
CHECK_TREES_FOR_NEW_SPELL_6:
  POP BC
  LD HL,(LOCATION_TARGET)
  INC HL
  LD (LOCATION_TARGET),HL
  DEC B
  JP NZ,CHECK_TREES_FOR_NEW_SPELL_1
  RET

; Data block at 903E
VAR_903E_MAYBE_TABLE:
  DEFB $14,$06,$02,$07,$14,$03,$FB,$14
  DEFB $00,$00,$00

; Variable - maybe computer wizard strength?
VAR_9049_MAYBE_COMP_WIZ_STRENGTH:
  DEFB $00

; Variable - wizard spell count
WIZARD_SPELL_COUNT:
  DEFB $0F

; Random number generator?
;
; Used by the routines at ROUTINE_859C, MAIN_LOOP, CHECK_TREES_FOR_NEW_SPELL
; and COMP_WIZ_CASTS_SPELL.
MAYBE_RANDOM_NUM_GENERATOR:
  PUSH HL
MAYBE_RANDOM_NUM_GENERATOR_0:
  LD A,R
  LD HL,$5C76             ; HL = mem address of $5C76 (the seed for RND)
  ADD A,(HL)              ; A = A + seed for RND
  OR $80
  LD B,A
MAYBE_RANDOM_NUM_GENERATOR_1:
  PUSH BC
  LD B,$0F
MAYBE_RANDOM_NUM_GENERATOR_2:
  NOP
  DJNZ MAYBE_RANDOM_NUM_GENERATOR_2
  POP BC
  DJNZ MAYBE_RANDOM_NUM_GENERATOR_1
  LD A,R
  AND $07
  LD H,A
  LD A,R
  LD L,A
  LD A,R
  ADD A,(HL)
  ADD A,(HL)
  LD HL,$5C76             ; HL = mem address of $5C76 (the seed for RND)
  ADD A,(HL)              ; A = A + seed for RND
  LD (RANDOM_NUM_RESULT),A ; Store the value in A to RANDOM_NUM_RESULT.
  AND $0F
  CP $0A
  JP P,MAYBE_RANDOM_NUM_GENERATOR_0
  POP HL
  RET

; Variable - random number result
;
; After a random number is generated in MAYBE_RANDOM_NUM_GENERATOR the result
; is stored in here.
RANDOM_NUM_RESULT:
  DEFB $24

; Routine at 907B. Unknown purpose - seems to write something into memory with
; every keypress during setup.
;
; Used by the routines at KEYS_INPUT_NUMBERS and MAIN_LOOP.
UNKNOWN_SETUP_ROUTINE_907B:
  PUSH HL
  PUSH DE
  PUSH BC
UNKNOWN_SETUP_ROUTINE_907B_0:
  PUSH BC
  CALL $028E              ; Keyboard scanning ROM subroutine.
  POP BC
  INC C
  LD A,E
  INC A
  JR NZ,UNKNOWN_SETUP_ROUTINE_907B_0
  LD HL,(VAR_CD86)
  LD (HL),C
  SLA C
  INC HL
  LD (HL),C
  LD A,R
  INC HL
  LD (HL),A
  RLCA
  INC HL
  LD (HL),A
  INC HL
  LD (VAR_CD86),HL
  POP BC
  POP DE
  POP HL
  RET

; Data block at 909F
VAR_909F_MAYBE_TABLE:
  DEFB $41,$4D,$00,$00,$00,$00,$00,$00
  DEFB $17,$81,$8D,$00,$00,$00,$00,$00
  DEFB $11,$1D,$81,$8D,$00,$00,$00,$00
  DEFB $07,$30,$3E,$93,$9B,$00,$00,$00
  DEFB $07,$10,$1E,$80,$97,$8E,$00,$00
  DEFB $07,$11,$1D,$60,$6E,$94,$9A,$00
  DEFB $00,$07,$0E,$40,$4E,$90,$97,$9E

; Data block at 90D7
VAR_90D7_MAYBE_TABLE:
  DEFB $42,$43,$44,$45,$06,$46,$07,$47

; Variable - wizard image picked
WIZARD_CHARACTER_PICK:
  DEFB $01

; Data block at 90E0
VAR_90E0_MAYBE_TABLE:
  DEFB $34,$FD,$54,$FD,$74,$FD,$94,$FD
  DEFB $B4,$FD,$D4,$FD,$F4,$FD,$14,$FE

; Draw picked character during setup
;
; Used by the routine at MAIN_LOOP.
DRAW_PICKED_CHARACTER:
  LD A,(WIZARD_CHARACTER_PICK)
  LD HL,VAR_90E0_MAYBE_TABLE
  LD D,$00
  SLA A
  LD E,A
  ADD HL,DE
  LD C,(HL)
  INC HL
  LD B,(HL)
  LD (VAR_DF4A),BC
  LD HL,(VAR_89AC)
  LD (VAR_DF4C),HL
  CALL MAYBE_ANIMATION
  RET

; Data block at 910D
VAR_910D_MAYBE_TABLE:
  DEFB $04,$03,$0A,$0A,$28,$46,$02,$02
  DEFB $46,$28,$06,$0C,$00,$14,$28,$3C
  DEFB $02,$06,$0C,$28,$0C,$04,$0A,$0A
  DEFB $28,$07,$02,$02,$46,$1E,$01,$01
  DEFB $01,$02,$03,$02,$00,$00,$00,$00

; Data block at 9135
VAR_9135_MAYBE_TABLE:
  DEFB $0A,$05,$01,$05,$1E,$08,$03,$07
  DEFB $FD,$F6,$14,$03,$28,$28,$46,$64

; Data block at 9145
  DEFB $02,$03,$3C,$64,$14,$03,$01,$02
  DEFB $03,$04,$01,$01,$01,$01

; Current spell casting chance. 0 is 10%, and 9 is 100%. See the second column
; of the table at TABLE_SPELLS for more info.
CURRENT_SPELL_CASTING_CHANCE:
  DEFB $08

; Variable - memory location of the current wizard's spell inventory. Or, when
; the computer wizard is choosing a spell, pointer to the current spell.
;
; It will point at one of the memory locations starting at
; TABLE_WIZARD_SPELL_INVENTORIES.
CURRENT_WIZ_INVENTORY_POINTER:
  DEFB $76,$7F

; Variables - all chosen player spells.
;
; Stores the IDs of the chosen spells, as specified in the table at
; TABLE_SPELLS. These values are all cleared to zeroes at the start of
; PRE_TURN_MENU.
;
; Note that computer controlled players don't have assigned spells in here.
; Their memory locations stay at 0 after the spell choice round.
SPELLS_CHOSEN:
  DEFB $1B,$00,$00,$00,$00,$00,$00,$00

; Variables - whether the spells chosen by each player are illusions.
;
; Flags indicating whether each spell is an illusion (0 if not, 1 if so). These
; values are all cleared to zeroes at the start of PRE_TURN_MENU.
SPELLS_CHOSEN_ILLUSIONS:
  DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Variable - whether the spell currently being cast is an illusion.
;
; 1 if the spell is an illusion, 0 if it's real.
IS_CURRENT_SPELL_ILLUSION:
  DEFB $00

; Flag - spell cast success.
;
; 1 if the spell succeeded, 0 if it failed.
SPELL_SUCCESS_FLAG:
  DEFB $00

; Pre-turn menu: displays the "PRESS KEYS 1 TO 4" menu for each player.
;
; Used by the routine at MAIN_LOOP.
PRE_TURN_MENU:
  LD HL,SPELLS_CHOSEN     ; Clear the spells chosen previously, if any (see
  LD (HL),$00             ; SPELLS_CHOSEN).
  LD DE,$9157             ;
  LD BC,$000F             ;
  LDIR                    ;
  LD HL,GRAPHICS_SELECT_CURSOR
  LD ($5C7B),HL
  LD A,(NUM_OF_WIZARDS)   ; Load the number of wizards into B.
  LD B,A                  ;
  LD A,$00                 ; Set the current wizard ID to 0.
  LD (CURRENT_WIZARD_ID),A ;
  DI
PRE_TURN_MENU_1_LOAD_WIZ:
  PUSH BC
  LD HL,WIZARD_STATUS_VALUES ; Load the address of the wizard status values
                             ; into HL.
  LD A,(CURRENT_WIZARD_ID) ; Set DE to the current wizard ID.
  LD D,$00                 ;
  LD E,A                  ; Set HL to the address containing the current
  ADD HL,DE               ; wizard's status values.
  BIT 4,(HL)                      ; If bit 4 is set (i.e. the wizard is dead)
  JP NZ,PRE_TURN_MENU_11_NEXT_WIZ ; jump to PRE_TURN_MENU_11_NEXT_WIZ (skipping
                                  ; his turn).
  CALL SET_WIZ_IS_COMP_CONTROLLED ; Update the flag which tells whether the
                                  ; current wizard is computer controlled (1 if
                                  ; computer controlled, 0 if not).
  OR A                            ; If the wizard is computer controlled, jump
  JP NZ,PRE_TURN_MENU_11_NEXT_WIZ ; to PRE_TURN_MENU_11_NEXT_WIZ (skipping his
                                  ; turn). The computer wizards don't choose a
                                  ; spell at this point.
; This entry point is used by the routine at DISPLAY_ARENA_READ_ONLY.
PRE_TURN_MENU_2_DISPLAY:
  LD HL,SOUND_EFFECT_MENU_CHIRP
  CALL SOUND_EFFECT_0
  CALL WAIT_FOR_KEYPRESS_2
  CALL CLEAR_SCREEN       ; Clear the screen.
  LD A,$72                ; Draw the border in red on yellow ($72).
  LD ($5C8F),A            ;
  CALL DRAW_BORDER        ;
  LD A,(CHAOS_LAW_LEVEL)  ; Load the chaos/law level into A.
  OR A                    ; If it's neutral, jump to PRE_TURN_MENU_8.
  JR Z,PRE_TURN_MENU_8    ;
  LD BC,$0707             ; Set BC to the location for printing the chaos/law
                          ; info.
  JP M,PRE_TURN_MENU_5_PRINT_CHAOS ; If it's negative (chaotic) jump to
                                   ; PRE_TURN_MENU_5_PRINT_CHAOS.
  LD A,$46                ; Set the colours to yellow on black ($46).
  LD ($5C8F),A            ;
  LD A,$47                ; Print the message with ID $47 ((LAW)).
  CALL PRINT_MESSAGE_2    ;
  LD A,(CHAOS_LAW_LEVEL)
  SRA A
  SRA A
  OR A
  JR Z,PRE_TURN_MENU_4
  LD (VAR_89AC),BC
  LD B,A
PRE_TURN_MENU_3_PRINT_LAW_ICONS:
  PUSH BC
  LD A,$5E
  LD BC,(VAR_89AC)
  CALL PRINT_SINGLE_CHAR
  LD BC,(VAR_89AC)
  INC C
  LD (VAR_89AC),BC
  POP BC
  DJNZ PRE_TURN_MENU_3_PRINT_LAW_ICONS
  LD BC,(VAR_89AC)
PRE_TURN_MENU_4:
  LD A,$29
  CALL PRINT_SINGLE_CHAR
  JR PRE_TURN_MENU_8
PRE_TURN_MENU_5_PRINT_CHAOS:
  LD A,$45                ; Set the colours to cyan on black ($45).
  LD ($5C8F),A            ;
  LD A,$46                ; Print the message with ID $46 ((CHAOS).
  CALL PRINT_MESSAGE_2    ;
  LD A,(CHAOS_LAW_LEVEL)
  LD (VAR_89AC),BC
  NEG
  SRA A
  SRA A
  OR A
  JR Z,PRE_TURN_MENU_7
  LD B,A
PRE_TURN_MENU_6_PRINT_CHAOS_ICONS:
  PUSH BC
  LD A,$2A
  LD BC,(VAR_89AC)
  CALL PRINT_SINGLE_CHAR
  LD BC,(VAR_89AC)
  INC C
  LD (VAR_89AC),BC
  POP BC
  DJNZ PRE_TURN_MENU_6_PRINT_CHAOS_ICONS
  LD BC,(VAR_89AC)
PRE_TURN_MENU_7:
  LD A,$29
  CALL PRINT_SINGLE_CHAR
PRE_TURN_MENU_8:
  LD A,$46                ; Set the colours to yellow on black ($46).
  LD ($5C8F),A            ;
  LD A,(CURRENT_WIZARD_ID) ; Add $29 to the ID of the active wizard
  ADD A,$29                ; (CURRENT_WIZARD_ID) to get the ID of current
                           ; wizard's name in the string table at
                           ; TABLE_TEXT_MESSAGES_2.
  LD BC,$0507             ; Print the current wizard's name at screen location
  CALL PRINT_MESSAGE_2    ; $0507.
  LD A,$45                ; Set the colours to cyan on black ($45).
  LD ($5C8F),A            ;
  LD A,$59                ; Print the message with ID $59 (1.EXAMINE SPELLS) at
  LD BC,$0907             ; screen location $0907.
  CALL PRINT_MESSAGE_2    ;
  LD A,$5A                ; Print the message with ID $5A (2.SELECT SPELL) at
  LD BC,$0B07             ; screen location $0B07.
  CALL PRINT_MESSAGE_2    ;
  LD A,$5B                ; Print the message with ID $5B (3.EXAMINE BOARD) at
  LD BC,$0D07             ; screen location $0D07.
  CALL PRINT_MESSAGE_2    ;
  LD A,$5C                ; Print the message with ID $5C (4.CONTINUE WITH
  LD BC,$0F07             ; GAME) at screen location $0F07.
  CALL PRINT_MESSAGE_2    ;
  LD A,$56                ; Set the colours to yellow on red ($56).
  LD ($5C8F),A            ;
  LD A,$57                ; Print the message with ID $57 (PRESS KEYS 1 TO 4)
  LD BC,$1600             ; at screen location $1600.
  CALL PRINT_MESSAGE_2    ;
  CALL GET_CURRENT_WIZ_INVENTORY_LOCATION
PRE_TURN_MENU_9:
  CALL $02BF              ; Keyboard ROM subroutine.
  LD HL,IS_USER_SELECTING_SPELL ; Reset the "is user selecting a spell" flag to
  LD (HL),$00                   ; 0.
  CP $31                  ; If the user pressed anything other than 1, jump to
  JR NZ,PRE_TURN_MENU_10  ; PRE_TURN_MENU_10.
  CALL SPELL_MENU         ; The user pressed 1. Display the spell menu, and
                          ; we'll be viewing spell info.
  JP PRE_TURN_MENU_2_DISPLAY ; Back to displaying the 1-4 option menu.
PRE_TURN_MENU_10:
  CP $34                         ; If the user pressed 4, jump to
  JR Z,PRE_TURN_MENU_11_NEXT_WIZ ; PRE_TURN_MENU_11_NEXT_WIZ.
  CP $33                       ; If the user pressed 3, display the arena.
  JR Z,DISPLAY_ARENA_READ_ONLY ;
  CP $32                  ; If the user pressed anything other than 2, jump
  JR NZ,PRE_TURN_MENU_9   ; back to PRE_TURN_MENU_9.
  LD A,$01                       ; The user pressed 2. Set the "is user
  LD (IS_USER_SELECTING_SPELL),A ; selecting a spell" flag to 1 (true).
  CALL SPELL_MENU         ; Display the spell menu, and we'll be selecting a
                          ; spell.
  JP PRE_TURN_MENU_2_DISPLAY ; Back to displaying the 1-4 option menu.
PRE_TURN_MENU_11_NEXT_WIZ:
  POP BC
  LD HL,CURRENT_WIZARD_ID ; Next wizard's turn - increase the current wizard ID
  INC (HL)                ; variable by 1.
  DEC B                   ; If there's another wizard, jump back to
                          ; PRE_TURN_MENU_1_LOAD_WIZ.
  JP NZ,PRE_TURN_MENU_1_LOAD_WIZ
  JP CAST_SPELLS

; Get current wizard's spell inventory location.
;
; Saves the result in CURRENT_WIZ_INVENTORY_POINTER. It will point at one of
; the memory locations starting at TABLE_WIZARD_SPELL_INVENTORIES.
;
; Used by the routines at MAIN_LOOP, CHECK_TREES_FOR_NEW_SPELL, PRE_TURN_MENU,
;      CAST_SPELLS and COMP_WIZ_CASTS_SPELL.
GET_CURRENT_WIZ_INVENTORY_LOCATION:
  LD HL,TABLE_WIZARD_SPELL_INVENTORIES ; Load the location of the first spell
                                       ; inventory table into HL.
  LD A,(CURRENT_WIZARD_ID) ; Set DE to the current wizard ID. (Player 1 has
  LD D,$00                 ; index 0.)
  LD E,A                   ;
  LD B,$28                                  ; There are 40 bytes between each
  XOR A                                     ; wizard's inventory, so find the
GET_CURRENT_WIZ_INVENTORY_LOCATION_0:
  ADD HL,DE                                 ; address to return by adding the
  DJNZ GET_CURRENT_WIZ_INVENTORY_LOCATION_0 ; player's ID onto the value in HL
                                            ; 40 times.
  INC HL                  ; Increment HL so that it's pointing at the ID of the
                          ; first spell.
  LD (CURRENT_WIZ_INVENTORY_POINTER),HL ; Save the ID of the first spell in the
                                        ; wizard's inventory to
                                        ; CURRENT_WIZ_INVENTORY_POINTER.
  RET

; Display the arena between turns.
;
; Used by the routine at PRE_TURN_MENU.
DISPLAY_ARENA_READ_ONLY:
  CALL CLEAR_SCREEN       ; Clear the screen.
  CALL ROUTINE_FE56
  LD A,$00
  LD ($5C8D),A
  LD A,$FF
  LD ($5C8E),A
  CALL MAYBE_MARK_ARENA_SQUARES_0
  EI
  HALT
  LD A,$03
  LD ($5C91),A
  CALL WAIT_FOR_KEYPRESS_2
DISPLAY_ARENA_READ_ONLY_0:
  CALL KEY_INPUT          ; User key input.
  CALL $02BF              ; Keyboard ROM subroutine.
  CP $30                         ; If the user pressed Space jump to
  JR Z,DISPLAY_ARENA_READ_ONLY_1 ; DISPLAY_ARENA_READ_ONLY_1.
  CP $49                       ; If the user pressed I jump to
  CALL Z,DISPLAY_CREATURE_INFO ; DISPLAY_CREATURE_INFO
  JR DISPLAY_ARENA_READ_ONLY_0 ; Else jump back to DISPLAY_ARENA_READ_ONLY_0.
DISPLAY_ARENA_READ_ONLY_1:
  DI
  LD HL,GRAPHICS_SELECT_CURSOR
  LD ($5C7B),HL
  CALL CLEAR_SCREEN       ; Clear the screen.
  JP PRE_TURN_MENU_2_DISPLAY

; Get spell info.
;
; Used by the routines at MAIN_LOOP, SPELL_MENU, DISPLAY_SPELL_INFO,
; CAST_SPELLS and COMP_WIZ_CASTS_SPELL.
GET_SPELL_INFO:
  LD A,(CURRENT_SPELL_ID) ; Load the current spell ID into A.
  LD IX,TABLE_SPELLS      ; Load the spell table at TABLE_SPELLS into the index
                          ; register.
  LD D,$00                ; Set DE to the be the row at which the spell table
  DEC A                   ; contains the current spell ID.
  LD E,A                  ;
  LD B,$07                ; There are 7 bytes for each entry in the spells
GET_SPELL_INFO_0:
  ADD IX,DE               ; table. Keep adding 7 to the index register until it
  DJNZ GET_SPELL_INFO_0   ; points at the memory location of the spell we're
                          ; looking for.
  LD (SPELL_TABLE_POINTER),IX ; Save the memory location to
                              ; SPELL_TABLE_POINTER.
  LD A,(IX+$03)
  LD (CURRENT_SPELL_CHAOS_LAW_VALUE),A
  LD A,(CHAOS_LAW_LEVEL)
  OR A
  JR NZ,GET_SPELL_INFO_2
GET_SPELL_INFO_1:
  LD HL,(SPELL_TABLE_POINTER)
  INC HL
  LD A,(HL)
  LD (CURRENT_SPELL_CASTING_CHANCE),A
  JR GET_SPELL_INFO_4
GET_SPELL_INFO_2:
  JP M,GET_SPELL_INFO_3
  LD E,A
  LD A,(CURRENT_SPELL_CHAOS_LAW_VALUE)
  OR A
  JR Z,GET_SPELL_INFO_1
  JP M,GET_SPELL_INFO_1
  LD A,(IX+$01)
  SRL E
  SRL E
  ADD A,E
  LD (CURRENT_SPELL_CASTING_CHANCE),A
  JR GET_SPELL_INFO_4
GET_SPELL_INFO_3:
  NEG
  LD E,A
  LD A,(CURRENT_SPELL_CHAOS_LAW_VALUE)
  OR A
  JP P,GET_SPELL_INFO_1
  LD A,(IX+$01)
  SRL E
  SRL E
  ADD A,E
  LD (CURRENT_SPELL_CASTING_CHANCE),A
GET_SPELL_INFO_4:
  LD A,(CURRENT_WIZARD_ID)
  ADD A,$29
  LD D,A
  LD E,$15                ; A = the creature's chaos/law value.
  CALL GET_CREATURE_DATA  ;
  LD HL,CURRENT_SPELL_CASTING_CHANCE
  ADD A,(HL)
  LD (CURRENT_SPELL_CASTING_CHANCE),A
  LD A,(CURRENT_SPELL_CASTING_CHANCE)
  OR A
  CP $0A
  JP M,GET_SPELL_INFO_5
  LD A,$09
GET_SPELL_INFO_5:
  CP $00
  JP P,GET_SPELL_INFO_6
  LD A,$00
GET_SPELL_INFO_6:
  LD (CURRENT_SPELL_CASTING_CHANCE),A
  RET

; Variable - current spell being cast
CURRENT_SPELL_ID:
  DEFB $22                ; ID of the spell currently being cast, as defined in
                          ; the spells table at TABLE_SPELLS.

; Variable - as spells are written to the screen this increases, holding the
; offset from the start at which we start printing text.
SPELL_MENU_TEXT_OFFSET:
  DEFB $00

; Variable - how many characters in from the left to start writing text when
; display the spell menu.
;
; Either 2 or 16, depending on whether text is to be written to the 1st or 2nd
; column.
SPELL_MENU_TEXT_INDENT:
  DEFB $0A

; Variable - holds the ASCII code for the next char to print in alphabetical
; order
;
; Initially $40 (A), and increments with each spell printed. e.g. A-Disbelieve,
; B-Zombie
SPELL_MENU_NEXT_CHAR:
  DEFB $49

; Variable - holds whether the current spell is lawful (positive), neutral (0)
; or chaotic (negative)
CURRENT_SPELL_CHAOS_LAW_VALUE:
  DEFB $FF

; Pointer - memory location of the current spell
SPELL_TABLE_POINTER:
  DEFB $47,$7E

; Variable - used when displaying spells in the spell menu routine
; (SPELL_MENU). That routine loops through the spells in a wizard's inventory,
; listing them. This points to the memory location of the spell it's currently
; listing.
SPELL_INVENTORY_POINTER:
  DEFB $70,$7F

; Variable - holds whether the user wants to view details about a spell (0) or
; is selecting a spell (1).
IS_USER_SELECTING_SPELL:
  DEFB $00

; Spell menu
;
; Displays the list of spells available to a wizard. Used both when selecting a
; spell, and when viewing the spell's information page. The behaviour is
; determined by IS_USER_SELECTING_SPELL, which would have been set to the
; appropriate value earlier.
;
; Used by the routine at PRE_TURN_MENU.
SPELL_MENU:
  LD HL,SOUND_EFFECT_MENU_CHIRP ; Select menu chirp sound effect
  CALL SOUND_EFFECT_0     ; Play sound effect
  CALL CLEAR_SCREEN       ; Clear the screen.
  LD A,$46                ; Set the colours to yellow on black ($46).
  LD ($5C8F),A            ;
  LD A,(CURRENT_WIZARD_ID) ; Add $29 to the ID of the active wizard
  ADD A,$29                ; (CURRENT_WIZARD_ID) to get the ID of current
                           ; wizard's name in the string table at
                           ; TABLE_TEXT_MESSAGES_2.
  LD BC,$0000             ; Print the current wizard's name at screen location
  CALL PRINT_MESSAGE_2    ; $0000.
  LD A,$53                ; Print the message with ID $53('S SPELLS).
  CALL PRINT_MESSAGE_2    ;
  LD B,$14                ; Looping max of 20 times
  LD A,$40
  LD (SPELL_MENU_NEXT_CHAR),A
  LD HL,$0010                    ; Set text writing position to 16 initially.
  LD (SPELL_MENU_TEXT_OFFSET),HL ;
  LD HL,(CURRENT_WIZ_INVENTORY_POINTER) ; Point SPELL_INVENTORY_POINTER to the
  LD (SPELL_INVENTORY_POINTER),HL       ; current wizard's spell inventory.
SPELL_MENU_1:
  PUSH BC
  LD HL,(SPELL_INVENTORY_POINTER) ; A = ID of a spell in the wizard's inventory
  LD A,(HL)                       ;
  OR A                         ; If A == 0 jump to SPELL_MENU_6_NEXT_SPELL.
  JR Z,SPELL_MENU_6_NEXT_SPELL ;
  LD A,(SPELL_MENU_TEXT_OFFSET) ; Going to figure out the screen column to
                                ; write the next spell text. A = last position.
  LD C,A                  ; A = 16 - A.
  LD A,$10                ;
  SUB C                   ;
  LD (SPELL_MENU_TEXT_OFFSET),A ; Save result to SPELL_MENU_TEXT_OFFSET
  OR A                    ; If it wasn't 0 jump to SPELL_MENU_2.
  JR NZ,SPELL_MENU_2      ;
  LD A,(SPELL_MENU_TEXT_INDENT) ; The text indent is currently 0, so bump it up
  ADD A,$02                     ; to 2.
  LD (SPELL_MENU_TEXT_INDENT),A ;
SPELL_MENU_2:
  LD HL,(SPELL_INVENTORY_POINTER)
  LD A,(HL)
  LD (CURRENT_SPELL_ID),A ; Set CURRENT_SPELL_ID (current spell ID) to value in
                          ; A
  CALL GET_SPELL_INFO     ; Get the info about the spell.
  LD A,(CURRENT_SPELL_CASTING_CHANCE) ; Set A to the spell casting chance.
  INC A                   ; Convert A to the appropriate casting chance colour
  SRL A                   ; by adding 1, doubling it, and adding $42 to get the
  ADD A,$42               ; corresponding paper and ink colours.
  LD ($5C8F),A            ; Set the colours we calculated.
  LD A,(SPELL_MENU_NEXT_CHAR) ; Set the alphabetical character we're going to
  INC A                       ; print next, saving it to SPELL_MENU_NEXT_CHAR.
  LD (SPELL_MENU_NEXT_CHAR),A ;
  LD BC,(SPELL_MENU_TEXT_OFFSET) ; Print the single character.
  PUSH BC                        ;
  CALL PRINT_SINGLE_CHAR         ;
  POP BC                         ;
  INC C                   ; Move print location one space right.
  LD A,(CURRENT_SPELL_CHAOS_LAW_VALUE) ; Load the current spell's chaos/law
                                       ; value into A.
  OR A                                   ; If it isn't zero (i.e. it's chaos or
  JR NZ,SPELL_MENU_3_PICK_CHAOS_LAW_ICON ; law), jump to
                                         ; SPELL_MENU_3_PICK_CHAOS_LAW_ICON.
  LD A,$2D                ; Set A to $2D, indicating a dash.
  JR SPELL_MENU_5_PRINT_SPELL ; Jump to SPELL_MENU_5_PRINT_SPELL.
SPELL_MENU_3_PICK_CHAOS_LAW_ICON:
  JP P,SPELL_MENU_4_SET_LAW_ICON ; If it's positive (i.e. law) jump to
                                 ; SPELL_MENU_4_SET_LAW_ICON.
  LD A,$2A                ; Set A to $2D, indicating an asterisk (chaos).
  JR SPELL_MENU_5_PRINT_SPELL ; Jump to SPELL_MENU_5_PRINT_SPELL.
SPELL_MENU_4_SET_LAW_ICON:
  LD A,$5E                ; Set A to $5E, indicating the law icon.
SPELL_MENU_5_PRINT_SPELL:
  PUSH BC                 ; Print the appropriate icon.
  CALL PRINT_SINGLE_CHAR  ;
  POP BC                  ;
  INC C                   ; Move print location one space right.
  LD HL,(SPELL_TABLE_POINTER) ; Load the ID of the spell into A.
  LD A,(HL)                   ;
  CALL PRINT_MESSAGE_2    ; Print the spell name.
SPELL_MENU_6_NEXT_SPELL:
  LD HL,(SPELL_INVENTORY_POINTER) ; Repoint SPELL_INVENTORY_POINTER to the
  INC HL                          ; memory location two spaces along (every
  INC HL                          ; second memory location is one of the spell
  LD (SPELL_INVENTORY_POINTER),HL ; IDs.)
  POP BC
  DJNZ SPELL_MENU_1       ; If there are still spells to display, jump back to
                          ; SPELL_MENU_1.
  LD BC,$1600
  LD A,$46                ; Set the colours to yellow on black ($46).
  LD ($5C8F),A            ;
  LD A,$58                ; Print the message with ID $58 (PRESS '0' TO RETURN
  CALL PRINT_MESSAGE_2    ; TO MAIN MENU) at screen position $1600.
  CALL WAIT_FOR_KEYPRESS_2
SPELL_MENU_7_WAIT_FOR_KEY:
  CALL $02BF              ; Keyboard ROM subroutine.
  CP $30                         ; If the user pressed 0, return.
  JR NZ,SPELL_MENU_8_KEY_PRESSED ;
  RET                            ;
SPELL_MENU_8_KEY_PRESSED:
  LD HL,SPELL_MENU_NEXT_CHAR ; HL = SPELL_MENU_NEXT_CHAR, the address
                             ; containing the code of the next char we would
                             ; have printed when listing the spells
  DEC A                          ; If the key pressed is higher than any listed
  CP (HL)                        ; jump back to SPELL_MENU_7_WAIT_FOR_KEY.
  JP P,SPELL_MENU_7_WAIT_FOR_KEY ;
  SUB $3F                        ; If the key pressed is lower than the A key
  JP M,SPELL_MENU_7_WAIT_FOR_KEY ; jump back to SPELL_MENU_7_WAIT_FOR_KEY.
  LD B,A
  LD HL,(CURRENT_WIZ_INVENTORY_POINTER) ; HL = address pointed to by
                                        ; CURRENT_WIZ_INVENTORY_POINTER (first
                                        ; item in the current wizard's
                                        ; inventory)
  LD DE,$0002
  AND A                   ; AND A just to reset the carry flag
  SBC HL,DE               ; HL = HL - DE.
SPELL_MENU_9_SPELL_SELECTED:
  ADD HL,DE
  LD A,(HL)
  OR A
  JR Z,SPELL_MENU_9_SPELL_SELECTED
  DJNZ SPELL_MENU_9_SPELL_SELECTED
  LD (CURRENT_SPELL_ID),A ; Save the selected spell ID at CURRENT_SPELL_ID.
  LD A,(IS_USER_SELECTING_SPELL)   ; If the user is selecting a spell, jump
  OR A                             ; ahead to SPELL_MENU_10_RECORD_SPELL.
  JR NZ,SPELL_MENU_10_RECORD_SPELL ;
  CALL DISPLAY_SPELL_INFO ; Otherwise, call DISPLAY_SPELL_INFO and display the
                          ; spell info.
  JP SPELL_MENU           ; Jump back to SPELL_MENU when finished displaying
                          ; the spell info.
SPELL_MENU_10_RECORD_SPELL:
  LD A,(CURRENT_WIZARD_ID) ; The user has picked a spell. Write the spell ID
  LD D,$00                 ; into the small table at CURRENT_SPELL_ID, at the
  LD E,A                   ; correct index for the current wizard. (Calculated
  LD HL,SPELLS_CHOSEN      ; by adding the wizard's ID to the memory location
  ADD HL,DE                ; of the first entry in the table.)
  LD A,(CURRENT_SPELL_ID)  ;
  LD (HL),A                ;
  CP $02                  ; If the current spell ID is between $02 and $21
  RET M                   ; (i.e. is a creature) carry on and ask if it should
  CP $22                  ; be cast as an illusion. Otherwise return.
  RET P                   ;
  CALL CLEAR_MESSAGE_BAR  ; Clear the message bar.
  LD A,$47                ; Set the colours to white on black ($47).
  LD ($5C8F),A            ;
  LD A,$5E                ; Print the message with ID $5E (ILLUSION? (PRESS Y
  LD BC,$1600             ; OR N)) at screen position $1600.
  CALL PRINT_MESSAGE_2    ;
  CALL WAIT_FOR_KEYPRESS_2
SPELL_MENU_11_ILLUSION_Y_OR_N:
  CALL $02BF              ; Keyboard ROM subroutine.
  CP $4E                  ; If the user pressed N return.
  RET Z                   ;
  CP $59                              ; If the user pressed something other
  JR NZ,SPELL_MENU_11_ILLUSION_Y_OR_N ; than Y, loop back. You can only press Y
                                      ; or N at this point.
  LD HL,SPELLS_CHOSEN_ILLUSIONS ; The user pressed Y. Record that the creature
  LD D,$00                      ; will be cast as an illusion in the small
  LD A,(CURRENT_WIZARD_ID)      ; table at SPELLS_CHOSEN_ILLUSIONS.
  LD E,A                        ;
  ADD HL,DE                     ;
  LD (HL),$01                   ;
  RET

; Display spell info
;
; Displays information about a single spell.
;
; Used by the routine at SPELL_MENU.
DISPLAY_SPELL_INFO:
  CALL GET_SPELL_INFO
  LD A,(CURRENT_SPELL_ID)   ; If the current spell ID is $01 (Disbelieve) jump
  CP $01                    ; to DISPLAY_SPELL_INFO_0.
  JR Z,DISPLAY_SPELL_INFO_0 ;
  CP $22                    ; If the current spell ID >= $22 (Gooey Blob) jump
  JP P,DISPLAY_SPELL_INFO_0 ; to DISPLAY_SPELL_INFO_0.
  LD HL,$E0BE
  LD (HL),A
  LD (LOCATION_TARGET),HL
  LD DE,$0281
  ADD HL,DE
  LD (HL),$00
  LD HL,VAR_C39E
  LD (HL),$03
  LD A,(CURRENT_SPELL_CASTING_CHANCE)
  LD ($FFFF),A
  CALL DISPLAY_CREATURE_INFO ; Display the 'I' key info page.
  LD HL,VAR_C39E
  LD (HL),$00
  LD HL,(LOCATION_TARGET)
  LD (HL),$00
  LD HL,ARENA_STATE_1
  LD (LOCATION_TARGET),HL
  RET
DISPLAY_SPELL_INFO_0:
  CALL CLEAR_SCREEN       ; Clear the screen.
  LD HL,SOUND_EFFECT_MENU_CHIRP
  CALL SOUND_EFFECT_0
  LD A,$69                ; Draw the border in blue on cyan ($69).
  LD ($5C8F),A            ;
  CALL DRAW_BORDER        ;
  LD A,$46                ; Set the colours to yellow on black ($46).
  LD ($5C8F),A            ;
  LD HL,(SPELL_TABLE_POINTER)
  LD A,(HL)
  LD BC,$0508
  CALL PRINT_MESSAGE_2
  LD A,(CURRENT_SPELL_CHAOS_LAW_VALUE) ; Load the spell's chaos/law value into
                                       ; A.
  OR A
  JR Z,DISPLAY_SPELL_INFO_2 ; Neutral spell. Jump to DISPLAY_SPELL_INFO_2.
  JP P,DISPLAY_SPELL_INFO_1 ; Lawful spell. Jump to DISPLAY_SPELL_INFO_1.
  LD A,$43                ; Set the colours to magenta on black ($43).
  LD ($5C8F),A            ;
  LD A,$46                ; Print the message with ID $46 ((CHAOS) at screen
  LD BC,$0708             ; position $0708.
  CALL PRINT_MESSAGE_2    ;
  LD A,(CURRENT_SPELL_CHAOS_LAW_VALUE) ; Load the spell's chaos/law value into
  NEG                                  ; A and negate it.
  ADD A,$30               ; Add $30 to get the character to print, then print
  CALL PRINT_SINGLE_CHAR  ; it.
  LD A,$29                ; Print a close bracket.
  CALL PRINT_SINGLE_CHAR  ;
  JR DISPLAY_SPELL_INFO_2
DISPLAY_SPELL_INFO_1:
  LD A,$45                ; Set the colours to cyan on black ($45).
  LD ($5C8F),A            ;
  LD A,$47                ; Print the message with ID $47 ((LAW) at screen
  LD BC,$0708             ; position $0708.
  CALL PRINT_MESSAGE_2    ;
  LD A,(CURRENT_SPELL_CHAOS_LAW_VALUE)
  ADD A,$30
  CALL PRINT_SINGLE_CHAR
  LD A,$29
  CALL PRINT_SINGLE_CHAR
DISPLAY_SPELL_INFO_2:
  LD A,$44                ; Set the colours to green on black ($44).
  LD ($5C8F),A            ;
  LD A,$4F                ; Print the message with ID $4F (CASTING CHANCE=) at
  LD BC,$0B08             ; screen position $0B08.
  CALL PRINT_MESSAGE_2    ;
  LD A,$46                ; Set the colours to yellow on black ($46).
  LD ($5C8F),A            ;
  LD A,(CURRENT_SPELL_CASTING_CHANCE) ; Get the casting chance of the current
                                      ; spell. Will be a value from 0 (10%
                                      ; chance) to 9 (100% chance).
  INC A                      ; Add 1 to A. If we don't have 10 (i.e. it's not a
  CP $0A                     ; 100% chance) jump to DISPLAY_SPELL_INFO_3.
  JR NZ,DISPLAY_SPELL_INFO_3 ;
  LD A,$50                ; Print the message with ID $50 (10). See table at
  CALL PRINT_MESSAGE_2    ; TABLE_TEXT_MESSAGES_2.
  JR DISPLAY_SPELL_INFO_4
DISPLAY_SPELL_INFO_3:
  ADD A,$30               ; Add $30 to A to get the character to print (e.g. 5
                          ; maps to $35)
  CALL PRINT_SINGLE_CHAR  ; Print it.
DISPLAY_SPELL_INFO_4:
  LD A,$30                ; Print a 0.
  CALL PRINT_SINGLE_CHAR  ;
  LD A,$25                ; Print the % symbol.
  CALL PRINT_SINGLE_CHAR  ;
  LD A,$44                ; Set the colours to green on black ($44).
  LD ($5C8F),A            ;
  LD A,$4A                ; Print the message with ID $4A (RANGE=) at screen
  LD BC,$0F08             ; position $0F08.
  CALL PRINT_MESSAGE_2    ;
  LD A,$46                ; Set the colours to yellow on black ($46).
  LD ($5C8F),A            ;
  LD IX,(SPELL_TABLE_POINTER) ; Set the index register to the location of the
                              ; current spell in the spells table.
  LD A,(IX+$02)           ; Get the third byte in the spell's data: the range.
  SRL A                   ; Shift the bits in A right, effectively dividing by
                          ; two.
  CP $0A                    ; If it's 10 or above, jump to
  JP P,DISPLAY_SPELL_INFO_5 ; DISPLAY_SPELL_INFO_5.
  ADD A,$30               ; Add $30 to A to get the character to print (e.g. 5
                          ; maps to $35)
  CALL PRINT_SINGLE_CHAR  ; Print it.
  JR DISPLAY_SPELL_INFO_6
DISPLAY_SPELL_INFO_5:
  LD A,$32                ; Print 20.
  CALL PRINT_SINGLE_CHAR  ;
  LD A,$30                ;
  CALL PRINT_SINGLE_CHAR  ;
DISPLAY_SPELL_INFO_6:
  LD A,$4D                ; Set the colours to cyan on blue ($4D).
  LD ($5C8F),A            ;
  LD A,$3D                ; Print the message with ID $3D (PRESS ANY KEY) at
  LD BC,$1600             ; screen position $1600.
  CALL PRINT_MESSAGE_2    ;
  CALL WAIT_FOR_KEYPRESS_2
  CALL WAIT_FOR_KEYPRESS_1 ; Wait for keypress
  RET

; Update the "is current wizard computer controlled" flag at
; WIZ_IS_COMP_CONTROLLED.
;
; Used by the routines at PRE_TURN_MENU and CAST_SPELLS.
SET_WIZ_IS_COMP_CONTROLLED:
  LD HL,COMP_CONTROLLED_WIZARDS ; Load HL with COMP_CONTROLLED_WIZARDS, the
                                ; memory address which contains info on which
                                ; players are computer controlled (see
                                ; COMP_CONTROLLED_WIZARDS).
  LD A,(CURRENT_WIZARD_ID) ; Set DE to the number of the wizard whose turn it
  LD D,$00                 ; is (see CURRENT_WIZARD_ID).
  LD E,A                   ;
  ADD HL,DE               ; Add DE to HL and save to HL. HL now contains the
                          ; memory address of the current wizard's "is computer
                          ; controlled" flag.
  LD A,(HL)                     ; Set WIZ_IS_COMP_CONTROLLED to the value of
  LD (WIZ_IS_COMP_CONTROLLED),A ; the address HL is pointing to (i.e. 1 if the
                                ; current wizard is computer controlled or 0 if
                                ; not).
  RET

; Cast spells.
;
; Used by the routine at PRE_TURN_MENU.
CAST_SPELLS:
  CALL CLEAR_SCREEN       ; Clear the screen.
  CALL ROUTINE_FE56
  CALL MAYBE_MARK_ARENA_SQUARES_0
  HALT
  HALT
  LD A,$00                 ; Set the current wizard ID (at CURRENT_WIZARD_ID)
  LD (CURRENT_WIZARD_ID),A ; to 0.
CAST_SPELLS_1_LOAD_WIZARD:
  LD HL,WIZARD_STATUS_VALUES ; Set HL to the address of the wizard status
                             ; values, WIZARD_STATUS_VALUES.
  LD A,(CURRENT_WIZARD_ID) ; Set DE to the current wizard ID.
  LD D,$00                 ;
  LD E,A                   ;
  ADD HL,DE               ; Add HL and DE to get the address of the current
  LD A,(HL)               ; wizard's status, and load it into A.
  BIT 4,(HL)              ; If bit 4 is set (i.e. the wizard is dead) jump to
  JP NZ,CAST_SPELLS_7     ; CAST_SPELLS_7 (skipping his turn).
  CALL FIND_CURRENT_WIZARD
  CALL SET_WIZ_IS_COMP_CONTROLLED ; Update the flag which tells whether the
                                  ; current wizard is computer controlled (1 if
                                  ; computer controlled, 0 if not).
  OR A                       ; If the wizard is computer controlled, jump to
  JP NZ,COMP_WIZ_CASTS_SPELL ; COMP_WIZ_CASTS_SPELL.
  LD HL,SPELLS_CHOSEN     ; Set HL to the address of the small table in which
                          ; each wizard's chosen spell is held. (SPELLS_CHOSEN)
  LD D,$00                 ; Set DE to the current wizard ID.
  LD A,(CURRENT_WIZARD_ID) ;
  LD E,A                   ;
  ADD HL,DE               ; Add HL and DE together to get the address of the
  LD A,(HL)               ; current wizard's chosen spell and load its ID into
                          ; A.
  LD (CURRENT_SPELL_ID),A ; Set the current spell ID variable
                          ; (CURRENT_SPELL_ID).
  OR A                    ; If it's 0 (no spell selected) jump to
  JP Z,CAST_SPELLS_7      ; CAST_SPELLS_7, skipping this wizard.
  CALL GET_CURRENT_WIZ_INVENTORY_LOCATION ; Gets the current wizard's inventory
                                          ; location (the result is saved into
                                          ; HL, and also at
                                          ; CURRENT_WIZ_INVENTORY_POINTER.)
  LD B,$13
  LD A,(CURRENT_SPELL_ID) ; If the current spell ID is $01 (Disbelieve) jump to
  CP $01                  ; CAST_SPELLS_4.
  JR Z,CAST_SPELLS_4      ;
CAST_SPELLS_2_MARK_SPELL_CAST:
  LD E,(HL)                      ; If the spell ID at the memory location
  CP E                           ; pointed to by HL doesn't match the current
  JR NZ,CAST_SPELLS_3_NEXT_SPELL ; spell ID, jump to CAST_SPELLS_3_NEXT_SPELL.
  LD (HL),$00             ; Found the spell. Mark it as cast by setting the
                          ; spell ID in the wizard's inventory to 0.
  JR CAST_SPELLS_4        ; Jump to CAST_SPELLS_4
CAST_SPELLS_3_NEXT_SPELL:
  INC HL                             ; HL is pointing to a spell in the
  INC HL                             ; player's inventory. Increment twice to
  DJNZ CAST_SPELLS_2_MARK_SPELL_CAST ; move to the next spell and jump back to
                                     ; CAST_SPELLS_2_MARK_SPELL_CAST.
CAST_SPELLS_4:
  CALL GET_SPELL_INFO     ; Get the spell info. Sets a number of variables in
                          ; memory.
  CALL PRINT_SPELL_TO_CAST ; Print the spell name.
  CALL WAIT_FOR_KEYPRESS_1 ; Wait for keypress
  CALL CLEAR_MESSAGE_BAR  ; Clear the message bar.
  LD HL,SPELLS_CHOSEN_ILLUSIONS ; Work out if the spell chosen was an illusion
  LD D,$00                      ; and load it into A. A will be 1 if it's an
  LD A,(CURRENT_WIZARD_ID)      ; illusion, 0 if not.
  LD E,A                        ;
  ADD HL,DE                     ;
  LD A,(HL)                     ;
  LD (IS_CURRENT_SPELL_ILLUSION),A ; Set the flag indicating whether the
                                   ; current spell is an illusion.
  OR A                           ; If the spell is an illusion, jump to
  JR NZ,CAST_SPELLS_5_SUCCESSFUL ; CAST_SPELLS_5_SUCCESSFUL.
  CALL GET_RANDOM_NUM_0_TO_9 ; A = a random number from 0 to 9.
  LD HL,CURRENT_SPELL_CASTING_CHANCE ; HL = address holding the current spell
                                     ; casting chance
                                     ; (CURRENT_SPELL_CASTING_CHANCE)
  LD E,(HL)               ; E = casting chance of current spell + 1
  INC E                   ;
  CP E                          ; If A < E spell succeeded. Jump to
  JP M,CAST_SPELLS_5_SUCCESSFUL ; CAST_SPELLS_5_SUCCESSFUL.
  LD A,$00                  ; Record that the spell failed at
  LD (SPELL_SUCCESS_FLAG),A ; SPELL_SUCCESS_FLAG. TODO Or did it succeed?
  JP CAST_SPELLS_6
CAST_SPELLS_5_SUCCESSFUL:
  LD A,$01                  ; Record that the spell succeeded at
  LD (SPELL_SUCCESS_FLAG),A ; SPELL_SUCCESS_FLAG.
  LD A,(CURRENT_SPELL_CHAOS_LAW_VALUE) ; Load the current spell's law/chaos
                                       ; level into A.
  LD HL,CHAOS_LAW_LEVEL   ; Load the address of the world's law/chaos level
                          ; (CHAOS_LAW_LEVEL) into HL.
  ADD A,(HL)              ; Add the world's law/chaos level to A.
  LD (HL),A               ; Save the new world law/chaos level back to
                          ; CHAOS_LAW_LEVEL.
CAST_SPELLS_6:
  LD L,(IX+$05)           ; Set HL to the address of the routine used to cast
  LD H,(IX+$06)           ; the spell.
  LD ($9663),HL           ; Overwrite the address in the next line to point to
                          ; the appropriate spell routine.
  CALL CAST_CREATURE      ; Address will be overwritten with a new routine
                          ; location, depending on the spell being cast.
CAST_SPELLS_7:
  CALL CLEAR_MESSAGE_BAR  ; Clear the message bar.
; This entry point is used by the routine at COMP_WIZ_CASTS_SPELL.
CAST_SPELLS_8:
  LD HL,VAR_A172
  CALL ROUTINE_7D04
  LD HL,CURRENT_WIZARD_ID ; HL = CURRENT_WIZARD_ID (current wizard ID)
  INC (HL)                ; Add one to HL, getting the next wizard ID.
  LD A,(NUM_OF_WIZARDS)   ; A = CURRENT_WIZARD_ID (num of wizards in the game)
  CP (HL)                         ; If there are still more wizards, jump back
  JP NZ,CAST_SPELLS_1_LOAD_WIZARD ; to CAST_SPELLS_1_LOAD_WIZARD.
  RET                     ; Else, return.

; Print spell about to be cast in message bar.
;
; Used by the routines at CAST_WIZARD_BUFF_SPELL, CAST_CHAOS_OR_LAW,
; ROUTINE_859C, CAST_RAISE_DEAD, CAST_SPELLS, CAST_CREATURE,
; COMP_WIZ_CASTS_DISBELIEVE, CAST_TREES_OR_CASTLE, CAST_WALL, CAST_LIGHTNING,
; ROUTINE_9D8A and ROUTINE_9EF9.
PRINT_SPELL_TO_CAST:
  LD A,$46                ; Set the colours to yellow on black ($46).
  LD ($5C8F),A            ;
  LD A,(CURRENT_WIZARD_ID) ; Add $29 to the ID of the active wizard
  ADD A,$29                ; (CURRENT_WIZARD_ID) to get the ID of current
                           ; wizard's name in the string table at
                           ; TABLE_TEXT_MESSAGES_2.
  LD BC,$1600             ; Print the current wizard's name at screen location
  CALL PRINT_MESSAGE_2    ; $1600.
  CALL ROUTINE_96D1
  LD A,$44                ; Set the colours to green on black ($44).
  LD ($5C8F),A            ;
  LD A,(IX+$00)
  CALL PRINT_MESSAGE_2
  CALL ROUTINE_96D1
  LD A,$47                ; Set the colours to white on black ($47).
  LD ($5C8F),A            ;
  INC C
  LD A,(IX+$02)
  SRL A
  CP $0A
  JP P,PRINT_SPELL_TO_CAST_0
  ADD A,$30
  CALL PRINT_SINGLE_CHAR
  JR PRINT_SPELL_TO_CAST_1
PRINT_SPELL_TO_CAST_0:
  LD A,$32
  PUSH BC
  CALL PRINT_SINGLE_CHAR
  POP BC
  INC C
  LD A,$30
  CALL PRINT_SINGLE_CHAR
PRINT_SPELL_TO_CAST_1:
  CALL ROUTINE_96D1
  LD A,(WIZ_IS_COMP_CONTROLLED) ; If the current wizard is player controlled,
  OR A                          ; return.
  RET Z                         ;
  LD B,$08
PRINT_SPELL_TO_CAST_2:
  PUSH BC
  CALL ROUTINE_96E6_MAYBE_BRIEF_PAUSE
  POP BC
  DJNZ PRINT_SPELL_TO_CAST_2
  RET

; Routine at 96D1
;
; Used by the routine at PRINT_SPELL_TO_CAST.
ROUTINE_96D1:
  PUSH BC
  LD HL,$9117
  CALL SOUND_EFFECT_0
  EI
  LD B,$FF
ROUTINE_96D1_0:
  PUSH BC
  LD B,$3C
ROUTINE_96D1_1:
  DJNZ ROUTINE_96D1_1
  POP BC
  DJNZ ROUTINE_96D1_0
  POP BC
  INC C
  RET

; Routine at 96E6
;
; Used by the routines at CAST_SUBVERSION, MAIN_LOOP, CHECK_TREES_FOR_NEW_SPELL
; and PRINT_SPELL_TO_CAST.
ROUTINE_96E6_MAYBE_BRIEF_PAUSE:
  PUSH BC
  LD B,$FF
ROUTINE_96E6_MAYBE_BRIEF_PAUSE_0:
  PUSH BC
  LD B,$A0
ROUTINE_96E6_MAYBE_BRIEF_PAUSE_1:
  DJNZ ROUTINE_96E6_MAYBE_BRIEF_PAUSE_1
  POP BC
  DJNZ ROUTINE_96E6_MAYBE_BRIEF_PAUSE_0
  POP BC
  RET

; Computer wizard choosing and casting spell.
;
; Used by the routine at CAST_SPELLS.
COMP_WIZ_CASTS_SPELL:
  LD HL,WIZARD_STATUS_VALUES ; HL = address of the wizard status values.
  LD A,(CURRENT_WIZARD_ID) ; DE = current wizard ID
  LD D,$00                 ;
  LD E,A                   ;
  ADD HL,DE               ; HL = address of the current wizard's status value
                          ; byte.
  BIT 4,(HL)              ; If bit 4 is set (wizard is dead) jump to
  JP NZ,CAST_SPELLS_8     ; CAST_SPELLS_8, skipping the rest of the routine.
  CALL GET_CURRENT_WIZ_INVENTORY_LOCATION ; Get the current wizard inventory
                                          ; location.
  CALL MAYBE_RANDOM_NUM_GENERATOR
  ADD A,$0C
  LD HL,(CURRENT_WIZ_INVENTORY_POINTER)
  DEC HL
  LD (HL),A
  LD A,$13
  CALL SHUFFLE_INVENTORY_MAYBE
  CALL GET_CURRENT_WIZ_INVENTORY_LOCATION
  LD B,$14                ; Going to loop 14 times.
COMP_WIZ_CASTS_SPELL_1:
  PUSH BC
  LD A,$01                ; Assume that the spell is valid to cast. See
  LD (IS_SPELL_VALID),A   ; IS_SPELL_VALID.
  LD HL,(CURRENT_WIZ_INVENTORY_POINTER) ; A = the ID of the spell the pointer
  LD A,(HL)                             ; is pointing at.
  OR A                                   ; If there was a 0 at that slot, jump
  JR Z,COMP_WIZ_CASTS_SPELL_3_NEXT_SPELL ; to COMP_WIZ_CASTS_SPELL_3_NEXT_SPELL
                                         ; (select next available spell).
  LD (CURRENT_SPELL_ID),A ; Set the current spell ID variable.
  CALL GET_SPELL_INFO     ; Get the current spell info.
  LD L,(IX+$05)           ; Set HL to the address of the routine used to cast
  LD H,(IX+$06)           ; the spell.
  LD ($9736),HL           ; Overwrite the address in the next line to point to
                          ; the appropriate spell routine.
  CALL CAST_CREATURE      ; Address will be overwritten with a new routine
                          ; location, depending on the spell being cast.
  CALL CLEAR_MESSAGE_BAR  ; Clear the message bar.
  LD A,(IS_SPELL_VALID)                  ; If the spell cast was invalid (e.g.
  OR A                                   ; magic sword routine returned early
  JR Z,COMP_WIZ_CASTS_SPELL_3_NEXT_SPELL ; because the wizard already had it),
                                         ; return to
                                         ; COMP_WIZ_CASTS_SPELL_3_NEXT_SPELL
                                         ; and pick another spell.
  LD A,(CURRENT_SPELL_ID)     ; If the current spell ID is $01 (Disbelieve)
  CP $01                      ; jump to COMP_WIZ_CASTS_SPELL_2.
  JR Z,COMP_WIZ_CASTS_SPELL_2 ;
  LD HL,(CURRENT_WIZ_INVENTORY_POINTER) ; Put a 0 in the spell inventory for
  LD (HL),$00                           ; the current spell. (So that it's no
                                        ; longer available.)
COMP_WIZ_CASTS_SPELL_2:
  POP BC
  JP CAST_SPELLS_8        ; Return to the spell casting routine.
COMP_WIZ_CASTS_SPELL_3_NEXT_SPELL:
  POP BC
  LD HL,(CURRENT_WIZ_INVENTORY_POINTER) ; Load the memory location of the
                                        ; current spell slot into A.
  INC HL                  ; Add two to HL, to move the pointer two bytes
  INC HL                  ; forward.
  LD (CURRENT_WIZ_INVENTORY_POINTER),HL ; Set the inventory pointer to the next
                                        ; spell.
  DJNZ COMP_WIZ_CASTS_SPELL_1 ; If there are still spells to cast, jump back to
                              ; COMP_WIZ_CASTS_SPELL_1.
  JP CAST_SPELLS_8        ; Return to the spell casting routine.

; Variable - whether the spell was valid to cast.
;
; If a computer wizard decided not to cast a spell (e.g. doesn't cast magic
; sword because he already has one), this is set to 0 and a new spell is
; selected in COMP_WIZ_CASTS_SPELL.
IS_SPELL_VALID:
  DEFB $01

; Spell attempt.
;
; Calculates whether the wizard succeeds in casting the spell. Sets the spell
; success flag, and updates the chaos/law level if successful.
;
; Used by the routines at CAST_WIZARD_BUFF_SPELL, CAST_CHAOS_OR_LAW,
;      ATTEMPT_RAISE_DEAD, CAST_CREATURE, CAST_TREES_OR_CASTLE, CAST_WALL,
; R$9DE0 and R$9EF9.
SPELL_ATTEMPT:
  LD A,(IS_CURRENT_SPELL_ILLUSION) ; If the current spell is an illusion, jump
  OR A                             ; to SPELL_ATTEMPT_1_SUCCESS.
  JR NZ,SPELL_ATTEMPT_1_SUCCESS    ;
  CALL GET_RANDOM_NUM_0_TO_9 ; A = a random number from 0 to 9.
  LD HL,CURRENT_SPELL_CASTING_CHANCE ; Load the current spell casting chance (0
  LD E,(HL)                          ; is 10%, 9 is 100%) into E.
  INC E                        ; Increment E and compare with A. If the random
  CP E                         ; number was less than the casting chance, jump
  JP M,SPELL_ATTEMPT_1_SUCCESS ; to SPELL_ATTEMPT_1_SUCCESS.
  LD A,$00                  ; The spell failed. Record a 0 in the spell success
  LD (SPELL_SUCCESS_FLAG),A ; flag.
  RET
SPELL_ATTEMPT_1_SUCCESS:
  LD A,$01                  ; Set the spell success flag to 1 (successful).
  LD (SPELL_SUCCESS_FLAG),A ;
  LD A,(CURRENT_SPELL_CHAOS_LAW_VALUE) ; A = current spell's law/chaos level.
  LD HL,CHAOS_LAW_LEVEL   ; HL = address of the world's law/chaos level
                          ; (CHAOS_LAW_LEVEL)
  ADD A,(HL)              ; Add the world's law/chaos level to A and save it
  LD (HL),A               ; back to CHAOS_LAW_LEVEL.
  RET

; Check that the spell is in range.
;
; Used by the routines at CAST_SUBVERSION, CAST_RAISE_DEAD,
; PLAYER_CAST_LOCATIONAL_SPELL, CAST_LIGHTNING, ROUTINE_9DAA and
; SPREAD_BLOB_AND_FIRE.
SPELL_RANGE_CHECK:
  LD HL,(LOCATION_SOURCE) ; HL = contents of LOCATION_SOURCE. When casting a
                          ; spell this is the casting wizard's location.
  CALL MAYBE_FIND_WIZ_COORDS
  LD (VAR_MAYBE_SPELL_SOURCE_COORDS),HL
  LD HL,(LOCATION_TARGET) ; HL = contents of LOCATION_TARGET. When casting a
                          ; spell this is the target location.
  CALL MAYBE_FIND_WIZ_COORDS
  LD (VAR_MAYBE_SPELL_DESTINATION_COORDS),HL
  CALL GET_DISTANCE
  LD HL,VAR_DISTANCE
  LD A,(IX+$02)
  CP (HL)
  RET

; Display spell success/failure message.
;
; Used by the routines at CAST_MAGIC_ARMOUR, CAST_MAGIC_SWORD,
; CAST_MAGIC_KNIFE, CAST_MAGIC_SHIELD, CAST_MAGIC_WINGS, CAST_MAGIC_BOW,
; CAST_CHAOS_OR_LAW, CAST_SHADOW_FORM, ROUTINE_859C, ATTEMPT_RAISE_DEAD,
; PLAYER_CAST_LOCATIONAL_SPELL, CAST_CREATURE, CAST_DISBELIEVE,
; CAST_TREES_OR_CASTLE, CAST_WALL, CAST_DARK_POWER_SELECT_TARGET and
; ROUTINE_9EF9.
DISPLAY_SUCCESS_FAIL_MESSAGE:
  CALL CLEAR_MESSAGE_BAR  ; Clear the message bar.
  LD A,(SPELL_SUCCESS_FLAG)            ; If the spell succeeded (see
  OR A                                 ; SPELL_SUCCESS_FLAG) jump to
  JR NZ,DISPLAY_SUCCESS_FAIL_MESSAGE_0 ; DISPLAY_SUCCESS_FAIL_MESSAGE_0.
  LD A,$43                ; Set the colours to magenta on black ($43).
  LD ($5C8F),A            ;
  LD A,$54                ; Print the message with ID $54 (SPELL FAILS) at
  LD BC,$1600             ; screen position $1600.
  CALL PRINT_MESSAGE_2    ;
  JR DISPLAY_SUCCESS_FAIL_MESSAGE_1
DISPLAY_SUCCESS_FAIL_MESSAGE_0:
  LD A,$47                ; Set the colours to white on black ($47).
  LD ($5C8F),A            ;
  LD BC,$1600             ; Print the message with ID $55 (SPELL SUCCEEDS) at
  LD A,$55                ; screen position $1600.
  CALL PRINT_MESSAGE_2    ;
DISPLAY_SUCCESS_FAIL_MESSAGE_1:
  LD B,$64
DISPLAY_SUCCESS_FAIL_MESSAGE_2:
  HALT                                ; Pause for a short while.
  DJNZ DISPLAY_SUCCESS_FAIL_MESSAGE_2 ;
  RET

; Variable - number of casts left for current spell
CASTS_LEFT:
  DEFB $01

; Variable - stores location when searching for the current wizard
;
; Points to somewhere in the arena state table at ARENA_STATE_1.
SEARCH_LOCATION:
  DEFB $BA,$E0

; Find the current wizard in the arena.
;
; Used by the routines at CAST_WIZARD_BUFF_SPELL, CAST_SPELLS and
; PLAYER_CAST_LOCATIONAL_SPELL.
FIND_CURRENT_WIZARD:
  LD HL,ARENA_STATE_1
  LD (SEARCH_LOCATION),HL ; SEARCH_LOCATION = address of current index to the
                          ; arena table 1
  LD B,$9F                ; Going to check all 150 cells. Load B with 159, as
                          ; that's how often we'll increase HL. (There are 10
                          ; "blank cell" memory locations that are not used.)
FIND_CURRENT_WIZARD_0:
  LD A,(HL)               ; A = contents of the cell
  SUB $29                 ; Subtract $29 (the creature ID of the first wizard)
  LD HL,CURRENT_WIZARD_ID ; HL = address containing the current wizard ID
                          ; (CURRENT_WIZARD_ID)
  CP (HL)                    ; If A == current wizard ID, found them. Jump to
  JR Z,FIND_CURRENT_WIZARD_1 ; FIND_CURRENT_WIZARD_1.
  LD HL,(SEARCH_LOCATION) ; HL = search location again
  LD DE,$0281             ; Find the equivalent location in arena table 5. The
  ADD HL,DE               ; wizard ID may be stored there if the wizard is in a
                          ; tree or on a mount.
  LD A,(HL)               ; A = contents of the cell in table 5
  SUB $29                 ; Subtract $29 (the creature ID of the first wizard)
  LD HL,CURRENT_WIZARD_ID ; HL = address containing the current wizard ID
                          ; (CURRENT_WIZARD_ID)
  CP (HL)                    ; If A == current wizard ID, found them. Jump to
  JR Z,FIND_CURRENT_WIZARD_1 ; FIND_CURRENT_WIZARD_1.
  LD HL,(SEARCH_LOCATION)    ; Didn't find them at this location. Set
  INC HL                     ; SEARCH_LOCATION to the next location and repeat.
  LD (SEARCH_LOCATION),HL    ;
  DJNZ FIND_CURRENT_WIZARD_0 ;
FIND_CURRENT_WIZARD_1:
  LD HL,(SEARCH_LOCATION)
  LD (LOCATION_SOURCE),HL ; Set LOCATION_SOURCE to the wizard's location.
  LD (LOCATION_TARGET),HL ; Set LOCATION_TARGET to the wizard's location.
  LD (MAYBE_WIZ_LOCATION),HL ; Set MAYBE_WIZ_LOCATION to the wizard's location.
  CALL MAYBE_FIND_WIZ_COORDS
  LD (XY_COORDS),HL
  RET

; Routine at 980E
;
; Used by the routines at CAST_CREATURE, CAST_TREES_OR_CASTLE and CAST_WALL.
ROUTINE_980E:
  PUSH HL
  LD HL,(LOCATION_TARGET)
  CALL MAYBE_FIND_WIZ_COORDS
  LD A,L
  CP $10
  POP HL
  RET

; Player casts a spell with a location.
;
; Used by the routines at CAST_CREATURE, CAST_TREES_OR_CASTLE and CAST_WALL.
PLAYER_CAST_LOCATIONAL_SPELL:
  CALL CLEAR_MESSAGE_BAR  ; Clear the message bar.
  CALL FIND_CURRENT_WIZARD
  CALL ROUTINE_FE56
  LD A,$00                ; Set $5C8D (ATTR P) to 0.
  LD ($5C8D),A            ;
  LD A,$FF                ; Set $5C8E (MASK P) to 255/-1.
  LD ($5C8E),A            ;
  CALL MAYBE_MARK_ARENA_SQUARES_0
  EI
  HALT
  LD A,$03
  LD ($5C91),A
  CALL CLEAR_MESSAGE_BAR  ; Clear the message bar.
  LD A,(CASTS_LEFT)       ; Load the number of spell casts left (CASTS_LEFT)
                          ; into A.
  LD B,A                  ; Load A into B and push BC.
PLAYER_CAST_LOCATIONAL_SPELL_0:
  PUSH BC                 ;
PLAYER_CAST_LOCATIONAL_SPELL_1:
  CALL KEY_INPUT          ; User key input.
  CALL $02BF              ; Keyboard ROM subroutine.
  CP $53                              ; If the user pressed S jump to
  JR Z,PLAYER_CAST_LOCATIONAL_SPELL_2 ; PLAYER_CAST_LOCATIONAL_SPELL_2.
  CP $4B                               ; If the user pressed K jump to
  JR NZ,PLAYER_CAST_LOCATIONAL_SPELL_1 ; PLAYER_CAST_LOCATIONAL_SPELL_1.
  POP BC
  LD HL,$C2B1
  CALL SOUND_EFFECT_0
  EI
  RET
PLAYER_CAST_LOCATIONAL_SPELL_2:
  CALL WAIT_FOR_KEYPRESS_2
  CALL SPELL_RANGE_CHECK
  JP P,PLAYER_CAST_LOCATIONAL_SPELL_3 ; If the spell was within range, jump to
                                      ; PLAYER_CAST_LOCATIONAL_SPELL_3.
  CALL CLEAR_MESSAGE_BAR  ; Clear the message bar.
  LD BC,$1600
  LD A,$45                ; Set the colours to cyan on black ($45).
  LD ($5C8F),A            ;
  LD A,$35                ; Print the message with ID $35 (OUT OF RANGE) at
  CALL PRINT_MESSAGE_2    ; screen position $1600.
  CALL WAIT_FOR_KEYPRESS_2
  CALL WAIT_FOR_KEYPRESS_1 ; Wait for keypress
  JR PLAYER_CAST_LOCATIONAL_SPELL_1
PLAYER_CAST_LOCATIONAL_SPELL_3:
  LD HL,(LOCATION_TARGET) ; The spell was in range. HL = object at the spell
  LD A,(HL)               ; target location.
  OR A                                ; If the targeted space is empty jump to
  JR Z,PLAYER_CAST_LOCATIONAL_SPELL_4 ; PLAYER_CAST_LOCATIONAL_SPELL_4.
  LD A,(CURRENT_SPELL_ID)             ; If the current spell ID >= $24 (Magic
  CP $24                              ; Wood) jump to
  JP P,PLAYER_CAST_LOCATIONAL_SPELL_1 ; PLAYER_CAST_LOCATIONAL_SPELL_1.
  LD HL,(LOCATION_TARGET)
  LD DE,$0141
  ADD HL,DE
  LD A,(HL)
  CP $04
  JR NZ,PLAYER_CAST_LOCATIONAL_SPELL_1
PLAYER_CAST_LOCATIONAL_SPELL_4:
  CALL ROUTINE_98F1
  JR NZ,PLAYER_CAST_LOCATIONAL_SPELL_1
  CALL ROUTINE_9C0F
  JR NZ,PLAYER_CAST_LOCATIONAL_SPELL_1
  CALL ROUTINE_98DB
  JR Z,PLAYER_CAST_LOCATIONAL_SPELL_5
  LD A,$45                ; Set the colours to cyan on black ($45).
  LD ($5C8F),A            ;
  CALL CLEAR_MESSAGE_BAR  ; Clear the message bar.
  LD A,$3C                ; Print the message with ID $3C (NO LINE OF SIGHT) at
  LD BC,$1600             ; screen position $1600.
  CALL PRINT_MESSAGE_2    ;
  CALL WAIT_FOR_KEYPRESS_2
  CALL WAIT_FOR_KEYPRESS_1 ; Wait for keypress
  JP PLAYER_CAST_LOCATIONAL_SPELL_1
PLAYER_CAST_LOCATIONAL_SPELL_5:
  CALL DISPLAY_CAST_ANIMATION
  LD A,(SPELL_SUCCESS_FLAG)           ; If the spell failed (see
  OR A                                ; SPELL_SUCCESS_FLAG) jump to
  JR Z,PLAYER_CAST_LOCATIONAL_SPELL_7 ; PLAYER_CAST_LOCATIONAL_SPELL_7.
  CALL SPAWN_NEW_CREATURE ; Spell succeeded. Call SPAWN_NEW_CREATURE to spawn
                          ; the new creature.
  POP BC
  PUSH BC
  LD A,B
  CP $01
  JR NZ,PLAYER_CAST_LOCATIONAL_SPELL_6
  CALL DISPLAY_SUCCESS_FAIL_MESSAGE ; Display the spell succeeds/fails message.
PLAYER_CAST_LOCATIONAL_SPELL_6:
  POP BC                               ; If there are any casts left, jump back
  DEC B                                ; to PLAYER_CAST_LOCATIONAL_SPELL_0.
  JP NZ,PLAYER_CAST_LOCATIONAL_SPELL_0 ;
  RET
PLAYER_CAST_LOCATIONAL_SPELL_7:
  POP BC
  CALL DISPLAY_SUCCESS_FAIL_MESSAGE ; Display the spell succeeds/fails message.
  RET

; Routine at 98DB
;
; Used by the routines at CAST_SUBVERSION, CAST_RAISE_DEAD,
; PLAYER_CAST_LOCATIONAL_SPELL, CAST_CREATURE, CAST_TREES_OR_CASTLE, CAST_WALL,
; CAST_LIGHTNING and ROUTINE_9DAA.
ROUTINE_98DB:
  XOR A
  LD (VAR_B754),A         ; Set VAR_B754 to 0.
  LD (VAR_B60B),A         ; Set VAR_B60B to 0.
  CALL ROUTINE_BA77
  CALL MAYBE_FIRE_ATTACK_ANIM
  CALL MAYBE_MARK_ARENA_SQUARES_0
  HALT
  LD A,(VAR_B754)
  OR A
  RET

; Routine at 98F1. Possibly to do with Shadow Wood?
;
; Used by the routines at PLAYER_CAST_LOCATIONAL_SPELL and
; CAST_TREES_OR_CASTLE.
ROUTINE_98F1:
  LD A,$00                ; Set VAR_9940 to 0.
  LD (VAR_9940),A         ;
  LD A,(CURRENT_SPELL_ID) ; If the current spell ID < $24 (Magic Wood) jump to
  CP $24                  ; ROUTINE_98F1_2.
  JP M,ROUTINE_98F1_2     ;
  CP $26                  ; If the current spell ID >= $26 (Magic Castle) jump
  JP P,ROUTINE_98F1_2     ; to ROUTINE_98F1_2.
  LD HL,VAR_CD2A_MAYBE_TABLE
  LD (VAR_CD3A),HL
  LD HL,(LOCATION_SOURCE)
  LD (VAR_C78B),HL
  LD B,$08
ROUTINE_98F1_0:
  PUSH BC
  LD HL,(LOCATION_TARGET)
  LD (LOCATION_SOURCE),HL
  CALL ROUTINE_CD3C
  LD HL,(LOCATION_SOURCE)
  LD A,H
  ADD A,L
  JR Z,ROUTINE_98F1_1
  LD A,(HL)
  CP $24
  JP M,ROUTINE_98F1_1
  CP $26
  JP P,ROUTINE_98F1_1
  LD A,$01
  LD (VAR_9940),A
ROUTINE_98F1_1:
  POP BC
  DJNZ ROUTINE_98F1_0
  LD HL,(VAR_C78B)
  LD (LOCATION_SOURCE),HL
ROUTINE_98F1_2:
  LD A,(VAR_9940)
  OR A
  RET

; Data block at 9940
VAR_9940:
  DEFB $00

; Spawn a new creature or object in the arena.
;
; Used by the routines at PLAYER_CAST_LOCATIONAL_SPELL, CAST_CREATURE and
; CAST_WALL.
SPAWN_NEW_CREATURE:
  LD HL,(LOCATION_TARGET) ; Load the memory address representing the cursor
                          ; location into HL.
  LD A,(CURRENT_SPELL_ID)   ; If the current spell ID is $22 (Gooey Blob) jump
  CP $22                    ; to SPAWN_NEW_CREATURE_1.
  JR Z,SPAWN_NEW_CREATURE_1 ;
  CP $23                    ; If the current spell ID is $23 (Magic Fire) jump
  JR Z,SPAWN_NEW_CREATURE_1 ; to SPAWN_NEW_CREATURE_1.
  LD A,(HL)               ; Copy the data at the cursor location to the
  LD DE,$0321             ; corresponding space in the data table 6, which
  ADD HL,DE               ; starts at ARENA_STATE_6. TODO - don't know what
  LD (HL),A               ; that table is for yet. Dead creatures?
  LD A,(CURRENT_SPELL_ID) ; Load the current spell ID into A.
SPAWN_NEW_CREATURE_1:
  LD HL,(LOCATION_TARGET) ; Copy A into the memory address representing the
  LD (HL),A               ; current cursor location. The spell IDs and the
                          ; creature IDs match up, so this spawns a new
                          ; creature on the map.
  LD DE,$00A1             ; Get the equivalent memory address in table 2.
  ADD HL,DE               ;
  LD (HL),$01             ; Set the value in table 2 to 1. TODO What does this
                          ; indicate?
  DEC DE                  ; Get the equivalent memory address in table 3.
  ADD HL,DE               ;
  LD (HL),$00             ; Set the value in table 3 to 0. TODO What does this
                          ; indicate?
  ADD HL,DE               ; Get the equivalent memory address in table 4.
  LD A,(CURRENT_WIZARD_ID) ; Set the value in table 4 to the current wizard ID.
  LD (HL),A                ;
  LD A,(IS_CURRENT_SPELL_ILLUSION) ; If the current spell is not an illusion
  OR A                             ; jump to SPAWN_NEW_CREATURE_2_RETURN.
  JR Z,SPAWN_NEW_CREATURE_2_RETURN ;
  SET 4,(HL)              ; Set bit 4 to indicate that the creature is an
                          ; illusion.
SPAWN_NEW_CREATURE_2_RETURN:
  HALT
  RET

; Cast Creature
;
; Used by the routines at CAST_SPELLS and COMP_WIZ_CASTS_SPELL.
CAST_CREATURE:
  LD A,$01                ; Set the number of times you get to cast this spell
  LD (CASTS_LEFT),A       ; (1) and save it at CASTS_LEFT.
  LD A,(WIZ_IS_COMP_CONTROLLED) ; If the current wizard is computer controlled
  OR A                          ; jump to CAST_CREATURE_1.
  JR NZ,CAST_CREATURE_1         ;
  CALL PLAYER_CAST_LOCATIONAL_SPELL
  RET
CAST_CREATURE_1:
  CALL ROUTINE_C78D
  LD A,$03
  LD (SELECT_SQUARE_RANGE),A
  LD A,(CURRENT_SPELL_ID) ; If the current spell ID < $22 (Gooey Blob) jump to
  CP $22                  ; CAST_CREATURE_2.
  JP M,CAST_CREATURE_2    ;
  LD A,$0D
  LD (SELECT_SQUARE_RANGE),A
CAST_CREATURE_2:
  CALL MAYBE_COMP_WIZARD_MOVEMENT
CAST_CREATURE_3:
  CALL ROUTINE_C9D4_0
  CP $4B
  JR NZ,CAST_CREATURE_4
  LD A,$00                ; Record that the spell was not cast.
  LD (IS_SPELL_VALID),A   ;
  RET
CAST_CREATURE_4:
  CALL ROUTINE_980E       ; Maybe checking target square is empty?
  JR Z,CAST_CREATURE_3    ;
  CALL ROUTINE_98DB
  JR NZ,CAST_CREATURE_3
  LD HL,(LOCATION_TARGET) ; Load the ID of the object at the current cursor
  LD A,(HL)               ; location into A.
  OR A                    ; If it's an empty space jump to CAST_CREATURE_5.
  JR Z,CAST_CREATURE_5    ;
  LD DE,$0141
  ADD HL,DE
  LD A,(HL)
  CP $04
  JR NZ,CAST_CREATURE_3
CAST_CREATURE_5:
  CALL PRINT_SPELL_TO_CAST ; Print the name of the spell that's being cast.
  CALL DISPLAY_CAST_ANIMATION
  LD A,(CURRENT_SPELL_ID) ; If the current spell ID >= $22 (Gooey Blob) jump to
  CP $22                  ; CAST_CREATURE_6.
  JP P,CAST_CREATURE_6    ;
  CALL GET_RANDOM_NUM_0_TO_9 ; A = a random number from 0 to 9.
  CP $02                  ; If A >= 2, jump to CAST_CREATURE_6.
  JP P,CAST_CREATURE_6    ;
  LD A,$01                         ; The computer player is casting the
  LD (IS_CURRENT_SPELL_ILLUSION),A ; creature as an illusion. Set
                                   ; IS_CURRENT_SPELL_ILLUSION.
CAST_CREATURE_6:
  CALL SPELL_ATTEMPT
  LD A,(SPELL_SUCCESS_FLAG)  ; If the spell succeeded (see SPELL_SUCCESS_FLAG)
  OR A                       ; jump to SPAWN_NEW_CREATURE.
  CALL NZ,SPAWN_NEW_CREATURE ;
  LD A,$00                         ; Reset the flag that tells us if the
  LD (IS_CURRENT_SPELL_ILLUSION),A ; current spell is an illusion to 0.
  CALL DISPLAY_SUCCESS_FAIL_MESSAGE ; Display the spell succeeds/fails message.
  RET

; Cast Disbelieve
CAST_DISBELIEVE_CHOOSE_TARGET:
  LD A,(WIZ_IS_COMP_CONTROLLED)   ; If the current wizard is computer
  OR A                            ; controlled jump to
  JP NZ,COMP_WIZ_CASTS_DISBELIEVE ; COMP_WIZ_CASTS_DISBELIEVE.
CAST_DISBELIEVE_CHOOSE_TARGET_0:
  CALL KEY_INPUT          ; User key input.
  CALL $02BF              ; Keyboard ROM subroutine.
  CP $53                               ; If the user pressed S jump to
  JR Z,CAST_DISBELIEVE_CHOOSE_TARGET_1 ; CAST_DISBELIEVE_CHOOSE_TARGET_1.
  CP $4B                                ; If the user pressed anything other
  JR NZ,CAST_DISBELIEVE_CHOOSE_TARGET_0 ; than K jump back to
                                        ; CAST_DISBELIEVE_CHOOSE_TARGET_0.
  LD HL,$C2B1             ; User pressed K. Play a sound effect, enable
  CALL SOUND_EFFECT_0     ; interrupts and return.
  EI                      ;
  RET                     ;
CAST_DISBELIEVE_CHOOSE_TARGET_1:
  CALL WAIT_FOR_KEYPRESS_2
  LD HL,(LOCATION_TARGET) ; Find out what is at the current cursor location and
  LD A,(HL)               ; load its ID into A.
  OR A                                 ; If A == 0, jump back to
  JR Z,CAST_DISBELIEVE_CHOOSE_TARGET_0 ; CAST_DISBELIEVE_CHOOSE_TARGET_0.
  CP $22                               ; If A >= $22, the ID isn't of a
  JP P,CAST_DISBELIEVE_CHOOSE_TARGET_0 ; creature that can be disbelieved. Jump
                                       ; back to
                                       ; CAST_DISBELIEVE_CHOOSE_TARGET_0.
  CALL CAST_DISBELIEVE
  RET

; Routine at 9A21
;
; Used by the routines at CAST_DISBELIEVE_CHOOSE_TARGET and
; COMP_WIZ_CASTS_DISBELIEVE.
CAST_DISBELIEVE:
  CALL DISPLAY_CAST_ANIMATION
  LD HL,(LOCATION_TARGET) ; Load the cursor location into HL.
  LD A,$00                  ; Set the spell success flag to 0 (failed).
  LD (SPELL_SUCCESS_FLAG),A ;
  LD DE,$01E1             ; HL = the memory address in table 4 representing the
  ADD HL,DE               ; cursor location. It records the wizard owner and
                          ; whether creatures are illusions.
  BIT 4,(HL)                ; Check bit 4. If it's 0, the creature is real -
  JR Z,CAST_DISBELIEVE_EXIT ; jump to CAST_DISBELIEVE_EXIT.
  LD DE,$00A0             ; Get the memory address in table 5 representing the
  ADD HL,DE               ; cursor location.
  LD A,(HL)               ; Overwrite the item in table 1 with the item in
  LD HL,(LOCATION_TARGET) ; table 5. TODO Why? Copying in dead creatures?
  LD (HL),A               ;
  CALL DISPLAY_EXPLOSION_ANIMATION
  LD A,$01                  ; Set the spell success flag to 1 (successful).
  LD (SPELL_SUCCESS_FLAG),A ;
CAST_DISBELIEVE_EXIT:
  CALL DISPLAY_SUCCESS_FAIL_MESSAGE ; Display the spell succeeds/fails message.
  LD HL,(LOCATION_TARGET) ; HL = the memory address in table 4 representing the
  LD DE,$01E1             ; cursor location.
  ADD HL,DE               ;
  SET 5,(HL)              ; Set bit 5. TODO Indicates that it should not be
                          ; disbelieved by the AI again?
  RET

; Display explosion animation
;
; Used by the routines at CAST_DISBELIEVE, CAST_LIGHTNING, ROUTINE_9CA9,
; ROUTINE_9E38 and MAYBE_BLOB_AND_FIRE_ACTIONS.
DISPLAY_EXPLOSION_ANIMATION:
  LD HL,$9121
  LD (SOUND_EFFECT_C2F3),HL
  CALL SOUND_EFFECT
  LD A,$46                ; Set the colours to yellow on black ($46).
  LD ($5C8F),A            ;
  LD HL,GRAPHICS_EXPLOSION
  LD (VAR_A188),HL
  LD HL,(LOCATION_TARGET)
  LD (VAR_E005_MAYBE_ARENA_COORDS),HL
  CALL MAYBE_FIND_ARENA_COORDS
  LD (VAR_DF4C),HL
  LD B,$07
  DI
DISPLAY_EXPLOSION_ANIMATION_0:
  PUSH BC
  LD HL,(VAR_A188)
  LD (VAR_DF4A),HL
  CALL MAYBE_ANIMATION
  CALL SOUND_EFFECT_1
  LD DE,$0020
  LD HL,(VAR_A188)
  ADD HL,DE
  LD (VAR_A188),HL
  POP BC
  DJNZ DISPLAY_EXPLOSION_ANIMATION_0
  CALL MAYBE_MARK_ARENA_SQUARES_0
  EI
  HALT
  RET

; Computer wizard casts disbelieve.
;
; Used by the routine at CAST_DISBELIEVE_CHOOSE_TARGET.
COMP_WIZ_CASTS_DISBELIEVE:
  LD HL,(LOCATION_SOURCE)
  LD (VAR_C78B),HL
  CALL ROUTINE_C7BC
  LD HL,(VAR_C78B)
  LD (LOCATION_SOURCE),HL
  LD HL,MAYBE_AI_TABLE
  LD (VAR_CD86),HL
  LD A,(VAR_C7BB)
  INC A
  CALL SHUFFLE_INVENTORY_MAYBE
COMP_WIZ_CASTS_DISBELIEVE_1:
  CALL ROUTINE_A17E
  CP $FF
  JR NZ,COMP_WIZ_CASTS_DISBELIEVE_2
  LD A,$00                ; Record that the spell was not cast.
  LD (IS_SPELL_VALID),A   ;
  RET
COMP_WIZ_CASTS_DISBELIEVE_2:
  LD HL,ARENA_STATE_1     ; HL = memory address of the creature we may attempt
  LD D,$00                ; to disbelieve, in arena table 1. See ARENA_STATE_1.
  LD E,A                  ;
  ADD HL,DE               ;
  LD (LOCATION_TARGET),HL
  LD A,(HL)               ; A = object ID
  CP $22                           ; If A > $22 (i.e. it's not a creature) jump
  JP P,COMP_WIZ_CASTS_DISBELIEVE_1 ; to COMP_WIZ_CASTS_DISBELIEVE_1.
  LD DE,$01E1             ; HL = the memory address containing the creature's
  ADD HL,DE               ; status, in arena table 4.
  BIT 5,(HL)                        ; If bit 5 is 0, jump back to
  JR NZ,COMP_WIZ_CASTS_DISBELIEVE_1 ; COMP_WIZ_CASTS_DISBELIEVE_1. The creature
                                    ; has already been disbelieved and found to
                                    ; be real.
  CALL PRINT_SPELL_TO_CAST ; Bit 5 was set, so the creature is an illusion.
                           ; Print that we're casting disbelieve.
  CALL CAST_DISBELIEVE    ; Call the cast disbelieve routine.
  RET

; Cast Trees and Castles
CAST_TREES_OR_CASTLE:
  LD A,$08                ; Assume we're casting trees. Save the number of
  LD (CASTS_LEFT),A       ; times you can cast this spell (8) at CASTS_LEFT.
  LD A,(CURRENT_SPELL_ID)     ; If the current spell ID < 38 (i.e. the spell is
  CP $26                      ; a tree) jump to CAST_TREES_OR_CASTLE_1.
  JP M,CAST_TREES_OR_CASTLE_1 ;
  LD A,$01                ; Casting a castle. Set the number of times you can
  LD (CASTS_LEFT),A       ; cast this spell (1) and save it at CASTS_LEFT.
CAST_TREES_OR_CASTLE_1:
  LD A,(WIZ_IS_COMP_CONTROLLED) ; If the current wizard is computer controlled
  OR A                          ; jump to CAST_TREES_OR_CASTLE_2.
  JR NZ,CAST_TREES_OR_CASTLE_2  ;
  LD A,(CURRENT_SPELL_ID)     ; If the spell being cast is a magic wood, jump
  CP $24                      ; to CAST_TREES_OR_CASTLE_4.
  JR Z,CAST_TREES_OR_CASTLE_4 ;
  CALL PLAYER_CAST_LOCATIONAL_SPELL
  RET
CAST_TREES_OR_CASTLE_2:
  LD A,(CURRENT_SPELL_ID)     ; If the spell being cast is a tree, jump to
  CP $26                      ; CAST_TREES_OR_CASTLE_3.
  JP M,CAST_TREES_OR_CASTLE_3 ;
  LD HL,(LOCATION_TARGET)
  LD A,(HL)
  CP $26
  JP M,CAST_TREES_OR_CASTLE_3
  CP $28
  JP P,CAST_TREES_OR_CASTLE_3
  LD A,$00                ; Record that the spell was not cast.
  LD (IS_SPELL_VALID),A   ;
  RET
CAST_TREES_OR_CASTLE_3:
  CALL PRINT_SPELL_TO_CAST
CAST_TREES_OR_CASTLE_4:
  LD HL,(LOCATION_SOURCE)
  LD (VAR_C8B7),HL
  LD A,$0D
  LD (SELECT_SQUARE_RANGE),A
  CALL SPELL_ATTEMPT
  LD A,(CASTS_LEFT)
  LD B,A
CAST_TREES_OR_CASTLE_5:
  PUSH BC
  CALL MAYBE_COMP_WIZARD_MOVEMENT
CAST_TREES_OR_CASTLE_6:
  CALL ROUTINE_C9D4_0
  CP $4B
  JR Z,CAST_TREES_OR_CASTLE_8
  CALL ROUTINE_980E
  JR Z,CAST_TREES_OR_CASTLE_6
  LD HL,(LOCATION_TARGET)
  LD A,(HL)
  OR A
  JR NZ,CAST_TREES_OR_CASTLE_6
  CALL ROUTINE_98F1
  JR NZ,CAST_TREES_OR_CASTLE_6
  CALL ROUTINE_98DB
  JR NZ,CAST_TREES_OR_CASTLE_6
  CALL DISPLAY_CAST_ANIMATION
  LD A,(SPELL_SUCCESS_FLAG)   ; If the spell succeeded (see SPELL_SUCCESS_FLAG)
  OR A                        ; jump to CAST_TREES_OR_CASTLE_7.
  JR Z,CAST_TREES_OR_CASTLE_7 ;
  LD A,(CURRENT_SPELL_ID) ; Write the current spell ID (creature ID?) into the
  LD HL,(LOCATION_TARGET) ; memory location corresponding to the cursor's
  LD (HL),A               ; position.
  LD DE,$01E1
  ADD HL,DE
  LD A,(CURRENT_WIZARD_ID)
  LD (HL),A
  CALL MAYBE_MARK_ARENA_SQUARES_0
  POP BC
  DJNZ CAST_TREES_OR_CASTLE_5
  RET
CAST_TREES_OR_CASTLE_7:
  CALL DISPLAY_SUCCESS_FAIL_MESSAGE ; Display the spell succeeds/fails message.
CAST_TREES_OR_CASTLE_8:
  POP BC
  RET

; Cast Wall
CAST_WALL:
  LD A,$04                ; Set the number of times you get to cast this spell
  LD (CASTS_LEFT),A       ; (1) and save it at CASTS_LEFT.
  LD A,(WIZ_IS_COMP_CONTROLLED) ; If the current wizard is computer controlled
  OR A                          ; jump to CAST_WALL_0.
  JR NZ,CAST_WALL_0             ;
  CALL PLAYER_CAST_LOCATIONAL_SPELL
  RET
CAST_WALL_0:
  LD A,$09
  LD (SELECT_SQUARE_RANGE),A
  LD HL,(LOCATION_SOURCE)
  LD (VAR_C78B),HL
  CALL ROUTINE_C7BC
  LD HL,(VAR_C78B)
  LD (LOCATION_SOURCE),HL
  LD HL,MAYBE_AI_TABLE
  LD (VAR_CD86),HL
  LD A,(VAR_C7BB)
  INC A
  CALL SHUFFLE_INVENTORY_MAYBE
CAST_WALL_1:
  CALL ROUTINE_A17E
  CP $FF
  JR NZ,CAST_WALL_2
  LD A,$00                ; Record that the spell was not cast.
  LD (IS_SPELL_VALID),A   ;
  RET
CAST_WALL_2:
  LD D,$00
  LD E,A
  LD HL,ARENA_STATE_1
  ADD HL,DE
  LD (LOCATION_TARGET),HL
  LD (VAR_C8B7),HL
  LD A,(HL)
  CP $1E
  JP P,CAST_WALL_3
  CP $13
  JP M,CAST_WALL_3
  JR CAST_WALL_1
CAST_WALL_3:
  CALL SPELL_ATTEMPT
  CALL PRINT_SPELL_TO_CAST
  LD B,$04
CAST_WALL_4:
  PUSH BC
  CALL MAYBE_COMP_WIZARD_MOVEMENT
CAST_WALL_5:
  CALL ROUTINE_C9D4_0
  CP $4B
  JR Z,CAST_WALL_6
  CALL ROUTINE_980E
  JR Z,CAST_WALL_5
  LD HL,(LOCATION_TARGET)
  LD A,(HL)
  OR A
  JR NZ,CAST_WALL_5
  CALL ROUTINE_9C0F
  JR NZ,CAST_WALL_5
  CALL ROUTINE_98DB
  JR NZ,CAST_WALL_5
  CALL DISPLAY_CAST_ANIMATION ; Display the cast animation.
  LD A,(SPELL_SUCCESS_FLAG) ; If the spell failed (see SPELL_SUCCESS_FLAG) jump
  OR A                      ; to CAST_WALL_7.
  JR Z,CAST_WALL_7          ;
  CALL SPAWN_NEW_CREATURE ; Spawn the new wall in the arena.
CAST_WALL_6:
  POP BC
  DJNZ CAST_WALL_4
  CALL DISPLAY_SUCCESS_FAIL_MESSAGE ; Display the spell succeeds/fails message.
  RET
CAST_WALL_7:
  CALL DISPLAY_SUCCESS_FAIL_MESSAGE ; Display the spell succeeds/fails message.
  POP BC
  RET

; Data block at 9C0E
VAR_9C0E:
  DEFB $00

; Routine at 9C0F - something to do with walls
;
; Used by the routines at PLAYER_CAST_LOCATIONAL_SPELL and CAST_WALL.
ROUTINE_9C0F:
  LD A,$00                ; Set VAR_9C0E to 0.
  LD (VAR_9C0E),A         ;
  LD A,(CURRENT_SPELL_ID) ; If this spell isn't $28 (Wall) jump to
  CP $28                  ; ROUTINE_9C0F_2.
  JR NZ,ROUTINE_9C0F_2    ;
  LD HL,VAR_CD2A_MAYBE_TABLE
  LD (VAR_CD3A),HL
  LD HL,(LOCATION_SOURCE)
  LD (VAR_C78B),HL
  LD B,$08
ROUTINE_9C0F_0:
  PUSH BC
  LD HL,(LOCATION_TARGET)
  LD (LOCATION_SOURCE),HL
  CALL ROUTINE_CD3C
  LD HL,(LOCATION_SOURCE)
  LD A,H
  ADD A,L
  JR Z,ROUTINE_9C0F_1
  LD A,(HL)
  SUB $29
  JP M,ROUTINE_9C0F_1
  LD HL,CURRENT_WIZARD_ID
  CP (HL)
  JR NZ,ROUTINE_9C0F_1
  LD A,$01
  LD (VAR_9C0E),A
ROUTINE_9C0F_1:
  POP BC
  DJNZ ROUTINE_9C0F_0
  LD HL,(VAR_C78B)
  LD (LOCATION_SOURCE),HL
ROUTINE_9C0F_2:
  LD A,(VAR_9C0E)
  OR A
  RET

; Cast Lightning or Magic Bolt
CAST_LIGHTNING:
  LD A,(WIZ_IS_COMP_CONTROLLED) ; If the current wizard is computer controlled
  OR A                          ; jump to ROUTINE_9D8A.
  JP NZ,ROUTINE_9D8A            ;
CAST_LIGHTNING_0:
  CALL KEY_INPUT          ; User key input.
  CALL $02BF              ; Keyboard ROM subroutine.
  CP $53                  ; If the user pressed S jump to CAST_LIGHTNING_1.
  JR Z,CAST_LIGHTNING_1   ;
  CP $4B                  ; If the user pressed anything other than K jump back
  JR NZ,CAST_LIGHTNING_0  ; to CAST_LIGHTNING_0.
  LD HL,$C2B1             ; User pressed K. Play a sound effect, enable
  CALL SOUND_EFFECT_0     ; interrupts and return.
  EI                      ;
  RET                     ;
CAST_LIGHTNING_1:
  LD HL,(LOCATION_TARGET) ; Load the target's ID into A by reading the memory
  LD A,(HL)               ; location corresponding to the cursor location
                          ; (LOCATION_TARGET).
  OR A                    ; If there was no target at the cursor location, jump
  JR Z,CAST_LIGHTNING_0   ; back to CAST_LIGHTNING_0.
  EX DE,HL
  LD HL,(LOCATION_SOURCE)
  XOR A
  SBC HL,DE
  JR Z,CAST_LIGHTNING_0
  CALL SPELL_RANGE_CHECK
  JP P,CAST_LIGHTNING_2
  CALL CLEAR_MESSAGE_BAR  ; Clear the message bar.
  LD BC,$1600
  LD A,$45                ; Set the colours to cyan on black ($45).
  LD ($5C8F),A            ;
  LD A,$35                ; Print the message with ID $35 (OUT OF RANGE) at
  CALL PRINT_MESSAGE_2    ; screen position $1600.
  CALL WAIT_FOR_KEYPRESS_2
  CALL WAIT_FOR_KEYPRESS_1 ; Wait for keypress
  JR CAST_LIGHTNING_0
CAST_LIGHTNING_2:
  CALL ROUTINE_98DB
  JR NZ,CAST_LIGHTNING_0

; Routine at 9CA9
;
; Used by the routine at ROUTINE_9D8A.
ROUTINE_9CA9:
  LD A,$05
  LD (VAR_B60B),A
  LD HL,$C275
  LD (SOUND_EFFECT_C2F3),HL
  LD A,(CURRENT_SPELL_ID) ; If the current spell ID < $2B (Lightning) jump to
  CP $2B                  ; ROUTINE_9CA9_0.
  JP M,ROUTINE_9CA9_0     ;
  LD HL,$912B
  LD (SOUND_EFFECT_C2F3),HL
  LD A,$06
  LD (VAR_B60B),A
ROUTINE_9CA9_0:
  CALL SOUND_EFFECT
  CALL MAYBE_FIRE_ATTACK_ANIM
  CALL MAYBE_MARK_ARENA_SQUARES_0
  LD HL,$C29D
  LD (SOUND_EFFECT_C2F3),HL
  CALL SOUND_EFFECT
  LD HL,(LOCATION_TARGET)
  LD (VAR_E005_MAYBE_ARENA_COORDS),HL
  CALL MAYBE_FIND_ARENA_COORDS
  LD (VAR_DF4C),HL
  LD A,$47                ; Set the colours to white on black ($47).
  LD ($5C8F),A            ;
  LD HL,GRAPHICS_CIRCLE_ANIMATION
  LD B,$09
  LD DE,$0020
ROUTINE_9CA9_1:
  PUSH BC
  PUSH HL
  PUSH DE
  LD (VAR_DF4A),HL
  CALL MAYBE_ANIMATION
  CALL SOUND_EFFECT_1
  POP DE
  POP HL
  POP BC
  ADD HL,DE
  DJNZ ROUTINE_9CA9_1
  CALL MAYBE_MARK_ARENA_SQUARES_0
  LD HL,(LOCATION_TARGET)
  LD A,(HL)
  CP $23
  JR Z,ROUTINE_9CA9_4
  CP $28
  JR Z,ROUTINE_9CA9_4
  CP $27
  JR Z,ROUTINE_9CA9_4
  CP $26
  JR Z,ROUTINE_9CA9_4
  LD D,A
  LD E,$10                ; A = the creature's defence.
  CALL GET_CREATURE_DATA  ;
  LD (VAR_A172),A
  LD A,(HL)
  CP $29
  JP M,ROUTINE_9CA9_2
  SUB $29
  LD HL,WIZARD_STATUS_VALUES
  LD D,$00
  LD E,A
  ADD HL,DE
  LD A,(HL)
  AND $C0
  OR A
  JR Z,ROUTINE_9CA9_2
  RLCA
  RLCA
  INC A
  LD HL,VAR_A172
  ADD A,(HL)
  LD (HL),A
ROUTINE_9CA9_2:
  CALL GET_RANDOM_NUM_0_TO_9 ; A = a random number from 0 to 9.
  LD HL,VAR_A172
  ADD A,(HL)
  LD (HL),A
  CALL GET_RANDOM_NUM_0_TO_9 ; A = a random number from 0 to 9.
  ADD A,$03
  LD E,A
  LD A,(CURRENT_SPELL_ID) ; If the ID of the spell being cast < $2B (Lightning)
  CP $2B                  ; jump to ROUTINE_9CA9_3.
  JP M,ROUTINE_9CA9_3     ;
  LD A,E
  ADD A,$03
  LD E,A
ROUTINE_9CA9_3:
  LD A,E
  LD HL,VAR_A172
  CP (HL)
  JP M,ROUTINE_9CA9_4
  CALL DISPLAY_EXPLOSION_ANIMATION
  LD HL,(LOCATION_TARGET)
  LD A,(HL)
  CP $29
  JP P,ROUTINE_9CA9_5
  LD (HL),$01
  LD DE,$0281
  ADD HL,DE
  LD A,(HL)
  OR A
  JR Z,ROUTINE_9CA9_4
  LD (HL),$00
  LD HL,(LOCATION_TARGET)
  LD (HL),A
ROUTINE_9CA9_4:
  CALL MAYBE_MARK_ARENA_SQUARES_0
  RET
ROUTINE_9CA9_5:
  CALL WIZARD_DEATH
  CALL MAYBE_MARK_ARENA_SQUARES_0
  RET

; Routine at 9D8A
;
; Used by the routine at CAST_LIGHTNING.
ROUTINE_9D8A:
  LD HL,(LOCATION_SOURCE)
  LD (MAYBE_WIZ_LOCATION),HL
  LD (VAR_C78B),HL
  CALL R_CC56_MAYBE_COMP_PICK_TARGET
  CALL ROUTINE_9DAA_0
  CP $FF
  JR NZ,ROUTINE_9D8A_0
  LD A,$00                ; Record that the spell was not cast.
  LD (IS_SPELL_VALID),A   ;
  RET
ROUTINE_9D8A_0:
  CALL PRINT_SPELL_TO_CAST
  CALL ROUTINE_9CA9
  RET

; Routine at 9DAA
ROUTINE_9DAA:
  LD HL,(VAR_CD86)
  INC HL
  INC HL
  LD (VAR_CD86),HL
; This entry point is used by the routine at ROUTINE_9D8A.
ROUTINE_9DAA_0:
  LD HL,(VAR_CD86)
  LD A,(HL)
  CP $FF
  RET Z
  LD HL,ARENA_STATE_1
  LD D,$00
  LD E,A
  ADD HL,DE
  LD (LOCATION_TARGET),HL
  LD A,(HL)
  CP $25
  JR Z,ROUTINE_9DAA_1
  CP $29
  JP P,ROUTINE_9DAA_1
  CP $23
  JP P,ROUTINE_9DAA
ROUTINE_9DAA_1:
  CALL SPELL_RANGE_CHECK
  JP M,ROUTINE_9DAA
  CALL ROUTINE_98DB
  JP NZ,ROUTINE_9DAA
  XOR A
  RET

; Cast Dark Power, etc
CAST_DARK_POWER_SELECT_TARGET:
  LD A,(WIZ_IS_COMP_CONTROLLED) ; If the current wizard is computer controlled
  OR A                          ; jump to ROUTINE_9EF9.
  JP NZ,ROUTINE_9EF9            ;
  CALL SPELL_ATTEMPT
  LD A,(SPELL_SUCCESS_FLAG)             ; If the spell succeeded (see
  OR A                                  ; SPELL_SUCCESS_FLAG) jump to
  JR NZ,CAST_DARK_POWER_SELECT_TARGET_0 ; CAST_WALL_7.
  CALL DISPLAY_SUCCESS_FAIL_MESSAGE ; Display the spell succeeds/fails message.
  RET
CAST_DARK_POWER_SELECT_TARGET_0:
  CALL CLEAR_MESSAGE_BAR  ; Clear the message bar.
  LD A,(SPELL_SUCCESS_FLAG) ; If the spell failed (see SPELL_SUCCESS_FLAG),
  OR A                      ; return.
  RET Z                     ;
  LD B,$01
  LD A,(CURRENT_SPELL_ID)              ; If the ID of the spell being cast <
  CP $2F                               ; $2F (Dark Power) jump to
  JP M,CAST_DARK_POWER_SELECT_TARGET_1 ; CAST_DARK_POWER_SELECT_TARGET_1.
  LD B,$03
CAST_DARK_POWER_SELECT_TARGET_1:
  PUSH BC
CAST_DARK_POWER_SELECT_TARGET_2:
  CALL KEY_INPUT          ; User key input.
  CALL $02BF              ; Keyboard ROM subroutine.
  CP $53                               ; If the user pressed S jump to
  JR Z,CAST_DARK_POWER_SELECT_TARGET_3 ; CAST_DARK_POWER_SELECT_TARGET_3.
  CP $4B                                ; If the user pressed anything other
  JR NZ,CAST_DARK_POWER_SELECT_TARGET_2 ; than K jump back to
                                        ; CAST_DARK_POWER_SELECT_TARGET_2.
  LD HL,$C2B1             ; The user pressed K. Play a sound effect, enable
  CALL SOUND_EFFECT_0     ; interrupts and return.
  EI                      ;
  POP BC                  ;
  RET                     ;
CAST_DARK_POWER_SELECT_TARGET_3:
  LD HL,(LOCATION_TARGET) ; Load the ID of the object at the cursor location
  LD A,(HL)               ; into A.
  OR A                                 ; If A is zero - i.e. there's nothing
  JR Z,CAST_DARK_POWER_SELECT_TARGET_2 ; there - jump back to
                                       ; CAST_DARK_POWER_SELECT_TARGET_2.
  CP $29                               ; If A >= $29 (i.e. it's not an object)
  JP P,CAST_DARK_POWER_SELECT_TARGET_4 ; jump to
                                       ; CAST_DARK_POWER_SELECT_TARGET_4.
  CP $22                               ; If A >= $22 (i.e. it's not a creature)
  JP P,CAST_DARK_POWER_SELECT_TARGET_2 ; jump back to
                                       ; CAST_DARK_POWER_SELECT_TARGET_2.
CAST_DARK_POWER_SELECT_TARGET_4:
  CALL ROUTINE_9E38
  POP BC
  DJNZ CAST_DARK_POWER_SELECT_TARGET_1
  RET

; Routine at 9E38
;
; Used by the routines at CAST_DARK_POWER_SELECT_TARGET and ROUTINE_9EF9.
ROUTINE_9E38:
  LD HL,VAR_9135_MAYBE_TABLE
  LD (SOUND_EFFECT_C2F3),HL
  CALL MAYBE_MARK_ARENA_SQUARES_0
  HALT
  DI
  LD HL,VAR_D808
  LD ($5C36),HL
  CALL SOUND_EFFECT
  LD B,$03
ROUTINE_9E38_0:
  PUSH BC
  LD B,$07
ROUTINE_9E38_1:
  PUSH BC
  LD A,B
  ADD A,$40
  LD ($5C8D),A
  LD A,$00
  LD ($5C8E),A
  LD HL,(LOCATION_TARGET)
  CALL MAYBE_FIND_WIZ_COORDS
  LD (XY_COORDS),HL
  LD A,$02
  CALL $1601              ; Chan-open ROM subroutine.
  LD BC,(XY_COORDS)
  CALL ROUTINE_BC8D
  LD A,$16
  RST $10
  LD A,B
  RST $10
  LD A,C
  RST $10
  LD A,$20
  RST $10
  LD A,$20
  RST $10
  INC B
  LD A,$16
  RST $10
  LD A,B
  RST $10
  LD A,C
  RST $10
  LD A,$20
  RST $10
  LD A,$20
  RST $10
  CALL SOUND_EFFECT_1
  POP BC
  DJNZ ROUTINE_9E38_1
  POP BC
  DJNZ ROUTINE_9E38_0
  CALL MAYBE_MARK_ARENA_SQUARES_0
  HALT
  LD A,$FF
  LD ($5C8E),A
  LD HL,(LOCATION_TARGET)
  LD D,(HL)
  LD E,$13                ; A = the creature's magic resistance.
  CALL GET_CREATURE_DATA  ;
  LD E,A
  CALL GET_RANDOM_NUM_0_TO_9 ; A = a random number from 0 to 9.
  INC E
  CP E
  JP P,ROUTINE_9E38_2
  CALL MAYBE_MARK_ARENA_SQUARES_0
  HALT
  RET
ROUTINE_9E38_2:
  LD HL,(LOCATION_TARGET)
  LD A,(HL)
  CP $29
  JP M,ROUTINE_9E38_3
  CALL DISPLAY_EXPLOSION_ANIMATION
  LD HL,(LOCATION_TARGET)
  LD A,(HL)
  SUB $29
  LD (VAR_AC00),A
  CALL WIZARD_DEATH_10
  CALL MAYBE_MARK_ARENA_SQUARES_0
  HALT
  RET
ROUTINE_9E38_3:
  LD (HL),$01
  LD DE,$0281
  ADD HL,DE
  LD A,(HL)
  OR A
  JR Z,ROUTINE_9E38_4
  LD (HL),$00
  LD HL,(LOCATION_TARGET)
  LD (HL),A
  JR ROUTINE_9E38_5
ROUTINE_9E38_4:
  LD HL,(LOCATION_TARGET)
  LD DE,$0321
  ADD HL,DE
  LD A,(HL)
  LD HL,(LOCATION_TARGET)
  LD (HL),A
ROUTINE_9E38_5:
  CALL DISPLAY_EXPLOSION_ANIMATION
  CALL MAYBE_MARK_ARENA_SQUARES_0
  HALT
  RET

; Routine at 9EF9
;
; Used by the routine at CAST_DARK_POWER_SELECT_TARGET.
ROUTINE_9EF9:
  CALL PRINT_SPELL_TO_CAST
  CALL SPELL_ATTEMPT
  LD A,(SPELL_SUCCESS_FLAG) ; If the spell succeeded (see SPELL_SUCCESS_FLAG)
  OR A                      ; jump to ROUTINE_9EF9_0.
  JR NZ,ROUTINE_9EF9_0      ;
  CALL DISPLAY_SUCCESS_FAIL_MESSAGE ; Display the spell succeeds/fails message.
  RET
ROUTINE_9EF9_0:
  LD B,$01
  LD A,(CURRENT_SPELL_ID) ; If the ID of the spell being cast < $2F (Dark
  CP $2F                  ; Power) jump to ROUTINE_9EF9_1.
  JP M,ROUTINE_9EF9_1     ;
  LD B,$03
ROUTINE_9EF9_1:
  PUSH BC
  LD HL,(LOCATION_SOURCE)
  LD (MAYBE_WIZ_LOCATION),HL
  LD (VAR_C78B),HL
  CALL R_CC56_MAYBE_COMP_PICK_TARGET
  LD HL,MAYBE_AI_TABLE
  LD (VAR_CD86),HL
ROUTINE_9EF9_2:
  CALL ROUTINE_A17E
  CP $FF
  JR NZ,ROUTINE_9EF9_3
  POP BC
  RET
ROUTINE_9EF9_3:
  LD D,$00
  LD E,A
  LD HL,ARENA_STATE_1
  ADD HL,DE
  LD (LOCATION_TARGET),HL
  LD A,(HL)
  OR A
  JR Z,ROUTINE_9EF9_2
  CP $29
  JP P,ROUTINE_9EF9_4
  CP $22
  JP P,ROUTINE_9EF9_2
ROUTINE_9EF9_4:
  CALL ROUTINE_9E38
  POP BC
  DJNZ ROUTINE_9EF9_1
  RET

; Spread gooey blob and magic fire.
;
; Used by the routine at MAIN_LOOP.
SPREAD_BLOB_AND_FIRE:
  LD HL,ARENA_STATE_1     ; HL = ARENA_STATE_1, arena state table 1
  LD (LOCATION_TARGET),HL ; Set the location pointer to the top left.
  CALL SET_ALL_CREATURES_READY ; Mark all objects in the arena as being ready
  LD B,$9F                ; We're going to loop over the whole of table 1.
; This entry point is used by the routine at MAYBE_BLOB_AND_FIRE_ACTIONS.
SPREAD_BLOB_AND_FIRE_1:
  PUSH BC
  LD HL,(LOCATION_TARGET) ; HL = location pointer
  LD (LOCATION_SOURCE),HL ; Store the location
  LD DE,$01E1                         ; Check bit 4 in the corresponding
  ADD HL,DE                           ; location in table 4. If it's not zero
  BIT 7,(HL)                          ; (i.e. the object is an illusion), jump
  JP NZ,MAYBE_BLOB_AND_FIRE_ACTIONS_5 ; to MAYBE_BLOB_AND_FIRE_ACTIONS_5.
  LD HL,(LOCATION_SOURCE) ; HL = current location
  LD A,(HL)               ; A = ID of object at current location
  CP $22                             ; If A < 22 or A >= 24 there's something
  JP M,MAYBE_BLOB_AND_FIRE_ACTIONS_5 ; other than a blob or magic fire there.
  CP $24                             ; Jump to MAYBE_BLOB_AND_FIRE_ACTIONS_5.
  JP P,MAYBE_BLOB_AND_FIRE_ACTIONS_5 ;
  LD DE,$01E1             ; Found a magic fire or blob. HL = the corresponding
  ADD HL,DE               ; location in arena table 4.
  LD A,(HL)               ; Get the ID of the owning wizard by ANDing with all
  AND $07                 ; but the 3 least significant bits.
  LD (CURRENT_WIZARD_ID),A ; Set the current wizard ID (CURRENT_WIZARD_ID)
  CALL GET_RANDOM_NUM_0_TO_9 ; A = a random number from 0 to 9.
  CP $09                             ; If A >= 9 jump to
  JP P,MAYBE_BLOB_AND_FIRE_ACTIONS_1 ; MAYBE_BLOB_AND_FIRE_ACTIONS_1. TODO Why?
  LD HL,(LOCATION_SOURCE)     ; If the space contains a magic fire, jump to
  LD A,(HL)                   ; SPREAD_BLOB_AND_FIRE_2.
  CP $23                      ;
  JR Z,SPREAD_BLOB_AND_FIRE_2 ;
  CALL GET_RANDOM_NUM_0_TO_9 ; A = a random number from 0 to 9.
  CP $08                             ; If A >= 8 jump to
  JP P,MAYBE_BLOB_AND_FIRE_ACTIONS_1 ; MAYBE_BLOB_AND_FIRE_ACTIONS_1.
SPREAD_BLOB_AND_FIRE_2:
  CALL GET_RANDOM_NUM_0_TO_9 ; A = a random number from 0 to 9.
  CP $08                      ; If A >= 8 jump back to SPREAD_BLOB_AND_FIRE_2.
  JP P,SPREAD_BLOB_AND_FIRE_2 ;
  LD HL,VAR_CD2A_MAYBE_TABLE
  LD D,$00
  SLA A
  LD E,A
  ADD HL,DE
  LD (VAR_CD3A),HL
  CALL ROUTINE_CD3C
  LD HL,(LOCATION_SOURCE)
  LD A,H
  ADD A,L
  JP Z,MAYBE_BLOB_AND_FIRE_ACTIONS_5
  CALL SPELL_RANGE_CHECK
  LD A,(VAR_DISTANCE)
  CP $04
  JP P,MAYBE_BLOB_AND_FIRE_ACTIONS_5
  LD HL,(LOCATION_SOURCE)
  LD A,(HL)
  OR A
  JP Z,MAYBE_BLOB_AND_FIRE_ACTIONS_0
  CP $29
  JP P,SPREAD_BLOB_AND_FIRE_3
  CP $26
  JP P,MAYBE_BLOB_AND_FIRE_ACTIONS_1
  CP $24
  JP Z,MAYBE_BLOB_AND_FIRE_ACTIONS_1
  LD DE,$0141
  ADD HL,DE
  LD A,(HL)
  CP $04
  JP Z,MAYBE_BLOB_AND_FIRE_ACTIONS_0
  LD DE,$00A0
  ADD HL,DE
  LD A,(HL)
  AND $07
  LD HL,CURRENT_WIZARD_ID
  CP (HL)
  JP Z,MAYBE_BLOB_AND_FIRE_ACTIONS_5
  LD HL,(LOCATION_SOURCE)
  LD A,(HL)
  CP $16
  JP P,SPREAD_BLOB_AND_FIRE_4
  CP $10
  JP M,SPREAD_BLOB_AND_FIRE_4
  CP $29
  JP P,SPREAD_BLOB_AND_FIRE_3
  LD DE,$0281
  ADD HL,DE
  LD A,(HL)
  CP $29
  JP M,SPREAD_BLOB_AND_FIRE_4
SPREAD_BLOB_AND_FIRE_3:
  LD HL,CURRENT_WIZARD_ID
  SUB $29
  CP (HL)
  JP Z,MAYBE_BLOB_AND_FIRE_ACTIONS_5
  ADD A,$29
  LD HL,(LOCATION_TARGET)
  PUSH HL
  LD HL,(LOCATION_SOURCE)
  LD DE,$0281
  ADD HL,DE
  LD (HL),$00
  LD HL,(LOCATION_SOURCE)
  LD (LOCATION_TARGET),HL
  LD (HL),A
  CALL MAYBE_MARK_ARENA_SQUARES_0
  CALL WIZARD_DEATH
  POP HL
  LD (LOCATION_TARGET),HL
  JP MAYBE_BLOB_AND_FIRE_ACTIONS_0
SPREAD_BLOB_AND_FIRE_4:
  LD HL,(LOCATION_TARGET)
  LD A,(HL)
  CP $23
  JR Z,MAYBE_BLOB_AND_FIRE_ACTIONS
  LD HL,(LOCATION_SOURCE)
  LD A,(HL)
  CP $23
  JP P,MAYBE_BLOB_AND_FIRE_ACTIONS_1
  LD DE,$0141
  ADD HL,DE
  LD A,(HL)
  CP $04
  JR Z,MAYBE_BLOB_AND_FIRE_ACTIONS_0
  LD HL,(LOCATION_SOURCE)
  LD A,(HL)
  LD DE,$0281
  ADD HL,DE
  LD (HL),A
  LD DE,$00A0
  SBC HL,DE
  LD A,(HL)
  AND $07
  LD DE,$0140
  ADD HL,DE
  LD (HL),A
  JR MAYBE_BLOB_AND_FIRE_ACTIONS_0

; Data block at A06F
  DEFB $21,$35,$91,$22,$F3,$C2

; Routine at A075
;
; Used by the routine at SPREAD_BLOB_AND_FIRE.
MAYBE_BLOB_AND_FIRE_ACTIONS:
  LD HL,(LOCATION_SOURCE)
  LD D,(HL)
  LD E,$10                ; A = the creature's defence.
  CALL GET_CREATURE_DATA  ;
  LD (VAR_A172),A
  CALL GET_RANDOM_NUM_0_TO_9 ; A = a random number from 0 to 9.
  LD HL,VAR_A172
  ADD A,(HL)
  LD (HL),A
  CALL GET_RANDOM_NUM_0_TO_9 ; A = a random number from 0 to 9.
  ADD A,$05
  LD HL,VAR_A172
  CP (HL)
  JP P,MAYBE_BLOB_AND_FIRE_ACTIONS_1
  LD HL,$913F
  LD (SOUND_EFFECT_C2F3),HL
; This entry point is used by the routine at SPREAD_BLOB_AND_FIRE.
MAYBE_BLOB_AND_FIRE_ACTIONS_0:
  LD HL,(LOCATION_TARGET)
  LD A,(HL)
  LD HL,(LOCATION_SOURCE)
  LD (HL),A
  LD DE,$0141
  ADD HL,DE
  LD (HL),$00
  LD DE,$00A0
  ADD HL,DE
  LD A,(CURRENT_WIZARD_ID)
  ADD A,$80
  LD (HL),A
  LD HL,(LOCATION_TARGET)
  ADD HL,DE
  SET 7,(HL)
  LD HL,(LOCATION_TARGET)
  LD (LOCATION_SOURCE),HL
  CALL MAYBE_MARK_ARENA_SQUARES_0
  CALL SOUND_EFFECT
  EI
; This entry point is used by the routine at SPREAD_BLOB_AND_FIRE.
MAYBE_BLOB_AND_FIRE_ACTIONS_1:
  CALL GET_RANDOM_NUM_0_TO_9 ; A = a random number from 0 to 9.
  CP $02                             ; If A >= 2 jump to
  JP P,MAYBE_BLOB_AND_FIRE_ACTIONS_5 ; MAYBE_BLOB_AND_FIRE_ACTIONS_5.
  LD HL,(LOCATION_SOURCE) ; Get ID of object at the current location.
  LD A,(HL)               ;
  CP $23                             ; If it's a magic fire jump to
  JR Z,MAYBE_BLOB_AND_FIRE_ACTIONS_2 ; MAYBE_BLOB_AND_FIRE_ACTIONS_2.
  CALL GET_RANDOM_NUM_0_TO_9 ; Going to check if a creature that is trapped in
                             ; this blob can break free. A = a random number
                             ; from 0 to 9.
  CP $03                             ; If A >= 3 jump to
  JP P,MAYBE_BLOB_AND_FIRE_ACTIONS_5 ; MAYBE_BLOB_AND_FIRE_ACTIONS_5.
MAYBE_BLOB_AND_FIRE_ACTIONS_2:
  LD HL,(LOCATION_TARGET) ; HL = corresponding location in table 5.
  LD DE,$0281             ;
  ADD HL,DE               ;
  LD A,(HL)               ; A = object at the location in table 5
  OR A                               ; If nothing's there jump to
  JR Z,MAYBE_BLOB_AND_FIRE_ACTIONS_3 ; MAYBE_BLOB_AND_FIRE_ACTIONS_3.
  LD (HL),$00             ; There was something in table 5. It broke free!
  LD HL,(LOCATION_TARGET) ; Delete it from table 5 and move it to table 1.
  LD (HL),A               ;
  LD DE,$0321             ; A = the item at the corresponding location in arena
  ADD HL,DE               ; table 6. TODO What is it?
  LD A,(HL)               ;
  LD (HL),$00             ; Set the location in arena table 6 to 0.
  LD DE,$0140             ; HL = the corresponding location in table 5.
  SBC HL,DE               ;
  LD (HL),A               ; Store A in table 5, moving the item from table 6 to
                          ; 5.
  JR MAYBE_BLOB_AND_FIRE_ACTIONS_4
MAYBE_BLOB_AND_FIRE_ACTIONS_3:
  LD HL,(LOCATION_TARGET) ; TODO Fire/blob blinking out of existence?
  LD (HL),$01
  LD DE,$0321             ; Delete the entry at the corresponding location in
  ADD HL,DE               ; arena table 6.
  LD (HL),$00             ;
MAYBE_BLOB_AND_FIRE_ACTIONS_4:
  CALL MAYBE_MARK_ARENA_SQUARES_0
  LD HL,$9149
  CALL SOUND_EFFECT_0
  EI
  HALT
; This entry point is used by the routine at SPREAD_BLOB_AND_FIRE.
MAYBE_BLOB_AND_FIRE_ACTIONS_5:
  POP BC
  LD HL,(LOCATION_TARGET)
  INC HL
  LD (LOCATION_TARGET),HL
  DEC B
  JP NZ,SPREAD_BLOB_AND_FIRE_1
  LD HL,ARENA_STATE_1
  LD (LOCATION_TARGET),HL
  LD B,$9F
MAYBE_BLOB_AND_FIRE_ACTIONS_6:
  PUSH BC
  LD HL,(LOCATION_TARGET)
  LD A,(HL)
  CP $26
  JP M,MAYBE_BLOB_AND_FIRE_ACTIONS_8
  CP $28
  JP P,MAYBE_BLOB_AND_FIRE_ACTIONS_8
  CALL GET_RANDOM_NUM_0_TO_9 ; A = a random number from 0 to 9.
  CP $02
  JP P,MAYBE_BLOB_AND_FIRE_ACTIONS_8
  LD HL,(LOCATION_TARGET)
  LD DE,$0281
  ADD HL,DE
  LD A,(HL)
  LD (HL),$00
  OR A
  JR NZ,MAYBE_BLOB_AND_FIRE_ACTIONS_7
  LD A,$01
MAYBE_BLOB_AND_FIRE_ACTIONS_7:
  LD HL,(LOCATION_TARGET)
  LD (HL),A
  CALL DISPLAY_EXPLOSION_ANIMATION
  CALL MAYBE_MARK_ARENA_SQUARES_0
MAYBE_BLOB_AND_FIRE_ACTIONS_8:
  POP BC
  LD HL,(LOCATION_TARGET)
  INC HL
  LD (LOCATION_TARGET),HL
  DJNZ MAYBE_BLOB_AND_FIRE_ACTIONS_6
  LD HL,$E076
  LD (LOCATION_TARGET),HL
  LD (LOCATION_SOURCE),HL
  CALL MAYBE_FIND_WIZ_COORDS
  LD (XY_COORDS),HL
  RET

; Data block at A172
VAR_A172:
  DEFB $0C

; Mark all creatures as not having moved yet.
;
; This involves resetting bit 7 across arena table 4.
;
; Used by the routines at MAIN_LOOP and SPREAD_BLOB_AND_FIRE.
SET_ALL_CREATURES_READY:
  LD HL,ARENA_STATE_4            ; Set bit 7 across every entry in arena table
  LD B,$9F                       ; 4 (ARENA_STATE_4)
SET_ALL_CREATURES_READY_0:
  RES 7,(HL)                     ;
  INC HL                         ;
  DJNZ SET_ALL_CREATURES_READY_0 ;
  RET

; Routine at A17E
;
; Used by the routines at CAST_SUBVERSION, CAST_RAISE_DEAD,
; COMP_WIZ_CASTS_DISBELIEVE, CAST_WALL and ROUTINE_9EF9.
ROUTINE_A17E:
  LD HL,(VAR_CD86)
  INC HL
  LD A,(HL)
  INC HL
  LD (VAR_CD86),HL
  RET

; Data block at A188
VAR_A188:
  DEFB $00,$00

; Display the cast animation (cyan line, twirl)
;
; Used by the routines at CAST_WIZARD_BUFF_SPELL, ROUTINE_859C,
; ATTEMPT_RAISE_DEAD, PLAYER_CAST_LOCATIONAL_SPELL, CAST_CREATURE,
; CAST_DISBELIEVE, CAST_TREES_OR_CASTLE and CAST_WALL.
DISPLAY_CAST_ANIMATION:
  LD A,(IX+$02)
  OR A
  JR Z,DISPLAY_CAST_ANIMATION_0
  LD HL,$912B
  LD (SOUND_EFFECT_C2F3),HL
  CALL SOUND_EFFECT
  LD A,$03
  LD (VAR_B60B),A
  CALL MAYBE_FIRE_ATTACK_ANIM
  CALL MAYBE_MARK_ARENA_SQUARES_0
  HALT
DISPLAY_CAST_ANIMATION_0:
  DI
  LD A,$45                ; Set the colours to cyan on black ($45).
  LD ($5C8F),A            ;
  LD HL,VAR_910D_MAYBE_TABLE
  LD (SOUND_EFFECT_C2F3),HL
  CALL SOUND_EFFECT
  LD HL,$A1E8
  LD (VAR_A1E6_MAYBE_TABLE),HL
  LD HL,(LOCATION_TARGET)
  LD (VAR_E005_MAYBE_ARENA_COORDS),HL
  CALL MAYBE_FIND_ARENA_COORDS
  LD (VAR_DF4C),HL
  LD B,$12
DISPLAY_CAST_ANIMATION_1:
  PUSH BC
  LD HL,(VAR_A1E6_MAYBE_TABLE)
  LD E,(HL)
  INC HL
  LD D,(HL)
  INC HL
  LD (VAR_A1E6_MAYBE_TABLE),HL
  EX DE,HL
  LD (VAR_DF4A),HL
  CALL MAYBE_ANIMATION
  CALL SOUND_EFFECT_1
  POP BC
  DJNZ DISPLAY_CAST_ANIMATION_1
  CALL MAYBE_MARK_ARENA_SQUARES_0
  EI
  HALT
  RET

; Data block at A1E6
VAR_A1E6_MAYBE_TABLE:
  DEFB $0C,$A2,$0C,$A2,$2C,$A2,$4C,$A2
  DEFB $6C,$A2,$0C,$A2,$2C,$A2,$4C,$A2
  DEFB $6C,$A2,$0C,$A2,$2C,$A2,$4C,$A2
  DEFB $6C,$A2,$8C,$A2,$AC,$A2,$CD,$A2
  DEFB $E5,$A2,$05,$A3,$25,$A3

; Graphics - cast twirl
GRAPHICS_TWIRL:
  DEFB $01,$01,$01,$01,$01,$01,$00,$FC
  DEFB $80,$80,$80,$80,$80,$80,$00,$3F
  DEFB $FC,$00,$01,$01,$01,$01,$01,$01
  DEFB $3F,$00,$80,$80,$80,$80,$80,$80
  DEFB $00,$00,$00,$60,$F8,$3E,$0C,$00
  DEFB $10,$18,$38,$30,$70,$60,$20,$00
  DEFB $00,$04,$06,$0E,$0C,$1C,$18,$08
  DEFB $00,$30,$7C,$1F,$06,$00,$00,$00
  DEFB $00,$00,$30,$38,$1C,$0E,$06,$00
  DEFB $00,$00,$0C,$1C,$38,$70,$60,$00
  DEFB $00,$06,$0E,$1C,$38,$30,$00,$00
  DEFB $00,$60,$70,$38,$1C,$0C,$00,$00
  DEFB $08,$18,$1C,$0C,$0E,$06,$04,$00
  DEFB $00,$00,$00,$06,$1F,$7C,$30,$00
  DEFB $00,$0C,$3E,$F8,$60,$00,$00,$00
  DEFB $00,$20,$60,$70,$30,$38,$18,$10
  DEFB $01,$01,$01,$01,$01,$00,$00,$F8
  DEFB $80,$80,$80,$80,$80,$00,$00,$1F
  DEFB $F8,$00,$00,$01,$01,$01,$01,$01
  DEFB $1F,$00,$00,$80,$80,$80,$80,$80
  DEFB $00,$00,$00,$60,$F8,$38,$00,$00
  DEFB $10,$18,$38,$30,$30,$00,$00,$00
  DEFB $00,$00,$00,$0C,$0C,$1C,$18,$18
  DEFB $08,$00,$00,$1C,$1F,$06,$00,$00
  DEFB $00,$00,$60,$70,$30,$00,$00,$00
  DEFB $00,$00,$06,$0E,$0C,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$0C,$0E,$06
  DEFB $00,$08,$18,$18,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$06,$07,$00,$00
  DEFB $00,$00,$00,$00,$E0,$60,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$18,$18
  DEFB $10,$01,$00,$00,$00,$00,$00,$00
  DEFB $80,$80,$00,$00,$00,$00,$00,$00
  DEFB $01,$80,$00,$00,$00,$00,$00,$00
  DEFB $01,$01,$00,$00,$00,$00,$00,$00
  DEFB $80,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00

; Graphics - explosion
GRAPHICS_EXPLOSION:
  DEFB $00,$00,$00,$00,$02,$0A,$07,$0F
  DEFB $00,$00,$00,$00,$A0,$C0,$E0,$C0
  DEFB $07,$0A,$05,$00,$00,$00,$00,$00
  DEFB $E0,$C0,$40,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$02,$12,$0A,$07,$3D
  DEFB $00,$00,$00,$90,$A0,$C0,$F0,$40
  DEFB $07,$1A,$05,$09,$00,$00,$00,$00
  DEFB $E0,$D0,$40,$40,$00,$00,$00,$00
  DEFB $00,$02,$02,$22,$12,$0B,$06,$7D
  DEFB $00,$00,$48,$90,$A0,$C0,$B8,$40
  DEFB $06,$1B,$25,$09,$11,$01,$00,$00
  DEFB $E0,$D0,$48,$40,$20,$00,$00,$00
  DEFB $02,$02,$42,$22,$10,$0B,$06,$F8
  DEFB $00,$44,$48,$90,$A0,$40,$AC,$40
  DEFB $06,$19,$64,$09,$11,$21,$01,$00
  DEFB $A0,$50,$48,$44,$20,$20,$00,$00
  DEFB $02,$82,$42,$22,$00,$0A,$04,$D0
  DEFB $22,$44,$48,$80,$A0,$00,$AB,$00
  DEFB $04,$11,$60,$81,$11,$21,$41,$81
  DEFB $80,$50,$00,$44,$22,$21,$10,$00
  DEFB $02,$82,$00,$20,$12,$00,$00,$A0
  DEFB $22,$44,$00,$90,$00,$00,$12,$00
  DEFB $00,$08,$41,$80,$01,$00,$41,$81
  DEFB $00,$40,$28,$00,$22,$01,$10,$10
  DEFB $02,$80,$00,$22,$00,$00,$00,$80
  DEFB $22,$00,$48,$00,$00,$00,$09,$00
  DEFB $00,$00,$10,$80,$00,$01,$00,$81
  DEFB $00,$00,$00,$24,$00,$11,$00,$10

; Data block at A425
  DEFB $B0,$01,$53,$55,$42,$5F,$44,$CF
  DEFB $9C,$85,$46,$AC,$4D,$A4,$01,$44
  DEFB $5F,$41,$44,$C4,$14,$AC,$1F,$AC
  DEFB $CB,$A4,$01,$54,$45,$4D,$41,$44
  DEFB $C4,$8B,$C7,$80,$A5,$54,$AE,$01
  DEFB $45,$4E,$5F,$41,$CE,$BC,$C7,$DB
  DEFB $A5,$30,$A8,$01,$49,$4E,$42,$55
  DEFB $C6,$F2,$D3,$98,$B5,$00,$00,$01
  DEFB $42,$55,$46,$50,$4E,$D4,$86,$CD
  DEFB $00,$00,$23,$A8,$01,$53,$52,$54
  DEFB $43,$4E,$D4,$BB,$C7,$00,$00,$56
  DEFB $A8,$01,$53,$4F,$52,$D4,$4C,$C6
  DEFB $BE,$A4,$00,$00,$01,$42,$41,$52
  DEFB $54,$5F,$CC,$57,$85,$D8,$A4,$5E
  DEFB $AC,$01,$47,$45,$54,$50,$4C,$C1
  DEFB $7E,$A1,$73,$A5,$B1,$A4,$01,$4F
  DEFB $4B,$5F,$53,$55,$C2,$67,$85,$79
  DEFB $A9,$F8,$A9,$01,$50,$41,$55,$53
  DEFB $45,$D2,$E6,$96,$B7,$A7,$00,$00
  DEFB $01,$42,$41,$4C,$53,$55,$D0,$A5
  DEFB $85,$59,$A5,$8D,$A5,$01,$54,$4F
  DEFB $46,$41,$49,$CC,$CA,$85,$D5,$AE
  DEFB $21,$A9,$01,$47,$45,$54,$43,$48
  DEFB $D2,$0A,$BE,$00,$00,$00,$00,$01
  DEFB $53,$54,$52,$45,$4E,$C7,$72,$A1
  DEFB $25,$A5,$0B,$A5,$01,$52,$41,$4E
  DEFB $44,$D9,$4B,$90,$1E,$AB,$FC,$A7
  DEFB $01,$59,$45,$53,$53,$55,$C2,$D3
  DEFB $85,$36,$A6,$3F,$A5,$01,$52,$41
  DEFB $53,$41,$52,$D4,$39,$86,$96,$A8
  DEFB $32,$A5,$01,$52,$41,$49,$4C,$4F
  DEFB $CF,$04,$86,$00,$00,$EE,$AA,$01
  DEFB $52,$41,$49,$5F,$43,$C8,$1A,$86
  DEFB $00,$00,$00,$00,$01,$52,$41,$49
  DEFB $53,$44,$CF,$C3,$86,$4C,$A5,$16
  DEFB $A8,$01,$52,$41,$53,$4C,$4F,$CF
  DEFB $47,$86,$00,$00,$00,$00,$01,$52
  DEFB $41,$53,$42,$41,$CB,$76,$86,$A5
  DEFB $AB,$00,$00,$01,$54,$48,$52,$54
  DEFB $41,$C2,$D4,$C6,$49,$A7,$A7,$A5
  DEFB $01,$4C,$4F,$4F,$52,$41,$D3,$8D
  DEFB $86,$4F,$A6,$00,$00,$01,$4F,$4B
  DEFB $5F,$52,$41,$D3,$9A,$86,$05,$AA
  DEFB $3D,$A8,$01,$45,$4E,$44,$52,$41
  DEFB $D3,$EB,$86,$EB,$A9,$B7,$A9,$01
  DEFB $54,$55,$52,$41,$52,$D4,$F9,$86
  DEFB $00,$00,$00,$00,$01,$54,$55,$52
  DEFB $5F,$44,$CF,$41,$87,$00,$00,$5C
  DEFB $A6,$01,$4C,$4F,$4F,$54,$55,$D2
  DEFB $1A,$87,$00,$00,$8F,$AB,$01,$41
  DEFB $44,$44,$5F,$4F,$CE,$2B,$87,$79
  DEFB $A7,$EC,$AC,$01,$43,$52,$45,$30
  DEFB $30,$B0,$3C,$87,$5E,$AB,$F5,$A5
  DEFB $01,$46,$4C,$41,$34,$38,$B1,$3D
  DEFB $87,$D1,$A9,$2E,$A9,$01,$48,$49
  DEFB $44,$36,$34,$B1,$3E,$87,$00,$00
  DEFB $4F,$B4,$01,$42,$4F,$44,$38,$30
  DEFB $B1,$3F,$87,$68,$AA,$68,$B2,$01
  DEFB $46,$52,$41,$33,$32,$B1,$40,$87
  DEFB $00,$00,$00,$00,$01,$46,$55,$43
  DEFB $4B,$49,$D4,$EB,$87,$12,$AB,$00
  DEFB $00,$01,$57,$41,$4C,$4B,$59,$D3
  DEFB $73,$A1,$29,$A6,$76,$A6,$01,$4D
  DEFB $4F,$4C,$4C,$4F,$CF,$56,$87,$C0
  DEFB $B2,$00,$00,$01,$4D,$4F,$4C,$45
  DEFB $4E,$C4,$DF,$87,$78,$AC,$43,$A6
  DEFB $01,$52,$41,$4E,$4D,$4F,$CC,$84
  DEFB $87,$00,$00,$00,$00,$01,$52,$41
  DEFB $4E,$55,$CD,$7A,$90,$55,$A7,$05
  DEFB $B2,$01,$4F,$46,$42,$4F,$52,$C4
  DEFB $0E,$98,$69,$A6,$0E,$B5,$01,$4D
  DEFB $32,$50,$52,$49,$CE,$EF,$87,$50
  DEFB $AA,$00,$00,$01,$4D,$32,$45,$53
  DEFB $41,$C7,$09,$88,$43,$AA,$80,$A6
  DEFB $01,$4D,$5F,$B1,$59,$88,$D0,$A6
  DEFB $8A,$A6,$01,$4D,$5F,$B2,$75,$88
  DEFB $3E,$A7,$94,$A6,$01,$4D,$5F,$B3
  DEFB $85,$88,$00,$00,$9E,$A6,$01,$4D
  DEFB $5F,$B4,$97,$88,$00,$00,$A8,$A6
  DEFB $01,$4D,$5F,$B5,$A6,$88,$00,$00
  DEFB $B2,$A6,$01,$4D,$5F,$B6,$AD,$88
  DEFB $00,$00,$BC,$A6,$01,$4D,$5F,$B7
  DEFB $C2,$88,$00,$00,$C6,$A6,$01,$4D
  DEFB $5F,$B8,$C5,$88,$00,$00,$AB,$A7
  DEFB $01,$4D,$5F,$B9,$C7,$88,$00,$00
  DEFB $DB,$A6,$01,$4D,$5F,$31,$B0,$E2
  DEFB $88,$00,$00,$E6,$A6,$01,$4D,$5F
  DEFB $31,$B1,$FE,$88,$00,$00,$F1,$A6
  DEFB $01,$4D,$5F,$31,$B2,$0C,$89,$00
  DEFB $00,$FC,$A6,$01,$4D,$5F,$31,$B3
  DEFB $1A,$89,$00,$00,$07,$A7,$01,$4D
  DEFB $5F,$31,$B4,$2B,$89,$00,$00,$12
  DEFB $A7,$01,$4D,$5F,$31,$B5,$41,$89
  DEFB $00,$00,$1D,$A7,$01,$4D,$5F,$31
  DEFB $B6,$4F,$89,$00,$00,$28,$A7,$01
  DEFB $4D,$5F,$31,$B7,$5D,$89,$00,$00
  DEFB $33,$A7,$01,$4D,$5F,$31,$B8,$79
  DEFB $89,$00,$00,$00,$00,$01,$4D,$5F
  DEFB $31,$B9,$87,$89,$00,$00,$00,$00
  DEFB $01,$4D,$5F,$32,$B0,$97,$89,$37
  DEFB $AB,$12,$AA,$01,$4C,$45,$56,$45
  DEFB $CC,$A7,$89,$09,$A8,$82,$AA,$01
  DEFB $4E,$55,$CD,$A8,$89,$00,$00,$00
  DEFB $00,$01,$47,$41,$4D,$54,$55,$CE
  DEFB $A9,$89,$51,$AC,$2C,$AC,$01,$50
  DEFB $4F,$53,$50,$52,$C9,$AC,$89,$E0
  DEFB $A8,$00,$00,$01,$43,$4F,$55,$4E
  DEFB $54,$CC,$AE,$89,$9F,$A7,$00,$00
  DEFB $01,$4B,$45,$59,$5F,$D0,$AF,$89
  DEFB $5F,$A9,$20,$AE,$01,$43,$48,$4F
  DEFB $4E,$55,$CD,$B0,$89,$3B,$A9,$CB
  DEFB $AF,$01,$4B,$45,$59,$49,$D4,$B1
  DEFB $89,$D9,$A7,$FA,$A8,$01,$4E,$4F
  DEFB $41,$44,$C4,$CF,$89,$BB,$A8,$E2
  DEFB $AE,$01,$41,$54,$54,$52,$5F,$D4
  DEFB $8F,$5C,$00,$00,$CD,$B2,$01,$44
  DEFB $48,$5F,$D0,$D6,$BA,$16,$AC,$8F
  DEFB $AA,$01,$53,$36,$B0,$EF,$89,$04
  DEFB $B4,$14,$A9,$01,$4E,$4B,$45,$59
  DEFB $B2,$7B,$90,$EF,$A7,$C7,$A8,$01
  DEFB $43,$4C,$D3,$EE,$C5,$00,$00,$00
  DEFB $00,$01,$43,$48,$5F,$4C,$41,$D7
  DEFB $A4,$C3,$62,$A8,$00,$00,$01,$5A
  DEFB $52,$44,$52,$5F,$D0,$57,$BB,$49
  DEFB $A8,$20,$B6,$01,$4E,$4F,$5F,$50
  DEFB $4C,$C1,$0F,$AC,$00,$00,$00,$00
  DEFB $01,$52,$45,$50,$57,$41,$D4,$C2
  DEFB $8A,$18,$B3,$00,$00,$01,$53,$54
  DEFB $41,$4C,$4F,$CF,$D8,$8A,$85,$A9
  DEFB $00,$00,$01,$49,$4E,$50,$4C,$4F
  DEFB $CF,$19,$8B,$00,$00,$00,$00,$01
  DEFB $45,$4E,$54,$45,$D2,$95,$8B,$7C
  DEFB $A8,$46,$B3,$01,$4E,$4F,$5F,$44
  DEFB $45,$CC,$56,$8B,$00,$00,$B2,$AB
  DEFB $01,$53,$50,$41,$43,$C5,$6F,$8B
  DEFB $6F,$A8,$2B,$AA,$01,$59,$5F,$4F
  DEFB $52,$5F,$CE,$CA,$8B,$00,$00,$7F
  DEFB $B5,$01,$59,$45,$53,$5F,$43,$C3
  DEFB $DF,$8B,$BE,$B5,$B7,$B4,$01,$4E
  DEFB $4F,$54,$5F,$43,$C3,$F8,$8B,$00
  DEFB $00,$82,$AB,$01,$57,$49,$5A,$43
  DEFB $4F,$CE,$26,$AC,$44,$AB,$00,$00
  DEFB $01,$50,$5F,$57,$49,$5A,$CC,$29
  DEFB $8C,$48,$A9,$A6,$AA,$01,$52,$4F
  DEFB $4D,$D0,$DF,$90,$42,$AF,$92,$B6
  DEFB $01,$50,$52,$5F,$43,$48,$D2,$F0
  DEFB $90,$43,$B0,$1E,$AA,$01,$41,$54
  DEFB $54,$41,$C2,$D7,$90,$00,$00,$10
  DEFB $AF,$01,$43,$4F,$4C,$4F,$CF,$97
  DEFB $8C,$00,$00,$00,$00,$01,$50,$55
  DEFB $54,$41,$54,$CC,$DD,$8C,$00,$00
  DEFB $C6,$AD,$01,$43,$4F,$4D,$50,$41
  DEFB $D2,$49,$90,$6B,$AC,$00,$00,$01
  DEFB $4D,$41,$4B,$43,$48,$D2,$F2,$8C
  DEFB $90,$A9,$D1,$B1,$01,$4E,$4F,$54
  DEFB $4D,$4F,$D2,$53,$8D,$00,$00,$85
  DEFB $AD,$01,$53,$50,$45,$4C,$4E,$CF
  DEFB $4A,$90,$00,$00,$00,$00,$01,$4E
  DEFB $4F,$41,$42,$49,$CC,$7A,$8D,$00
  DEFB $00,$84,$AC,$01,$47,$45,$54,$48
  DEFB $49,$D3,$AA,$92,$D6,$AA,$92,$AD
  DEFB $01,$48,$49,$53,$50,$45,$CC,$54
  DEFB $91,$F8,$AE,$DE,$A9,$01,$49,$4E
  DEFB $53,$50,$4C,$CF,$9E,$8D,$00,$00
  DEFB $CC,$AC,$01,$52,$49,$4E,$C4,$9F
  DEFB $8D,$00,$00,$2A,$AB,$01,$43,$55
  DEFB $52,$53,$D0,$7B,$93,$C4,$A9,$ED
  DEFB $AD,$01,$43,$48,$41,$4E,$5F,$C3
  DEFB $F9,$92,$6D,$B3,$A5,$B5,$01,$44
  DEFB $4F,$4E,$53,$4F,$D2,$08,$8E,$00
  DEFB $00,$C1,$B0,$01,$4F,$55,$54,$4C
  DEFB $DF,$E4,$8D,$BF,$AA,$00,$00,$01
  DEFB $49,$4E,$4C,$DF,$E8,$8D,$8E,$B2
  DEFB $11,$AD,$01,$4E,$4F,$42,$49,$47
  DEFB $C1,$01,$8E,$00,$00,$00,$00,$01
  DEFB $53,$54,$41,$50,$4F,$D3,$9F,$90
  DEFB $00,$00,$00,$00,$01,$50,$55,$54
  DEFB $49,$42,$CF,$32,$8E,$00,$00,$00
  DEFB $00,$01,$54,$55,$52,$4C,$4F,$CF
  DEFB $62,$8E,$78,$AD,$00,$00,$01,$43
  DEFB $41,$53,$54,$5F,$D3,$68,$91,$00
  DEFB $00,$5C,$AA,$01,$47,$4F,$5F,$45
  DEFB $4E,$C4,$93,$8E,$00,$00,$9C,$B0
  DEFB $01,$49,$4E,$54,$45,$52,$CF,$50
  DEFB $9F,$E1,$AA,$75,$AA,$01,$54,$52
  DEFB $45,$50,$55,$D4,$9A,$8F,$00,$00
  DEFB $FA,$AA,$01,$50,$41,$55,$53,$5F
  DEFB $CC,$81,$8E,$5D,$B0,$82,$B0,$01
  DEFB $45,$4E,$44,$47,$41,$CD,$04,$8F
  DEFB $99,$AB,$00,$00,$01,$4C,$4F,$4F
  DEFB $50,$D9,$A4,$8E,$00,$00,$00,$00
  DEFB $01,$41,$54,$54,$52,$44,$CF,$8B
  DEFB $8F,$00,$00,$00,$00,$01,$5A,$41
  DEFB $50,$45,$CD,$C8,$8E,$00,$00,$00
  DEFB $00,$01,$44,$45,$44,$45,$C4,$E2
  DEFB $8E,$00,$00,$00,$00,$01,$4D,$50
  DEFB $52,$49,$4E,$D4,$FB,$BA,$00,$00
  DEFB $CC,$AA,$01,$4C,$4F,$50,$59,$B2
  DEFB $0C,$8F,$00,$00,$00,$00,$01,$47
  DEFB $52,$4F,$4E,$CB,$50,$8F,$F0,$AB
  DEFB $69,$B4,$01,$46,$4F,$55,$44,$49
  DEFB $CD,$57,$8F,$DE,$B1,$51,$B2,$01
  DEFB $54,$52,$46,$49,$4C,$CF,$A2,$8F
  DEFB $5D,$B1,$68,$AF,$01,$4E,$5F,$48
  DEFB $45,$52,$C5,$31,$90,$00,$00,$00
  DEFB $00,$01,$53,$36,$B1,$3E,$90,$EB
  DEFB $B1,$D1,$B4,$01,$57,$41,$59,$4C
  DEFB $4F,$CF,$E2,$8F,$00,$00,$00,$00
  DEFB $01,$52,$55,$4E,$44,$D9,$EA,$8F
  DEFB $00,$00,$00,$00,$01,$50,$52,$49
  DEFB $4C,$4F,$CF,$07,$90,$F7,$AC,$8F
  DEFB $AF,$01,$49,$4E,$49,$54,$47,$CF
  DEFB $0F,$90,$00,$00,$CE,$B0,$01,$4C
  DEFB $4F,$D7,$46,$90,$00,$00,$00,$00
  DEFB $01,$48,$49,$47,$C8,$47,$90,$53
  DEFB $B6,$00,$00,$01,$54,$4F,$5F,$56
  DEFB $41,$CC,$48,$90,$00,$00,$00,$00
  DEFB $01,$52,$41,$4E,$44,$CF,$4C,$90
  DEFB $06,$AB,$24,$B3,$01,$50,$4F,$44
  DEFB $45,$D2,$55,$90,$AC,$AD,$00,$00
  DEFB $01,$50,$4F,$44,$45,$C9,$58,$90
  DEFB $20,$B0,$04,$AD,$01,$57,$41,$49
  DEFB $54,$B1,$7E,$90,$75,$AB,$D8,$AB
  DEFB $01,$57,$5F,$54,$41,$C2,$E0,$90
  DEFB $00,$00,$C8,$AE,$01,$43,$5F,$44
  DEFB $41,$54,$C1,$4A,$DF,$07,$AE,$FA
  DEFB $AF,$01,$4C,$43,$5F,$50,$4F,$D3
  DEFB $4C,$DF,$07,$B0,$00,$00,$01,$50
  DEFB $5F,$43,$48,$41,$D2,$4E,$DF,$77
  DEFB $B1,$00,$00,$01,$47,$45,$54,$5F
  DEFB $4C,$C3,$8D,$BC,$E0,$AD,$00,$00
  DEFB $01,$46,$49,$52,$45,$4F,$CE,$56
  DEFB $CC,$00,$00,$00,$00,$01,$53,$31
  DEFB $B0,$9D,$C2,$00,$00,$0C,$B3,$01
  DEFB $57,$4F,$4F,$50,$5F,$C4,$B7,$BF
  DEFB $00,$00,$00,$00,$01,$57,$49,$5A
  DEFB $4B,$49,$CC,$C9,$B3,$CC,$AB,$37
  DEFB $B2,$01,$41,$49,$CD,$B7,$C8,$1D
  DEFB $AF,$2B,$B0,$01,$4C,$4F,$46,$5F
  DEFB $C4,$54,$B7,$00,$00,$35,$AF,$01
  DEFB $54,$45,$4D,$50,$5F,$C3,$77,$BA
  DEFB $BF,$AB,$00,$00,$01,$53,$50,$41
  DEFB $54,$41,$C2,$2A,$CD,$00,$00,$00
  DEFB $00,$01,$53,$50,$41,$44,$41,$D4
  DEFB $3A,$CD,$00,$00,$00,$00,$01,$41
  DEFB $44,$53,$50,$C1,$3C,$CD,$00,$00
  DEFB $00,$00,$01,$58,$5F,$41,$44,$C4
  DEFB $49,$C6,$00,$3E,$41,$32,$8F,$5C
  DEFB $3A,$FF,$FF,$32,$0F,$AC,$21,$F7
  DEFB $FF,$11,$26,$AC,$01,$08,$00,$ED
  DEFB $B0,$CD,$57,$BB,$C3,$36,$AC

; Variable - combat range of the current creature
;
; If 0 we know the combat isn't a ranged combat, otherwise holds the creature's
; range.
COMBAT_RANGE:
  DEFB $00

; Data block at ABFD
VAR_ABFD:
  DEFB $BE,$E0

; Data block at ABFF
VAR_ABFF:
  DEFB $01

; Data block at AC00
VAR_AC00:
  DEFB $00

; Variable - a creature's movement points
MOVEMENT_POINTS:
  DEFB $3E

; Variable - something to do with movement points
MAYBE_TEMP_MOVE_POINTS:
  DEFB $02

; Variable - select square range
SELECT_SQUARE_RANGE:
  DEFB $00

; Data block at AC04
VAR_AC04:
  DEFB $07

; Data block at AC05
VAR_AC05:
  DEFB $06

; Variable - ID of an enemy adjacent to the selected creature
ADJACENT_ENEMY_ID:
  DEFB $01

; Variable - indicates whether the currently selected creature is engaged in
; combat with an enemy
CREATURE_IS_ENGAGED:
  DEFB $00

; A byte of data about an object, taken from arena table 6 (ARENA_STATE_6)
CREATURE_STATUS_FROM_TABLE_6:
  DEFB $00

; A byte of data about an object, taken from arena table 5 (ARENA_STATE_5)
CREATURE_STATUS_FROM_TABLE_5:
  DEFB $00

; Variable - the wizard's XY coords are stored in here during ROUTINE_CA92.
; Also used as the destination for creature movement on a computer player's
; turn.
MAYBE_WIZ_XY_COORDS:
  DEFB $0F,$0A

; Variable - selected creature ID (attacking creature during an attack)
SELECTED_CREATURE_ID:
  DEFB $00

; Variable - the code of the selected wizard object. Often used if he's hidden
; or on a mount.
;
; Value from $29 to $30 representing the object ID of the a wizard.
WIZARD_OBJECT_ID:
  DEFB $00

; Variable - ID of active wizard
;
; Value of 0-7 representing the wizard whose turn it currently is.
CURRENT_WIZARD_ID:
  DEFB $01

; Variable - number of wizards competing in the current game.
;
; Starts counting from 1, unlike the wizard IDs.
NUM_OF_WIZARDS:
  DEFB $02

; A byte of data flags about an object, taken from arena table 4
; (ARENA_STATE_4): controlling wizard, whether it has been disbelieved, undead
; because of raise dead, etc.
CREATURE_STATUS_FLAGS:
  DEFB $01

; Data block at AC11
VAR_AC11:
  DEFB $00

; Pointer to a memory address corresponding to a location in the game state
; info table (ARENA_STATE_1)
;
; When casting a spell or in ranged combat this is the location of the target.
LOCATION_TARGET:
  DEFB $BE,$E0

; Pointer to a memory address corresponding to a location in the game state
; info table (ARENA_STATE_1)
;
; When casting a spell or in ranged combat this is the location of the caster
; or creature firing.
LOCATION_SOURCE:
  DEFB $BD,$E0

; Variables - wizard status values
;
; 8 bytes, one for each wizard, representing the wizard's current state. Each
; bit in the byte has a meaning, as shown in the table.
;
; +-----+-----------+--------------------------------+
; | Bit | Bit value | Upgrade                        |
; +-----+-----------+--------------------------------+
; | 7   | 128       | Magic Armour (also sets bit 6) |
; | 6   | 64        | Magic Shield                   |
; | 5   | 32        | Magic Wings                    |
; | 4   | 16        | Dead                           |
; | 3   | 8         | Shadow Form                    |
; | 2   | 4         | Magic Sword                    |
; | 1   | 2         | Magic Knife                    |
; | 0   | 1         | Magic Knife                    |
; +-----+-----------+--------------------------------+
WIZARD_STATUS_VALUES:
  DEFB $10,$00,$00,$00,$00,$00,$00,$00

; TODO - Unknown wizard status values.
;
; Don't know what this is recording. Set during the routine at ROUTINE_7D04.
UNKNOWN_WIZARD_STATUS_VALUES:
  DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Flags - computer controlled wizards
;
; One for each wizard. 0 if the wizard is player controlled, 1 if they are
; computer controlled.
COMP_CONTROLLED_WIZARDS:
  DEFB $00,$01,$00,$00,$00,$00,$00,$00

; Flag - is current wizard computer controlled
;
; 1 if the wizard whose turn it is is computer controlled - 0 otherwise.
WIZ_IS_COMP_CONTROLLED:
  DEFB $01

; Data block at AC2F
VAR_AC2F:
  DEFB $00

; Data block at AC30
VAR_AC30:
  DEFB $00

; Variable - maybe whether creature can fly. False if set to 0, otherwise true
MAYBE_CREATURE_CAN_FLY:
  DEFB $01

; Stores the last keypress (e.g. X for down = $58)
LAST_KEYPRESS:
  DEFB $57

; Data block at AC33
VAR_AC33:
  DEFB $00

; Variable - holds count of dead wizards in this game
DEAD_WIZARD_COUNT:
  DEFB $01

; Data block at AC35
VAR_AC35:
  DEFB $00

; Wizard turns.
;
; Used by the routine at MAIN_LOOP.
WIZARD_TURN:
  LD A,(NUM_OF_WIZARDS)
  LD B,A
WIZARD_TURN_1:
  PUSH BC
  LD A,(NUM_OF_WIZARDS)
  SUB B
  LD (CURRENT_WIZARD_ID),A
  LD (IDENTIFY_WIZARD_ID),A
  LD HL,WIZARD_STATUS_VALUES ; WIZARD_STATUS_VALUES is the address that stores
                             ; the wizard status flags. Load that address into
                             ; HL.
  LD D,$00                ; DE = current wizard ID.
  LD E,A                  ;
  ADD HL,DE               ; Add DE to HL to get the memory address of the
  LD A,(HL)               ; current wizard's status, then load it into A.
  BIT 4,A                 ; If bit 4 is set (i.e. the wizard is dead) jump to
  JR NZ,WIZARD_TURN_7     ; WIZARD_TURN_7 (skipping his turn).
  LD HL,WIZ_IS_COMP_CONTROLLED ; Set WIZ_IS_COMP_CONTROLLED to 0 (it stores
  LD (HL),$00                  ; whether the current wizard is computer
                               ; controlled).
  LD A,(CURRENT_WIZARD_ID) ; A = current wizard ID
  LD HL,COMP_CONTROLLED_WIZARDS ; The 8 addresses starting at
                                ; COMP_CONTROLLED_WIZARDS store which wizards
                                ; are computer controlled.
  LD D,$00                ; DE = current wizard ID.
  LD E,A                  ;
  ADD HL,DE               ; Add DE to HL to get the memory address indicating
  LD A,(HL)               ; whether the current wizard is computer controlled,
                          ; and load its value into A.
  OR A                    ; If A is 0 (wizard is player controlled), jump to
  JR Z,WIZARD_TURN_2      ; WIZARD_TURN_2.
  LD A,$01                      ; Wizard is computer controlled. Set
  LD (WIZ_IS_COMP_CONTROLLED),A ; WIZ_IS_COMP_CONTROLLED to 1.
WIZARD_TURN_2:
  LD A,$46                ; Set the colours to yellow on black ($46).
  LD ($5C8F),A            ;
  CALL CLEAR_MESSAGE_BAR  ; Clear the message bar.
  LD A,(CURRENT_WIZARD_ID) ; Add $29 to the ID of the active wizard
  ADD A,$29                ; (CURRENT_WIZARD_ID) to get the ID of current
                           ; wizard's name in the string table at
                           ; TABLE_TEXT_MESSAGES_2.
  LD BC,$1600             ; Print the current wizard's name at screen location
  CALL PRINT_MESSAGE_2    ; $1600.
  LD A,$37                ; Print the message with ID $37 ('S TURN).
  CALL PRINT_MESSAGE_2    ;
  CALL MAYBE_MARK_ARENA_SQUARES_0
  HALT
  HALT
  LD A,(CURRENT_WIZARD_ID)
  LD (IDENTIFY_WIZARD_ID),A
  CALL IDENTIFY_WIZARDS_CREATURES
  LD B,$FF
WIZARD_TURN_3:
  PUSH BC
  LD B,$FF
WIZARD_TURN_4:
  DJNZ WIZARD_TURN_4
  POP BC
  DJNZ WIZARD_TURN_3
  CALL MAYBE_MARK_ARENA_SQUARES_0
  CALL WAIT_FOR_KEYPRESS_1 ; Wait for keypress
  LD A,(WIZ_IS_COMP_CONTROLLED) ; If the current wizard is player controlled
  OR A                          ; jump to WIZARD_TURN_6.
  JR Z,WIZARD_TURN_6            ;
  LD B,$3C
WIZARD_TURN_5:
  HALT                    ; Pause for a short moment.
  DJNZ WIZARD_TURN_5      ;
  CALL CLEAR_MESSAGE_BAR  ; Clear the message bar.
  JP COMP_WIZ_TURN        ; Computer controlled wizard takes a turn.
WIZARD_TURN_6:
  CALL CLEAR_MESSAGE_BAR  ; Clear the message bar.
  CALL SELECT_CREATURE_CHECK
  CALL WAIT_FOR_KEYPRESS_2
; This entry point is used by the routine at COMP_WIZ_TURN.
WIZARD_TURN_7:
  POP BC
  DEC B                   ; If there are more wizards to take a turn, jump back
  JP NZ,WIZARD_TURN_1     ; to WIZARD_TURN_1.
  LD HL,VAR_AC33
  LD (HL),$00
  IM 1
  RET

; Wait for the user to select a creature.
;
; Used by the routine at WIZARD_TURN.
SELECT_CREATURE_CHECK:
  LD HL,GRAPHICS_CURSOR_1
  LD ($5C7B),HL
  CALL KEY_INPUT          ; User key input.
  PUSH BC
  CALL $02BF              ; Keyboard ROM subroutine.
  CP $53                  ; S Key
  POP BC
  CALL Z,CREATURE_SELECTED ; Creature selected. Call CREATURE_SELECTED.
  CP $30                  ; 0 key
  JR NZ,SELECT_CREATURE_CHECK
  CALL MAYBE_MARK_ARENA_SQUARES_0
  HALT
  HALT
  CALL CLEAR_MESSAGE_BAR  ; Clear the message bar.
  LD HL,$C27F
  CALL SOUND_EFFECT_0
  EI
  RET

; Creature selected.
;
; Used by the routines at SELECT_CREATURE_CHECK and COMP_WIZ_TURN.
CREATURE_SELECTED:
  CALL FETCH_OBJECT_DATA
  XOR A
  LD (VAR_AC11),A
  LD (VAR_B165_MAYBE_ATTACKING_CREATURE),A
  LD (SELECT_SQUARE_RANGE),A
  LD (CREATURE_IS_ENGAGED),A
  LD (WIZARD_OBJECT_ID),A
  LD (COMBAT_RANGE),A
  LD A,(SELECTED_CREATURE_ID) ; A = selected creature ID
  LD D,A
  LD E,$11                ; A = the creature's movement allowance.
  CALL GET_CREATURE_DATA  ;
  SLA A
  LD (MOVEMENT_POINTS),A
  LD A,D                  ; A = selected creature ID
  CP $13                   ; If A < $13 or A >= $1E(creatures code for
  JP M,CREATURE_SELECTED_0 ; non-flying creatures) jump to CREATURE_SELECTED_0
  CP $1E                   ;
  JP P,CREATURE_SELECTED_0 ;
  LD A,(MOVEMENT_POINTS)     ; Set the selection square range
  INC A                      ; (SELECT_SQUARE_RANGE) to the movement range +1.
  LD (SELECT_SQUARE_RANGE),A ; TODO Why?
CREATURE_SELECTED_0:
  LD A,(SELECTED_CREATURE_ID) ; A = selected creature ID
  SUB $29                  ; If it's not a wizard, jump to CREATURE_SELECTED_2.
  JP M,CREATURE_SELECTED_2 ;
  LD HL,WIZARD_STATUS_VALUES ; A = wizard's status value from the table at
  LD E,A                     ; WIZARD_STATUS_VALUES.
  LD D,$00                   ;
  ADD HL,DE                  ;
  LD A,(HL)                  ;
  BIT 5,A                  ; If the wizard has magic wings, continue.
  JR Z,CREATURE_SELECTED_1 ; Otherwise, jump to CREATURE_SELECTED_1.
  LD A,$0D                   ; Set the range of squares we can select
  LD (SELECT_SQUARE_RANGE),A ; SELECT_SQUARE_RANGE to 13 (six spaces flying).
  JR CREATURE_SELECTED_2  ; Jump to CREATURE_SELECTED_2.
CREATURE_SELECTED_1:
  BIT 3,A                  ; If the wizard has shadow form, continue.
  JR Z,CREATURE_SELECTED_2 ; Otherwise, jump to CREATURE_SELECTED_2.
  LD A,$06                ; Set remaining move points (TODO verify) to 6 (3
  LD (MOVEMENT_POINTS),A  ; spaces)
  LD (VAR_AC35),A
CREATURE_SELECTED_2:
  LD A,(CREATURE_STATUS_FLAGS) ; Get the creature's status flags from
                               ; CREATURE_STATUS_FLAGS.
  BIT 7,A                 ; If bit 7 is set (creature has already moved)
  RET NZ                  ; return.
  LD A,(SELECTED_CREATURE_ID) ; A = selected creature ID
  OR A                    ; If there's no creature at the space, return.
  RET Z                   ;
  SUB $29                  ; If the creature is a wizard, continue. If not,
  JP M,CREATURE_SELECTED_3 ; jump to CREATURE_SELECTED_3.
  LD HL,(CURRENT_WIZARD_ID) ; Compare the selected wizard with the current
  CP L                      ; wizard ID. If they're different, return.
  RET NZ                    ;
  LD A,(SELECTED_CREATURE_ID) ; A = selected creature ID
  LD (WIZARD_OBJECT_ID),A ; Store the selected creature's ID in
                          ; WIZARD_OBJECT_ID (TODO Why?)
  JP CREATURE_SELECTED_9  ; Jump to CREATURE_SELECTED_9.
CREATURE_SELECTED_3:
  LD A,(CREATURE_STATUS_FROM_TABLE_5) ; Get the object status from arena table
                                      ; 5.
  SUB $29                  ; If it's less than $29 (i.e. doesn't contain a
  JP M,CREATURE_SELECTED_7 ; hidden wizard) jump to CREATURE_SELECTED_7.
  LD HL,(CURRENT_WIZARD_ID) ; HL = current wizard ID
  CP L                    ; Compare current wizard ID with ID of wizard at
                          ; space we clicked.
  RET NZ                  ; Return if it's a different wizard.
  LD A,(CREATURE_STATUS_FROM_TABLE_5) ; Get the object status from arena table
                                      ; 5 again.
  LD (WIZARD_OBJECT_ID),A
  LD A,(SELECTED_CREATURE_ID)
  CP $24
  JP P,CREATURE_SELECTED_9
  LD A,$46                ; Set the colours to yellow on black ($46).
  LD ($5C8F),A            ;
  LD A,(WIZ_IS_COMP_CONTROLLED) ; If the current wizard is computer controlled
  OR A                          ; jump to CREATURE_SELECTED_5.
  JR NZ,CREATURE_SELECTED_5     ;
  LD A,$33                ; Print the message with ID $33 (DISMOUNT WIZARD? (Y
  LD BC,$1600             ; OR N)) at screen position $1600.
  CALL PRINT_MESSAGE_2    ;
CREATURE_SELECTED_4:
  CALL $02BF              ; Keyboard ROM subroutine.
  CP $59                   ; If the user pressed Y jump to CREATURE_SELECTED_6.
  JR Z,CREATURE_SELECTED_6 ;
  CP $4E                    ; If the user pressed anything other than N jump
  JR NZ,CREATURE_SELECTED_4 ; back to CREATURE_SELECTED_4.
CREATURE_SELECTED_5:
  XOR A                   ; The user pressed N. The wizard will stay mounted.
  LD (WIZARD_OBJECT_ID),A
  JR CREATURE_SELECTED_7
CREATURE_SELECTED_6:
  XOR A
  LD (SELECT_SQUARE_RANGE),A
  LD A,$01
  LD (MOVEMENT_POINTS),A
  JP CREATURE_SELECTED_9
CREATURE_SELECTED_7:
  LD A,(SELECTED_CREATURE_ID) ; A = selected creature ID
  CP $25                   ; If selected creature is a shadow wood jump to
  JR Z,CREATURE_SELECTED_8 ; CREATURE_SELECTED_8.
  CP $22                  ; If selected creature ID >= $22 (gooey blob, the
  RET P                   ; first non-movable object in the list) return.
CREATURE_SELECTED_8:
  LD A,(CREATURE_STATUS_FLAGS) ; A = ID of the owning wizard.
  AND $07                      ;
  LD HL,(CURRENT_WIZARD_ID) ; HL = current wizard ID
  CP L                    ; If the selected creature isn't owned by the wizard
  RET NZ                  ; whose turn it is, return.
  LD HL,(LOCATION_TARGET) ; A = selected object's status in arena table 4.
  LD DE,$0141             ;
  ADD HL,DE               ;
  LD A,(HL)               ;
  CP $04                  ; If the value is 4 (i.e. the creature is dead)
  RET Z                   ; return.
CREATURE_SELECTED_9:
  CALL CHECK_FOR_ADJACENT_ENEMIES
  LD A,(ADJACENT_ENEMY_ID)
  OR A
  JR Z,CREATURE_SELECTED_10
  LD A,(CREATURE_STATUS_FROM_TABLE_5) ; A = status value from table 5
                                      ; (CREATURE_STATUS_FROM_TABLE_5)
  OR A                       ; If the wizard is hiding in a tree/castle or on a
  JR NZ,CREATURE_SELECTED_10 ; mount jump to CREATURE_SELECTED_10.
  LD A,(SELECTED_CREATURE_ID) ; A = selected creature ID (SELECTED_CREATURE_ID)
  LD D,A
  LD E,$12                ; A = the creature's manoeuvre rating.
  CALL GET_CREATURE_DATA  ;
  LD E,A
  CALL GET_RANDOM_NUM_0_TO_9 ; A = a random number from 0 to 9.
  INC A                   ; If A + 2 >= the creature's manoeuvre rating call
  INC A                   ; ENGAGED_TO_ENEMY.
  CP E                    ;
  CALL P,ENGAGED_TO_ENEMY ;
CREATURE_SELECTED_10:
  LD A,(VAR_AC33)
  OR A
  CALL NZ,ENGAGED_TO_ENEMY
  LD A,(CREATURE_IS_ENGAGED) ; If CREATURE_IS_ENGAGED is set (i.e. the creature
  OR A                       ; is engaged in combat with an enemy) jump to
  JR NZ,CREATURE_SELECTED_14 ; CREATURE_SELECTED_14.
  CALL CLEAR_MESSAGE_BAR  ; Clear the message bar.
  LD A,$44                ; Set the colours to green on black ($44).
  LD ($5C8F),A            ;
  LD A,$3A                ; Print the message with ID $3A (MOVEMENT RANGE=) at
  LD BC,$1600             ; screen position $1600.
  CALL PRINT_MESSAGE_2    ;
  LD A,$46                ; Set the colours to yellow on black ($46).
  LD ($5C8F),A            ;
  LD A,(WIZARD_OBJECT_ID) ; A = wizard object ID, if he's hidden or on a mount
                          ; that's currently been selected.
  OR A                       ; If wizard is hidden or on a mount, jump to
  JR NZ,CREATURE_SELECTED_11 ; CREATURE_SELECTED_11.
  LD A,(SELECTED_CREATURE_ID) ; A = selected creature ID.
CREATURE_SELECTED_11:
  LD D,A
  LD E,$11                ; A = selected the creature's movement allowance.
  CALL GET_CREATURE_DATA  ;
  LD E,A
  LD A,(SELECT_SQUARE_RANGE)
  OR A
  JR Z,CREATURE_SELECTED_12
  SRL A
  LD E,A
CREATURE_SELECTED_12:
  LD A,E
  ADD A,$30               ; Add $30 to get the corresponding character code for
  CALL PRINT_SINGLE_CHAR  ; the movement allowance and print it to screen.
  LD HL,$C2CF
  CALL SOUND_EFFECT_0
  EI
  LD A,(WIZ_IS_COMP_CONTROLLED) ; If the current wizard is player controlled
  OR A                          ; jump to CREATURE_SELECTED_14.
  JR Z,CREATURE_SELECTED_14     ;
  LD A,(MAYBE_CREATURE_CAN_FLY) ; If the creature can fly (or is on a flying
  OR A                          ; mount) jump to CREATURE_SELECTED_13.
  JR NZ,CREATURE_SELECTED_13    ;
  CALL ROUTINE_CA92
  JR CREATURE_SELECTED_14
CREATURE_SELECTED_13:
  CALL ROUTINE_C78D
; This entry point is used by the routines at ROUTINE_AF0D_MAYBE_CREATURE_TURN
; and ATTACK_CALC.
CREATURE_SELECTED_14:
  LD BC,(XY_COORDS)
  LD A,(SELECT_SQUARE_RANGE)
  OR A
  JP NZ,FLYING_MOVEMENT
  LD A,(WIZ_IS_COMP_CONTROLLED) ; If the current wizard is player controlled
  OR A                          ; jump to CREATURE_SELECTED_16.
  JR Z,CREATURE_SELECTED_16     ;
  LD A,(MAYBE_CREATURE_CAN_FLY) ; If the creature can fly (or is on a flying
  OR A                          ; mount) jump to CREATURE_SELECTED_15.
  JR NZ,CREATURE_SELECTED_15    ;
  LD A,(VAR_AC30)
  OR A
  CALL Z,ROUTINE_CA92
  JR CREATURE_SELECTED_16
CREATURE_SELECTED_15:
  LD A,(VAR_AC30)
  OR A
  CALL Z,ROUTINE_C8C7
CREATURE_SELECTED_16:
  CALL MOVE_CURSOR_CHECK
; This entry point is used by the routine at FLYING_MOVEMENT.
CREATURE_SELECTED_17:
  LD (MAYBE_WIZ_XY_COORDS),BC
  CALL CONVERT_XY_COORDS
  LD (LOCATION_TARGET),HL
  CALL FETCH_OBJECT_DATA_0
  LD A,(LAST_KEYPRESS)
  CP $49                       ; If the user pressed I, display the creature
  CALL Z,DISPLAY_CREATURE_INFO ; info screen
  CP $4B                     ; If the user pressed anything other than K jump
  JR NZ,CREATURE_SELECTED_18 ; to CREATURE_SELECTED_18.
  LD HL,$C2B1
  CALL SOUND_EFFECT_0
  EI
  JP ROUTINE_AF0D_MAYBE_CREATURE_TURN_9
CREATURE_SELECTED_18:
  LD HL,(LOCATION_TARGET)   ; If the user hasn't selected a target square yet,
  LD DE,(LOCATION_SOURCE)   ; jump back to CREATURE_SELECTED_14.
  XOR A                     ;
  SBC HL,DE                 ;
  JR Z,CREATURE_SELECTED_14 ;
  LD A,(SELECTED_CREATURE_ID)             ; User has chosen a target square. A
  OR A                                    ; = TODO??? SELECTED_CREATURE_ID. If
  JP Z,ROUTINE_AF0D_MAYBE_CREATURE_TURN_1 ; it's 0 jump to
                                          ; ROUTINE_AF0D_MAYBE_CREATURE_TURN_1.
  LD HL,(LOCATION_TARGET)
  LD DE,$0141
  ADD HL,DE
  LD A,(HL)
  CP $04
  JP Z,ROUTINE_AF0D_MAYBE_CREATURE_TURN_1
  LD A,(SELECTED_CREATURE_ID)
  CP $24
  JR NZ,CREATURE_SELECTED_19
  LD A,(WIZARD_OBJECT_ID)
  LD L,$0B
  OR A
  JR Z,CREATURE_SELECTED_21
  LD A,(CREATURE_STATUS_FROM_TABLE_5)
  OR A
  JR NZ,CREATURE_SELECTED_21
  JP ROUTINE_AF0D_MAYBE_CREATURE_TURN_1
CREATURE_SELECTED_19:
  LD A,(SELECTED_CREATURE_ID)
  CP $25
  JR Z,CREATURE_SELECTED_20
  CP $23
  JP P,ROUTINE_AF0D_MAYBE_CREATURE_TURN
CREATURE_SELECTED_20:
  LD A,(CREATURE_STATUS_FLAGS)
  AND $07
  LD HL,(CURRENT_WIZARD_ID)
CREATURE_SELECTED_21:
  CP L
  JP NZ,ATTACK_CALC
  LD A,(WIZARD_OBJECT_ID)
  OR A
  JP Z,CREATURE_SELECTED_14
  LD A,(SELECTED_CREATURE_ID) ; A = selected creature ID (SELECTED_CREATURE_ID)
  CP $10                    ; If A < $10 or A >= $16 (TODO the selected
  JP M,CREATURE_SELECTED_14 ; creature is not mountable, maybe?) jump to
  CP $16                    ; CREATURE_SELECTED_14.
  JP P,CREATURE_SELECTED_14 ;
  JR ROUTINE_AF0D_MAYBE_CREATURE_TURN_1

; Data block at AF03
  DEFB $FE,$24,$20,$06,$3A,$0D,$AC,$B7
  DEFB $20,$43

; Maybe creature turn routine?
;
; Used by the routine at CREATURE_SELECTED.
ROUTINE_AF0D_MAYBE_CREATURE_TURN:
  LD A,(SELECTED_CREATURE_ID)
  CP $26
  JP M,ROUTINE_AF0D_MAYBE_CREATURE_TURN_0
  CP $28
  JP P,ROUTINE_AF0D_MAYBE_CREATURE_TURN_0
  LD A,(WIZARD_OBJECT_ID)
  OR A
  JR Z,ROUTINE_AF0D_MAYBE_CREATURE_TURN_0
  LD A,(CREATURE_STATUS_FLAGS)
  AND $07
  LD HL,(CURRENT_WIZARD_ID)
  CP L
  JR Z,ROUTINE_AF0D_MAYBE_CREATURE_TURN_1
ROUTINE_AF0D_MAYBE_CREATURE_TURN_0:
  LD A,(SELECTED_CREATURE_ID)
  CP $29
  JP M,CREATURE_SELECTED_14
  LD HL,(LOCATION_SOURCE) ; HL = location source (LOCATION_SOURCE)
  LD A,(HL)               ; A = ID of creature at source (usually attacking
                          ; creature?)
  CP $29                  ; If A > $29 (is a wizard) jump to ATTACK_CALC,
  JP P,ATTACK_CALC        ; attack calculation
  LD DE,$01E1             ; A = corresponding data in arena table 4.
  ADD HL,DE               ;
  LD A,(HL)               ;
  AND $07                 ; Reset everything but the least 3 significant bits,
                          ; which are the ones storing the owning wizard's ID.
  LD E,A                  ; E = ID of the attacked creature's wizard
  LD A,(SELECTED_CREATURE_ID) ; A = ID of the attacked creature
  SUB $29                 ; If the attacking creature is not owned by the
  CP E                    ; wizard it's attacking, jump to ATTACK_CALC, attack
  JP NZ,ATTACK_CALC       ; calculation.
  JP CREATURE_SELECTED_14 ; Can't attack your own wizard - jump back to
                          ; CREATURE_SELECTED_14.
; This entry point is used by the routines at CREATURE_SELECTED and
; ATTACK_CALC.
ROUTINE_AF0D_MAYBE_CREATURE_TURN_1:
  LD A,(CREATURE_IS_ENGAGED) ; If CREATURE_IS_ENGAGED is set (i.e. the creature
  OR A                       ; is engaged in combat with an enemy) jump to
  JP NZ,CREATURE_SELECTED_14 ; CREATURE_SELECTED_14.
  LD A,$00
  LD (VAR_AC30),A
  LD BC,(MAYBE_WIZ_XY_COORDS)
  LD (XY_COORDS),BC
  LD HL,(LOCATION_SOURCE) ; A = ID of the selected creature.
  LD A,(HL)               ;
  CP $25                                  ; If selected creature is a shadow
  JP Z,ROUTINE_AF0D_MAYBE_CREATURE_TURN_9 ; wood jump to
                                          ; ROUTINE_AF0D_MAYBE_CREATURE_TURN_9.
  LD (SELECTED_CREATURE_ID),A
  LD E,A
  LD A,(WIZARD_OBJECT_ID)
  CP E
  JR Z,ROUTINE_AF0D_MAYBE_CREATURE_TURN_2
  OR A
  JR Z,ROUTINE_AF0D_MAYBE_CREATURE_TURN_2
  LD (SELECTED_CREATURE_ID),A
  LD HL,(LOCATION_SOURCE)
  LD DE,$0281
  XOR A
  ADD HL,DE
  LD (HL),A
  JR ROUTINE_AF0D_MAYBE_CREATURE_TURN_3
ROUTINE_AF0D_MAYBE_CREATURE_TURN_2:
  LD HL,(LOCATION_SOURCE) ; A = corresponding selected creature's entry in
  LD DE,$0321             ; arena table 6.
  ADD HL,DE               ;
  LD A,(HL)               ;
  OR A                                    ; If A == 0 jump to
  JR Z,ROUTINE_AF0D_MAYBE_CREATURE_TURN_4 ; ROUTINE_AF0D_MAYBE_CREATURE_TURN_4.
  LD HL,(LOCATION_SOURCE)
  LD (HL),A
  LD DE,$00A1
  ADD HL,DE
  LD A,$01
  LD (HL),A
  DEC E
  ADD HL,DE
  LD A,$04
  LD (HL),A
ROUTINE_AF0D_MAYBE_CREATURE_TURN_3:
  LD HL,(LOCATION_SOURCE) ; A = creature's ID in arena table 4.
  LD DE,$01E1             ;
  ADD HL,DE               ;
  LD A,(HL)               ;
  LD (CREATURE_STATUS_FLAGS),A ; Set the creature's status flags
                               ; (CREATURE_STATUS_FLAGS).
  LD DE,$00A0             ; Point HL to the corresponding space in arena table
  ADD HL,DE               ; 5.
  LD A,(HL)                           ; Save the creature data from table 5 to
  LD (CREATURE_STATUS_FROM_TABLE_5),A ; CREATURE_STATUS_FROM_TABLE_5, then set
  XOR A                               ; that space in arena table 5 to 0.
  LD (HL),A                           ;
  JR ROUTINE_AF0D_MAYBE_CREATURE_TURN_5
ROUTINE_AF0D_MAYBE_CREATURE_TURN_4:
  LD HL,(LOCATION_SOURCE)
  LD A,$01
  LD (HL),A
  LD DE,$00A1
  ADD HL,DE
  LD (HL),A
  JR ROUTINE_AF0D_MAYBE_CREATURE_TURN_3
ROUTINE_AF0D_MAYBE_CREATURE_TURN_5:
  LD HL,(LOCATION_TARGET)
  LD A,(HL)
  OR A
  JR Z,ROUTINE_AF0D_MAYBE_CREATURE_TURN_6
  LD DE,$0141
  ADD HL,DE
  LD A,(HL)
  CP $04
  JR Z,ROUTINE_AF0D_MAYBE_CREATURE_TURN_6
  DEC E
  LD A,(WIZARD_OBJECT_ID)
  ADD HL,DE
  LD (HL),A
  JR ROUTINE_AF0D_MAYBE_CREATURE_TURN_7
ROUTINE_AF0D_MAYBE_CREATURE_TURN_6:
  LD HL,(LOCATION_TARGET) ; HL = target location
  LD A,(HL)
  PUSH AF
  LD A,(SELECTED_CREATURE_ID) ; A = selected creature ID (SELECTED_CREATURE_ID)
  LD (HL),A               ; Copy creature ID to the target location
  POP AF
  LD DE,$0321             ; Point HL to the corresponding location in data
  ADD HL,DE               ; table 6 and copy in the selected creature ID.
  LD (HL),A               ;
  LD DE,$0280             ; Subtract $280 from HL to point it to the
  SBC HL,DE               ; corresponding square in arena table 2.
  LD A,$01                ; Set the value in arena table 2 to $01.
  LD (HL),A               ;
  LD DE,$00A0             ; Add $A0 to HL to point it at arena table 3.
  ADD HL,DE               ;
  LD A,$00                ; Set the location in arena table 3 to 0.
  LD (HL),A               ;
  ADD HL,DE               ; Add another $A0 to point HL at arena table 4.
  LD A,(CREATURE_STATUS_FLAGS) ; Copy the creature's stats from
  LD (HL),A                    ; CREATURE_STATUS_FLAGS to arena table 4.
  ADD HL,DE               ; Add another $A0 to point HL at arena table 5.
  LD A,(CREATURE_STATUS_FROM_TABLE_5) ; Copy the creature's stats from
  LD (HL),A                           ; CREATURE_STATUS_FROM_TABLE_5 to arena
                                      ; table 5.
ROUTINE_AF0D_MAYBE_CREATURE_TURN_7:
  LD HL,$C261
  CALL SOUND_EFFECT_0
  EI
  LD HL,(LOCATION_TARGET)
  LD (LOCATION_SOURCE),HL
  LD A,(VAR_B165_MAYBE_ATTACKING_CREATURE)
  OR A
  JR NZ,ROUTINE_AF0D_MAYBE_CREATURE_TURN_9
  LD A,(HL)
  CP $24
  JR Z,ROUTINE_AF0D_MAYBE_CREATURE_TURN_8
  CALL CHECK_FOR_ADJACENT_ENEMIES
  LD A,(ADJACENT_ENEMY_ID)
  OR A
  CALL NZ,ENGAGED_TO_ENEMY
  CALL WAIT_FOR_KEYPRESS_2
  LD A,(CREATURE_IS_ENGAGED) ; If CREATURE_IS_ENGAGED is set (i.e. the creature
  OR A                       ; is engaged in combat with an enemy) jump to
  JP NZ,CREATURE_SELECTED_14 ; CREATURE_SELECTED_14.
  LD A,(SELECT_SQUARE_RANGE)
  OR A
  JR NZ,ROUTINE_AF0D_MAYBE_CREATURE_TURN_9
ROUTINE_AF0D_MAYBE_CREATURE_TURN_8:
  CALL WAIT_FOR_KEYPRESS_2
  LD A,(MAYBE_TEMP_MOVE_POINTS)
  LD E,A
  LD A,(MOVEMENT_POINTS)
  SUB E
  JP M,ROUTINE_AF0D_MAYBE_CREATURE_TURN_9
  JR Z,ROUTINE_AF0D_MAYBE_CREATURE_TURN_9
  LD (MOVEMENT_POINTS),A
  CALL CLEAR_MESSAGE_BAR  ; Clear the message bar.
  LD A,$44                ; Set the colours to green on black ($44).
  LD ($5C8F),A            ;
  LD BC,$1600             ; Print the message with ID $38 (MOVEMENT POINTS
  LD A,$38                ; LEFT=) at screen position $1600.
  CALL PRINT_MESSAGE_2    ;
  LD A,$46                ; Set the colours to yellow on black ($46).
  LD ($5C8F),A            ;
  LD A,(MOVEMENT_POINTS)
  INC A
  SRA A
  ADD A,$30
  CALL PRINT_SINGLE_CHAR
  JP CREATURE_SELECTED_14
; This entry point is used by the routines at CREATURE_SELECTED,
; FLYING_MOVEMENT and ATTACK_CALC.
ROUTINE_AF0D_MAYBE_CREATURE_TURN_9:
  LD HL,(LOCATION_SOURCE) ; HL = location of currently selected creature in
                          ; arena table 1
  LD DE,$01E1             ; HL = corresponding location in arena table 4
  ADD HL,DE               ;
  SET 7,(HL)              ; Set bit 7 to indicate that the creature has moved
                          ; this turn
  CALL CLEAR_MESSAGE_BAR  ; Clear the message bar.
  LD HL,(LOCATION_SOURCE)
  LD A,(HL)
  CP $25
  RET Z
  LD A,$01                      ; Set MAYBE_CREATURE_CAN_FLY, indicating that
  LD (MAYBE_CREATURE_CAN_FLY),A ; the creature can fly.
  XOR A
  LD (VAR_AC35),A
  LD (VAR_AC30),A
  LD (VAR_B165_MAYBE_ATTACKING_CREATURE),A
  LD HL,(LOCATION_SOURCE)
  LD A,(HL)
  OR A
  RET Z
  LD D,(HL)
  LD E,$0F                ; A = the creature's range.
  CALL GET_CREATURE_DATA  ;
  OR A                    ; If the creature doesn't have ranged combat, return.
  RET Z                   ;
  LD (COMBAT_RANGE),A     ; Set COMBAT_RANGE to the creature's range.
  CALL WAIT_FOR_KEYPRESS_2 ; TODO Set up ranged combat?
  JP RANGED_COMBAT        ; Call the ranged combat routine.

; Flying movement.
;
; Used by the routine at CREATURE_SELECTED.
FLYING_MOVEMENT:
  LD A,(VAR_AC11)
  PUSH BC
  OR A
  JR NZ,FLYING_MOVEMENT_0
  LD A,$45                ; Set the colours to cyan on black ($45).
  LD ($5C8F),A            ;
  LD A,$36                ; Print the message with ID $36 ((FLYING)) at screen
  LD BC,$1611             ; position $1611.
  CALL PRINT_MESSAGE_2    ;
  CALL WAIT_FOR_KEYPRESS_2
  CALL WAIT_FOR_KEYPRESS_1 ; Wait for keypress
  LD A,(WIZ_IS_COMP_CONTROLLED) ; If the current wizard is player controlled
  OR A                          ; jump to FLYING_MOVEMENT_0.
  JR Z,FLYING_MOVEMENT_0        ;
  CALL MAYBE_COMP_WIZARD_MOVEMENT
FLYING_MOVEMENT_0:
  CALL CLEAR_MESSAGE_BAR  ; Clear the message bar.
  POP BC
  LD (VAR_AC04),BC
  LD A,(CREATURE_IS_ENGAGED)
  OR A
  JR Z,FLYING_MOVEMENT_1
  LD A,$03                   ; Creature is engaged to an enemy. Set its range
  LD (SELECT_SQUARE_RANGE),A ; (SELECT_SQUARE_RANGE) to 3.
FLYING_MOVEMENT_1:
  LD A,(WIZ_IS_COMP_CONTROLLED) ; If the current wizard is player controlled
  OR A                          ; jump to FLYING_MOVEMENT_2.
  JR Z,FLYING_MOVEMENT_2        ;
  CALL ROUTINE_C9D4_0
  JR FLYING_MOVEMENT_3
FLYING_MOVEMENT_2:
  LD HL,GRAPHICS_CURSOR_WINGS
  LD ($5C7B),HL
  CALL KEY_INPUT          ; User key input.
  CALL $02BF              ; Keyboard ROM subroutine.
  LD (LAST_KEYPRESS),A
FLYING_MOVEMENT_3:
  LD A,(LAST_KEYPRESS)
  CP $49                       ; If the user pressed I show the
  CALL Z,DISPLAY_CREATURE_INFO ;
  CP $4B                  ; If the user pressed anything other than K jump to
  JR NZ,FLYING_MOVEMENT_4 ; FLYING_MOVEMENT_4.
  LD HL,$C2B1             ; User cancelled. Play a sound effect.
  CALL SOUND_EFFECT_0     ;
  EI                      ;
  LD HL,(LOCATION_SOURCE)
  LD (LOCATION_TARGET),HL
  JP ROUTINE_AF0D_MAYBE_CREATURE_TURN_9
FLYING_MOVEMENT_4:
  CP $53                  ; If the user pressed anything other than S jump to
  JR NZ,FLYING_MOVEMENT_1 ; FLYING_MOVEMENT_1.
  LD BC,(VAR_AC04)                           ; User pressed S. Check the range.
  LD (VAR_MAYBE_SPELL_SOURCE_COORDS),BC      ;
  LD BC,(XY_COORDS)                          ;
  LD (VAR_MAYBE_SPELL_DESTINATION_COORDS),BC ;
  LD A,(SELECT_SQUARE_RANGE)                 ;
  CALL GET_DISTANCE                          ;
  JP P,FLYING_MOVEMENT_6  ; If it was in range, jump to FLYING_MOVEMENT_6.
  LD A,$46                ; Set the colours to yellow on black ($46).
  LD ($5C8F),A            ;
  LD A,$35                ; Print the message with ID $35 (OUT OF RANGE) at
  LD BC,$1600             ; screen position $1600.
  CALL PRINT_MESSAGE_2    ;
  LD B,$14
FLYING_MOVEMENT_5:
  HALT
  DJNZ FLYING_MOVEMENT_5
  CALL WAIT_FOR_KEYPRESS_1 ; Wait for keypress
  JR FLYING_MOVEMENT_1
FLYING_MOVEMENT_6:
  LD HL,SOUND_EFFECT_C2BB
  CALL SOUND_EFFECT_0
  EI
  LD HL,(VAR_AC04)
  LD BC,(XY_COORDS)
  LD (XY_COORDS),HL
  LD A,$01
  LD (VAR_AC11),A
  JP CREATURE_SELECTED_17

; Attack bonus
ATTACK_BONUS:
  DEFB $00

; Defence bonus
DEFENCE_BONUS:
  DEFB $00

; Variable - 0 if the attacking creature is not undead, otherwise true
ATTACKER_IS_UNDEAD:
  DEFB $00

; Variable - 0 if the attacked creature is not undead, otherwise true
ATTACKED_IS_UNDEAD:
  DEFB $00

; Data block at B165
VAR_B165_MAYBE_ATTACKING_CREATURE:
  DEFB $00

; Data block at B166
VAR_B166:
  DEFB $00

; Data block at B167
VAR_B167:
  DEFB $00

; Attack calculation
;
; Used by the routines at CREATURE_SELECTED, ROUTINE_AF0D_MAYBE_CREATURE_TURN
; and RANGED_COMBAT.
ATTACK_CALC:
  CALL CLEAR_MESSAGE_BAR  ; Clear the message bar.
  LD HL,(LOCATION_TARGET) ; HL = location of the attacked creature
  LD DE,$0321             ; A = value from arena table 6 corresponding to the
  ADD HL,DE               ; attacked creature.
  LD A,(HL)               ;
  LD (MAYBE_ATTACKED_CREATURE_ID),A
  XOR A
  LD (ATTACK_BONUS),A     ; Set ATTACK_BONUS (attack bonus) to 0.
  LD (DEFENCE_BONUS),A    ; Set DEFENCE_BONUS (defence bonus )to 0.
  LD (ATTACKER_IS_UNDEAD),A ; Set ATTACKER_IS_UNDEAD (attacker is undead) to 0.
  LD (ATTACKED_IS_UNDEAD),A ; Set ATTACKED_IS_UNDEAD (attacked creature is
                            ; undead) to 0.
  LD HL,(LOCATION_SOURCE) ; A = ID of the attacking creature.
  LD A,(HL)               ;
  LD (SELECTED_CREATURE_ID),A
  LD (VAR_B165_MAYBE_ATTACKING_CREATURE),A
  CP $1C                  ; If attacking creature's ID < $1C jump to
  JP M,ATTACK_CALC_0      ; ATTACK_CALC_0.
  CP $22                  ; If attacking creature's ID >= $22 jump to
  JP P,ATTACK_CALC_0      ; ATTACK_CALC_0.
  LD (ATTACKER_IS_UNDEAD),A ; The attacking creature is undead. Set
                            ; ATTACKER_IS_UNDEAD.
ATTACK_CALC_0:
  LD HL,(LOCATION_SOURCE) ; Get the info on the attacking creature from arena
  LD DE,$01E1             ; table 4.
  ADD HL,DE               ;
  LD A,(HL)               ;
  BIT 6,A                 ; If bit 6 is 0 (creature is not undead), jump to
  JR Z,ATTACK_CALC_1      ; ATTACK_CALC_1.
  LD (ATTACKER_IS_UNDEAD),A ; The target is undead. Set ATTACKER_IS_UNDEAD.
ATTACK_CALC_1:
  LD A,(SELECTED_CREATURE_ID) ; A = ID of attacked creature
  SUB $29                 ; Subtract $29 - if it's negative - i.e. the creature
  JP M,ATTACK_CALC_3      ; is not a wizard - jump to ATTACK_CALC_3.
  LD HL,WIZARD_STATUS_VALUES ; The attacked creature is a wizard. HL = address
  LD D,$00                   ; of the appropriate wizard's status value byte in
  LD E,A                     ; the small table at WIZARD_STATUS_VALUES.
  ADD HL,DE                  ;
  RES 3,(HL)              ; Set bit 3 to 0, cancelling shadow form.
  PUSH HL
  LD HL,TABLE_CREATURE_DATA_ADDRESSES ; Point HL to the creature's entry in the
  LD A,(SELECTED_CREATURE_ID)         ; table at TABLE_CREATURE_DATA_ADDRESSES.
  DEC A                               ;
  SLA A                               ;
  LD D,$00                            ;
  LD E,A                              ;
  ADD HL,DE                           ;
  LD C,(HL)               ; Load BC with the memory address at which we can
  INC HL                  ; find the creature's name.
  LD B,(HL)               ;
  LD (VAR_B166),BC
  LD IX,(VAR_B166)        ; TODO Possibly changing the colours with which the
  LD A,(IX+$19)           ; target is displayed?
  LD (IX+$1C),A           ;
  LD (IX+$22),A           ;
  POP HL
  LD A,(HL)
  AND $07
  OR A
  JR Z,ATTACK_CALC_2
  LD (ATTACKER_IS_UNDEAD),A
  LD (ATTACK_BONUS),A
ATTACK_CALC_2:
  LD A,(SELECTED_CREATURE_ID)
  LD D,A
  LD E,$0E                ; A = the creature's ranged combat value.
  CALL GET_CREATURE_DATA  ;
  OR A
  JR Z,ATTACK_CALC_3
  LD (ATTACKER_IS_UNDEAD),A
ATTACK_CALC_3:
  LD HL,(LOCATION_TARGET)
  LD A,(HL)               ; A = ID of attacked creature
  CP $1C                  ; If attacked creature's ID is not in the undead
  JP M,ATTACK_CALC_4      ; creature range ($1C to $21) jump to ATTACK_CALC_4.
  CP $22                  ;
  JP P,ATTACK_CALC_4      ;
  LD (ATTACKED_IS_UNDEAD),A ; Attacked creature is undead. Set
                            ; ATTACKED_IS_UNDEAD.
ATTACK_CALC_4:
  LD DE,$01E1             ; A = status value of the attacked creature, from
  ADD HL,DE               ; arena table 4.
  LD A,(HL)               ;
  BIT 6,A                 ; If bit 6 is not set (it's not undead), jump to
  JR Z,ATTACK_CALC_5      ; ATTACK_CALC_5.
  LD (ATTACKED_IS_UNDEAD),A ; Attacked creature is undead. Set
                            ; ATTACKED_IS_UNDEAD.
ATTACK_CALC_5:
  LD HL,(LOCATION_TARGET) ; A = ID of attacked creature
  LD A,(HL)               ;
  SUB $29                 ; If the attacked creature is not a wizard jump to
  JP M,ATTACK_CALC_7      ; ATTACK_CALC_7.
  LD HL,WIZARD_STATUS_VALUES ; Attacked creature is a wizard. Get the wizard's
  LD D,$00                   ; status value from the table at
  LD E,A                     ; WIZARD_STATUS_VALUES.
  ADD HL,DE                  ;
  XOR A                   ; A = wizard's status value.
  LD A,(HL)               ;
  AND $C0
  RLCA
  RLCA
  OR A
  JR Z,ATTACK_CALC_6
  INC A
ATTACK_CALC_6:
  LD (DEFENCE_BONUS),A
  BIT 3,(HL)              ; If bit 3 is zero (i.e. wizard does not have shadow
  JR Z,ATTACK_CALC_7      ; form) jump to ATTACK_CALC_7.
  LD HL,DEFENCE_BONUS     ; Wizard has shadow form. Add 3 to the defence bonus.
  LD A,$03                ;
  ADD A,(HL)              ;
  LD (HL),A               ;
ATTACK_CALC_7:
  LD A,(ATTACKED_IS_UNDEAD) ; If the attacked creature is not undead, jump to
  OR A                      ; ATTACK_CALC_8.
  JR Z,ATTACK_CALC_8        ;
  LD A,(ATTACKER_IS_UNDEAD) ; If the attacking creature is undead, jump to
  OR A                      ; ATTACK_CALC_8.
  JR NZ,ATTACK_CALC_8       ;
  LD A,$45                ; A mortal attacker is attacking the undead. Set the
  LD ($5C8F),A            ; colours to cyan on black ($45).
  LD BC,$1600             ; Print the message with ID $39 (UNDEAD-CANNOT BE
  LD A,$39                ; ATTACKED) at screen position $1600.
  CALL PRINT_MESSAGE_2    ;
  LD HL,$C2D9
  CALL SOUND_EFFECT_0
  EI
  CALL WAIT_FOR_KEYPRESS_2
  CALL WAIT_FOR_KEYPRESS_1 ; Wait for keypress
  CALL CLEAR_MESSAGE_BAR  ; Clear the message bar.
  LD A,(COMBAT_RANGE)
  OR A
  RET NZ
  JP CREATURE_SELECTED_14
ATTACK_CALC_8:
  LD A,(SELECTED_CREATURE_ID) ; A = attacking creature ID
  LD D,A                  ; D = attacking creature ID
  LD E,$0D                ; E = $0D (code for combat value)
  LD A,(COMBAT_RANGE)     ; If this is not ranged combat, jump to
  OR A                    ; ATTACK_CALC_9.
  JR Z,ATTACK_CALC_9      ;
  LD E,$0E                ; E = $0D (code for ranged combat value)
ATTACK_CALC_9:
  CALL GET_CREATURE_DATA  ; A = the attacking creature's combat (or ranged
                          ; combat) value.
  LD HL,ATTACK_BONUS      ; Get attack bonus from ATTACK_BONUS and add it to A.
  ADD A,(HL)              ;
  LD E,A
  CALL GET_RANDOM_NUM_0_TO_9 ; A = a random number from 0 to 9.
  ADD A,E                 ; Add the random number to the previously calculated
                          ; attack value.
  LD C,A                  ; Save the result to C.
  PUSH BC
  LD HL,(LOCATION_TARGET) ; A = the attacked creature's ID.
  LD A,(HL)               ;
  LD D,A                  ; A = the creature's defence.
  LD E,$10                ;
  CALL GET_CREATURE_DATA  ;
  LD HL,DEFENCE_BONUS     ; Get defence bonus from DEFENCE_BONUS and add it to
  ADD A,(HL)              ; A.
  LD E,A                  ; E = Defence result
  CALL WAIT_FOR_KEYPRESS_2
  CALL GET_RANDOM_NUM_0_TO_9 ; A = a random number from 0 to 9.
  ADD A,E                 ; A = A + defence result
  POP BC
  SUB C                   ; A = A (defending creature's defence total) - C
                          ; (attacking creature's attack total)
  PUSH AF
  LD A,(COMBAT_RANGE)     ; A = COMBAT_RANGE (combat range)
  OR A
  JR NZ,ATTACK_CALC_10
  CALL DISPLAY_ATTACK_ANIMATION ; Display attack animation at attacked
                                ; creature's square.
ATTACK_CALC_10:
  POP AF
  JP P,ATTACK_CALC_13     ; If A >= 0, creature survived. Jump to
                          ; ATTACK_CALC_13.
  LD HL,(LOCATION_TARGET) ; The creature did not survive. A = the attacked
  LD DE,$0281             ; creature's data from arena table 5.
  ADD HL,DE               ;
  LD A,(HL)               ;
  OR A
  JR NZ,ATTACK_CALC_11
  LD HL,(LOCATION_TARGET) ; A = ID of attacked creature
  LD A,(HL)               ;
  CP $29                  ; If A >= $29 (creature is a wizard) call
  CALL P,WIZARD_DEATH     ; WIZARD_DEATH.
  CP $1C                  ; Going to work out if the creature leaves a body
  JP P,ATTACK_CALC_14     ; behind. If the creature's ID >= $1C, it doesn't.
  LD DE,$01E1             ; Get the creature's status from arena table 4 and
  ADD HL,DE               ; look in bit 4. If it's an illusion (bit 4 was set)
  LD A,(HL)               ; it won't leave a body behind. Jump to #$B310.
  BIT 4,A                 ;
  JP NZ,ATTACK_CALC_14    ;
  BIT 6,A                 ; If it had been undead through the raise dead spell,
  JP NZ,ATTACK_CALC_14    ; it won't leave behind a body. Jump to #$B310.
  LD A,$FF
  LD (VAR_B165_MAYBE_ATTACKING_CREATURE),A
  JP ATTACK_CALC_14
ATTACK_CALC_11:
  LD E,$00
  LD (HL),E
  LD HL,(LOCATION_TARGET)
  PUSH AF
  LD A,(HL)
  CP $22
  JR NZ,ATTACK_CALC_12
  LD DE,$0321
  ADD HL,DE
  LD A,(HL)
  LD DE,$0140
  SBC HL,DE
  LD (HL),A
ATTACK_CALC_12:
  LD HL,(LOCATION_TARGET)
  POP AF
  LD (HL),A
  LD DE,$0321
  ADD HL,DE
  LD (HL),$00
ATTACK_CALC_13:
  LD HL,(LOCATION_SOURCE)
  LD (LOCATION_TARGET),HL
  LD A,(COMBAT_RANGE)
  OR A
  RET NZ
  JP ROUTINE_AF0D_MAYBE_CREATURE_TURN_9
ATTACK_CALC_14:
  XOR A
  LD (CREATURE_IS_ENGAGED),A ; Set CREATURE_IS_ENGAGED to 0.
  LD (MOVEMENT_POINTS),A  ; Set MOVEMENT_POINTS to 0.
  LD (WIZARD_OBJECT_ID),A ; Set WIZARD_OBJECT_ID to 0.
  LD HL,(LOCATION_TARGET) ; HL = location of attacked creature in arena table 1
  LD A,(VAR_B165_MAYBE_ATTACKING_CREATURE)
  CP $FF
  JR NZ,ATTACK_CALC_15
  LD DE,$00A1             ; Get the corresponding space for the attacked
  ADD HL,DE               ; creature in arena table 2.
  LD (HL),$01             ; Set it to 1. TODO - what does this indicate?
  LD DE,$00A0             ; Point HL to the corresponding space in arena 3.
  ADD HL,DE               ;
  LD (HL),$04             ; Set the value to 4, which indicates a dead body at
                          ; the space.
  HALT
  LD HL,VAR_C293_MAYBE_SOUND_EFFECT
  CALL SOUND_EFFECT_0
  EI
  LD A,(SELECTED_CREATURE_ID) ; A = attacking creature ID
  CP $25                  ; If attacker is a shadow wood tree, jump to
  JR Z,ATTACK_CALC_13     ; ATTACK_CALC_13.
  LD A,(COMBAT_RANGE)     ; If this was a ranged combat, return.
  OR A                    ;
  RET NZ                  ;
  JP ROUTINE_AF0D_MAYBE_CREATURE_TURN_1
ATTACK_CALC_15:
  LD A,(MAYBE_ATTACKED_CREATURE_ID)
  OR A
  JR NZ,ATTACK_CALC_16
  LD HL,(LOCATION_TARGET)
  LD (HL),$01
  LD DE,$00A1
  ADD HL,DE
  LD (HL),$01
  JR ATTACK_CALC_17
ATTACK_CALC_16:
  LD HL,(LOCATION_TARGET)
  LD (HL),A
  LD DE,$0141
  ADD HL,DE
  LD (HL),$04
ATTACK_CALC_17:
  HALT
  LD A,(SELECTED_CREATURE_ID)
  CP $25
  JR Z,ATTACK_CALC_13
  LD A,(COMBAT_RANGE)
  OR A
  RET NZ
  JP ROUTINE_AF0D_MAYBE_CREATURE_TURN_1

; Variable - maybe the ID of the attacked creature
MAYBE_ATTACKED_CREATURE_ID:
  DEFB $00

; Display attack animation
;
; Used by the routine at ATTACK_CALC.
DISPLAY_ATTACK_ANIMATION:
  LD HL,$C24D
  CALL SOUND_EFFECT_0
  LD HL,(LOCATION_TARGET)
  LD DE,$00A1
  ADD HL,DE
  LD A,$32
  LD (HL),A
  LD A,$46                ; Set the colours to yellow on black ($46).
  LD ($5C8F),A            ;
  LD B,$05
DISPLAY_ATTACK_ANIMATION_0:
  PUSH BC
  LD B,$04
  LD HL,GRAPHICS_STAR_ANIMATION
  LD DE,$0020
DISPLAY_ATTACK_ANIMATION_1:
  PUSH BC
  PUSH HL
  PUSH DE
  DI
  LD (VAR_DF4A),HL
  LD HL,(LOCATION_TARGET)
  LD (VAR_E005_MAYBE_ARENA_COORDS),HL
  CALL MAYBE_FIND_ARENA_COORDS
  LD (VAR_DF4C),HL
  CALL MAYBE_ANIMATION
  CALL SOUND_EFFECT_1
  POP DE
  POP HL
  ADD HL,DE
  POP BC
  DJNZ DISPLAY_ATTACK_ANIMATION_1
  POP BC
  DJNZ DISPLAY_ATTACK_ANIMATION_0
  LD HL,(LOCATION_TARGET)
  LD DE,$00A1
  ADD HL,DE
  LD (HL),$01
  EI
  HALT
  RET

; Data block at B3C3
VAR_B3C3:
  DEFB $01

; Data block at B3C4
VAR_B3C4:
  DEFB $13

; Data block at B3C5
VAR_B3C5:
  DEFB $01

; Data block at B3C6
VAR_B3C6:
  DEFB $1D

; Data block at B3C7
VAR_B3C7:
  DEFB $0D,$09

; Wizard death
;
; Used by the routines at CAST_LIGHTNING, ROUTINE_9CA9, SPREAD_BLOB_AND_FIRE
; and ATTACK_CALC.
WIZARD_DEATH:
  DI
  LD HL,DEAD_WIZARD_COUNT
  INC (HL)
  LD HL,$C2A7
  CALL SOUND_EFFECT_0
  LD HL,(LOCATION_TARGET)
  LD C,(HL)
  DEC C
  LD B,$00
  SLA C
  LD HL,TABLE_CREATURE_DATA_ADDRESSES
  ADD HL,BC
  LD E,(HL)
  INC HL
  LD D,(HL)
  LD HL,$0017
  ADD HL,DE
  LD E,(HL)
  INC HL
  LD D,(HL)
  EX DE,HL
  LD (VAR_DF4A),HL
  LD B,$08
WIZARD_DEATH_0:
  PUSH BC
  LD HL,(LOCATION_TARGET)
  LD (VAR_E005_MAYBE_ARENA_COORDS),HL
  CALL MAYBE_FIND_ARENA_COORDS
  LD (VAR_B3C7),HL
  LD A,H
  LD (VAR_B3C3),A
  LD (VAR_B3C4),A
  LD A,L
  LD (VAR_B3C5),A
  LD (VAR_B3C6),A
  DEC B
  LD A,$40
  ADD A,B
  LD ($5C8F),A
  LD B,$1D
WIZARD_DEATH_1:
  PUSH BC
  LD A,(VAR_B3C3)
  DEC A
  JR Z,WIZARD_DEATH_2
  LD (VAR_B3C3),A
  LD H,A
  LD A,(VAR_B3C7)
  LD L,A
  LD (VAR_DF4C),HL
  CALL MAYBE_ANIMATION
WIZARD_DEATH_2:
  LD A,(VAR_B3C4)
  INC A
  CP $14
  JR Z,WIZARD_DEATH_3
  LD (VAR_B3C4),A
  LD H,A
  LD A,(VAR_B3C7)
  LD L,A
  LD (VAR_DF4C),HL
  CALL MAYBE_ANIMATION
WIZARD_DEATH_3:
  LD A,(VAR_B3C5)
  DEC A
  JR Z,WIZARD_DEATH_4
  LD (VAR_B3C5),A
  LD L,A
  LD A,($B3C8)
  LD H,A
  LD (VAR_DF4C),HL
  CALL MAYBE_ANIMATION
WIZARD_DEATH_4:
  LD A,(VAR_B3C6)
  INC A
  CP $1E
  JR Z,WIZARD_DEATH_5
  LD (VAR_B3C6),A
  LD L,A
  LD A,($B3C8)
  LD H,A
  LD (VAR_DF4C),HL
  CALL MAYBE_ANIMATION
WIZARD_DEATH_5:
  LD A,(VAR_B3C3)
  CP $01
  JR Z,WIZARD_DEATH_6
  LD H,A
  LD A,(VAR_B3C5)
  CP $01
  JR Z,WIZARD_DEATH_6
  LD L,A
  LD (VAR_DF4C),HL
  CALL MAYBE_ANIMATION
WIZARD_DEATH_6:
  LD A,(VAR_B3C3)
  CP $01
  JR Z,WIZARD_DEATH_7
  LD H,A
  LD A,(VAR_B3C6)
  CP $1D
  JR Z,WIZARD_DEATH_7
  LD L,A
  LD (VAR_DF4C),HL
  CALL MAYBE_ANIMATION
WIZARD_DEATH_7:
  LD A,(VAR_B3C4)
  CP $13
  JR Z,WIZARD_DEATH_8
  LD H,A
  LD A,(VAR_B3C5)
  CP $01
  JR Z,WIZARD_DEATH_8
  LD L,A
  LD (VAR_DF4C),HL
  CALL MAYBE_ANIMATION
WIZARD_DEATH_8:
  LD A,(VAR_B3C4)
  CP $13
  JR Z,WIZARD_DEATH_9
  LD H,A
  LD A,(VAR_B3C6)
  CP $1D
  JR Z,WIZARD_DEATH_9
  LD L,A
  LD (VAR_DF4C),HL
  CALL MAYBE_ANIMATION
WIZARD_DEATH_9:
  CALL SOUND_EFFECT_1
  POP BC
  DEC B
  JP NZ,WIZARD_DEATH_1
  POP BC
  DEC B
  JP NZ,WIZARD_DEATH_0
  LD HL,(LOCATION_TARGET)
  LD A,(HL)
  SUB $29
  LD (VAR_AC00),A
  LD (HL),$00
  LD HL,WIZARD_STATUS_VALUES
  LD D,$00
  LD E,A
  ADD HL,DE
  SET 4,(HL)
  LD HL,(LOCATION_TARGET)
  LD DE,$0321
  ADD HL,DE
  LD A,(HL)
  LD HL,(LOCATION_TARGET)
  LD (HL),A
  CALL MAYBE_MARK_ARENA_SQUARES_0
  HALT
  DI
  LD HL,$C2C5
  CALL SOUND_EFFECT_0
; This entry point is used by the routine at ROUTINE_9E38.
WIZARD_DEATH_10:
  LD B,$09
  LD HL,GRAPHICS_CIRCLE_ANIMATION
  LD (VAR_DF4A),HL
  LD A,$46                ; Set the colours to yellow on black ($46).
  LD ($5C8F),A            ;
WIZARD_DEATH_11:
  PUSH BC
  LD A,B
  LD (VAR_ABFF),A
  LD B,$9F
  LD HL,ARENA_STATE_1
  LD (VAR_ABFD),HL
WIZARD_DEATH_12:
  PUSH BC
  LD HL,(VAR_ABFD)
  LD A,(HL)
  OR A
  JP Z,WIZARD_DEATH_18
  CP $29
  JP P,WIZARD_DEATH_18
  LD DE,$0141
  ADD HL,DE
  LD A,(HL)
  CP $04
  JR NZ,WIZARD_DEATH_13
  LD DE,$00A0
  ADD HL,DE
  LD A,(HL)
  BIT 3,A
  JP Z,WIZARD_DEATH_18
WIZARD_DEATH_13:
  LD HL,(VAR_ABFD)
  LD DE,$01E1
  ADD HL,DE
  LD A,(HL)
  AND $07
  LD HL,(VAR_AC00)
  CP L
  JR Z,WIZARD_DEATH_14
  LD HL,(VAR_ABFD)
  LD A,(HL)
  CP $22
  JP NZ,WIZARD_DEATH_18
  LD DE,$0281
  ADD HL,DE
  LD A,(HL)
  OR A
  JP Z,WIZARD_DEATH_18
  LD DE,$00A0
  ADD HL,DE
  LD A,(HL)
  LD HL,(VAR_AC00)
  CP L
  JP NZ,WIZARD_DEATH_18
WIZARD_DEATH_14:
  LD HL,(VAR_ABFD)
  LD (VAR_E005_MAYBE_ARENA_COORDS),HL
  CALL MAYBE_FIND_ARENA_COORDS
  LD (VAR_DF4C),HL
  CALL MAYBE_ANIMATION
  LD A,(VAR_ABFF)
  DEC A
  JR NZ,WIZARD_DEATH_18
  LD HL,(VAR_ABFD)
  LD DE,$01E1
  ADD HL,DE
  LD A,(HL)
  AND $07
  LD HL,(VAR_AC00)
  CP L
  JR Z,WIZARD_DEATH_15
  LD HL,(VAR_ABFD)
  LD DE,$0281
  ADD HL,DE
  LD (HL),$00
  LD DE,$00A0
  ADD HL,DE
  LD (HL),$00
  JR WIZARD_DEATH_18
WIZARD_DEATH_15:
  LD HL,(VAR_ABFD)
  LD A,(HL)
  CP $22
  JR NZ,WIZARD_DEATH_16
  LD DE,$0281
  ADD HL,DE
  LD A,(HL)
  OR A
  JR Z,WIZARD_DEATH_16
  LD (HL),$00
  LD HL,(VAR_ABFD)
  LD (HL),A
  LD DE,$0321
  ADD HL,DE
  LD A,(HL)
  LD (HL),$00
  LD DE,$0140
  SBC HL,DE
  LD (HL),A
  JR WIZARD_DEATH_18
WIZARD_DEATH_16:
  LD HL,(VAR_ABFD)
  LD DE,$0281
  ADD HL,DE
  LD A,(HL)
  LD (HL),$00
  OR A
  JR Z,WIZARD_DEATH_17
  LD HL,(VAR_ABFD)
  LD (HL),A
  JR WIZARD_DEATH_18
WIZARD_DEATH_17:
  LD HL,(VAR_ABFD)
  LD DE,$0321
  ADD HL,DE
  LD A,(HL)
  LD HL,(VAR_ABFD)
  LD (HL),A
  OR A
  JR Z,WIZARD_DEATH_18
  LD DE,$0141
  ADD HL,DE
  LD A,$04
  LD (HL),$04
WIZARD_DEATH_18:
  POP BC
  LD HL,(VAR_ABFD)
  INC HL
  LD (VAR_ABFD),HL
  DEC B
  JP NZ,WIZARD_DEATH_12
  CALL SOUND_EFFECT_1
  POP BC
  LD HL,(VAR_DF4A)
  LD DE,$0020
  ADD HL,DE
  LD (VAR_DF4A),HL
  DEC B
  JP NZ,WIZARD_DEATH_11
  CALL MAYBE_MARK_ARENA_SQUARES_0
  HALT
  RET

; Data block at B60B
VAR_B60B:
  DEFB $02

; Data block at B60C
VAR_B60C:
  DEFB $28

; Routine at B60D
;
; Used by the routine at MAYBE_FIRE_ATTACK_ANIM.
ROUTINE_B60D:
  LD DE,ARENA_STATE_1
  XOR A
  SBC HL,DE
  LD A,L
  AND $0F
  INC A
  RLCA
  RLCA
  RLCA
  RLCA
  LD E,A
  LD A,L
  AND $F0
  LD L,A
  LD A,$A0
  SUB L
  LD D,A
  EX DE,HL
  RET

; Routine at B626 Maybe fire attack animation
;
; Used by the routines at ROUTINE_98DB, CAST_LIGHTNING, ROUTINE_9CA9,
; DISPLAY_CAST_ANIMATION and RANGED_COMBAT.
MAYBE_FIRE_ATTACK_ANIM:
  XOR A
  LD ($5C90),A
  LD ($5C91),A
  LD (VAR_B60C),A
  LD A,(VAR_B60B)
  OR A
  JR Z,MAYBE_FIRE_ATTACK_ANIM_5
  CP $01
  JR NZ,MAYBE_FIRE_ATTACK_ANIM_0
  LD (VAR_B844),A
  LD A,$2A
  LD (VAR_B769),A
  LD A,$47                ; Set the colours to white on black ($47).
  LD ($5C8F),A            ;
MAYBE_FIRE_ATTACK_ANIM_0:
  LD A,(VAR_B60B)
  CP $02
  JR NZ,MAYBE_FIRE_ATTACK_ANIM_1
  LD (VAR_B844),A
  LD A,$0E
  LD (VAR_B769),A
  LD A,$46                ; Set the colours to yellow on black ($46).
  LD ($5C8F),A            ;
MAYBE_FIRE_ATTACK_ANIM_1:
  LD A,(VAR_B60B)
  CP $03
  JR NZ,MAYBE_FIRE_ATTACK_ANIM_2
  LD (VAR_B844),A
  LD A,$3C
  LD (VAR_B769),A
  LD A,$45                ; Set the colours to cyan on black ($45).
  LD ($5C8F),A            ;
MAYBE_FIRE_ATTACK_ANIM_2:
  LD A,(VAR_B60B)
  CP $04
  JR NZ,MAYBE_FIRE_ATTACK_ANIM_3
  LD A,$03
  LD (VAR_B844),A
  LD A,$46                ; Set the colours to yellow on black ($46).
  LD ($5C8F),A            ;
  LD A,$64
  LD (VAR_B769),A
MAYBE_FIRE_ATTACK_ANIM_3:
  CP $05
  JR NZ,MAYBE_FIRE_ATTACK_ANIM_4
  LD A,$03
  LD (VAR_B844),A
  LD A,$46                ; Set the colours to yellow on black ($46).
  LD ($5C8F),A            ;
  LD A,$08
  LD (VAR_B769),A
MAYBE_FIRE_ATTACK_ANIM_4:
  CP $06
  JR NZ,MAYBE_FIRE_ATTACK_ANIM_5
  LD A,$03
  LD (VAR_B844),A
  LD A,$47                ; Set the colours to white on black ($47).
  LD ($5C8F),A            ;
  LD A,$64
  LD (VAR_B769),A
MAYBE_FIRE_ATTACK_ANIM_5:
  DI
  XOR A
  LD (VAR_B76A),A
  EXX
  PUSH HL
  EXX
  LD HL,(LOCATION_SOURCE)
  CALL ROUTINE_B60D
  LD ($5C7D),HL
  LD HL,(LOCATION_TARGET)
  CALL ROUTINE_B60D
  LD (VAR_B76B),HL
  EX DE,HL
  LD HL,($5C7D)
  LD A,H
  CP D
  JR C,MAYBE_FIRE_ATTACK_ANIM_6
  SUB D
  LD B,A
  LD D,$FF
  JR MAYBE_FIRE_ATTACK_ANIM_7
MAYBE_FIRE_ATTACK_ANIM_6:
  LD A,D
  SUB H
  LD B,A
  LD D,$01
MAYBE_FIRE_ATTACK_ANIM_7:
  LD A,L
  CP E
  JR C,MAYBE_FIRE_ATTACK_ANIM_8
  SUB E
  LD C,A
  LD E,$FF
  JR MAYBE_FIRE_ATTACK_ANIM_9
MAYBE_FIRE_ATTACK_ANIM_8:
  LD A,E
  SUB L
  LD C,A
  LD E,$01
MAYBE_FIRE_ATTACK_ANIM_9:
  LD A,C
  CP B
  JR NC,MAYBE_FIRE_ATTACK_ANIM_10
  LD L,C
  PUSH DE
  XOR A
  LD E,A
  JR MAYBE_FIRE_ATTACK_ANIM_11
MAYBE_FIRE_ATTACK_ANIM_10:
  OR B
  JR Z,MAYBE_FIRE_ATTACK_ANIM_17
  LD L,B
  LD B,C
  PUSH DE
  LD D,$00
MAYBE_FIRE_ATTACK_ANIM_11:
  LD H,B
  LD A,B
  RRA
MAYBE_FIRE_ATTACK_ANIM_12:
  ADD A,L
  JR C,MAYBE_FIRE_ATTACK_ANIM_13
  CP H
  JR C,MAYBE_FIRE_ATTACK_ANIM_14
MAYBE_FIRE_ATTACK_ANIM_13:
  SUB H
  LD C,A
  EXX
  POP BC
  PUSH BC
  JR MAYBE_FIRE_ATTACK_ANIM_15
MAYBE_FIRE_ATTACK_ANIM_14:
  LD C,A
  PUSH DE
  EXX
  POP BC
MAYBE_FIRE_ATTACK_ANIM_15:
  LD HL,($5C7D)
  LD A,B
  ADD A,H
  LD B,A
  LD A,C
  INC A
  ADD A,L
  JR C,MAYBE_FIRE_ATTACK_ANIM_18
MAYBE_FIRE_ATTACK_ANIM_16:
  DEC A
  LD C,A
  CALL ROUTINE_B746
  EXX
  LD A,C
  DJNZ MAYBE_FIRE_ATTACK_ANIM_12
  POP DE
MAYBE_FIRE_ATTACK_ANIM_17:
  EXX
  POP HL
  EXX
  EI
  LD A,$03
  LD ($5C91),A
  LD A,$FF
  LD ($5C90),A
  RET
MAYBE_FIRE_ATTACK_ANIM_18:
  JR Z,MAYBE_FIRE_ATTACK_ANIM_16

; Routine at B733
;
; Used by the routine at ROUTINE_B8BD.
ROUTINE_B733:
  LD ($5C7D),BC
  CALL $22AA              ; Pixel address ROM subroutine.
  LD B,A
  INC B
  LD A,$FE
ROUTINE_B733_0:
  RRCA
  DJNZ ROUTINE_B733_0
  LD B,A
  LD A,(HL)
  AND B
  LD (HL),A
  RET

; Routine at B746
;
; Used by the routine at MAYBE_FIRE_ATTACK_ANIM.
ROUTINE_B746:
  LD A,(VAR_B60B)
  OR A
  JR Z,ROUTINE_B746_0
  CALL ROUTINE_B7D3
  RET
ROUTINE_B746_0:
  CALL ROUTINE_B755
  RET

; Data block at B754
VAR_B754:
  DEFB $00

; Routine at B755
;
; Used by the routine at ROUTINE_B746.
ROUTINE_B755:
  LD ($5C7D),BC
  CALL $22AA              ; Pixel address ROM subroutine.
  LD B,A
  INC B
  LD A,(HL)
ROUTINE_B755_0:
  RLCA
  DJNZ ROUTINE_B755_0
  AND $01
  RET Z
  LD (VAR_B754),A
  RET

; Data block at B769
VAR_B769:
  DEFB $0E

; Data block at B76A
VAR_B76A:
  DEFB $0E

; Data block at B76B
VAR_B76B:
  DEFB $70,$60

; Data block at B76D
VAR_B76D:
  DEFB $70,$60,$70,$5F,$70,$5E,$70,$5D
  DEFB $70,$5C,$70,$5B,$70,$5A,$70,$59
  DEFB $70,$58,$70,$57,$70,$56,$70,$55
  DEFB $70,$54,$70,$53,$70,$52,$70,$51
  DEFB $B1,$20,$B2,$20,$B3,$20,$B4,$20
  DEFB $B5,$20,$B6,$20,$B7,$20,$B8,$20
  DEFB $B9,$20,$BA,$20,$BB,$20,$BC,$20
  DEFB $BD,$20,$BE,$20,$BF,$20,$C0,$20
  DEFB $C1,$20,$C2,$20,$C3,$20,$C4,$20
  DEFB $C5,$20,$C6,$20,$C7,$20,$C8,$20
  DEFB $C9,$20,$CA,$20,$CB,$20,$CC,$20
  DEFB $CD,$20,$CE,$20,$CF,$20,$D0,$20
  DEFB $D1,$20,$D2,$20,$D3,$20

; Routine at B7D3
;
; Used by the routine at ROUTINE_B746.
ROUTINE_B7D3:
  PUSH HL
  LD (VAR_B76D),BC
  PUSH BC
  CALL ROUTINE_B845_0
  POP BC
  LD HL,(VAR_B76B)
  SBC HL,BC
  JR Z,ROUTINE_B7D3_1
  LD HL,$B7D0
  LD DE,$B7D2
  LD BC,$0064
  LDDR
  LD HL,(VAR_B769)
  LD A,(VAR_B76A)
  CP L
  JR Z,ROUTINE_B7D3_0
  ADD A,$02
  LD (VAR_B76A),A
ROUTINE_B7D3_0:
  LD D,$00
  LD A,(VAR_B76A)
  LD E,A
  LD HL,VAR_B76D
  ADD HL,DE
  LD C,(HL)
  INC HL
  LD B,(HL)
  CALL ROUTINE_B845
  LD HL,(VAR_B76D)
  LD ($5C7D),HL
  PUSH DE
  PUSH BC
  CALL SOUND_EFFECT_1
  POP BC
  POP DE
  POP HL
  RET
ROUTINE_B7D3_1:
  LD A,(VAR_B76A)
  LD D,$00
  LD E,A
  SRL A
  ADD A,$02
  LD B,A
  LD HL,VAR_B76D
  ADD HL,DE
  LD DE,$0002
ROUTINE_B7D3_2:
  PUSH HL
  PUSH BC
  LD C,(HL)
  INC HL
  LD B,(HL)
  CALL ROUTINE_B845
  PUSH DE
  CALL SOUND_EFFECT_1
  POP DE
  POP BC
  POP HL
  XOR A
  SBC HL,DE
  DJNZ ROUTINE_B7D3_2
  POP HL
  RET

; Data block at B844
VAR_B844:
  DEFB $02

; Routine at B845
;
; Used by the routine at ROUTINE_B7D3.
ROUTINE_B845:
  LD A,(VAR_B844)
  OR $80
  LD (VAR_B844),A
; This entry point is used by the routine at ROUTINE_B7D3.
ROUTINE_B845_0:
  PUSH DE
  PUSH BC
  LD A,(VAR_B844)
  AND $7F
  CP $03
  JR Z,ROUTINE_B845_1
  CALL ROUTINE_B8BD
  JR ROUTINE_B845_2
ROUTINE_B845_1:
  CALL ROUTINE_B8BD
  INC B
  CALL ROUTINE_B8BD
  DEC B
  DEC B
  CALL ROUTINE_B8BD
  INC B
  INC C
  CALL ROUTINE_B8BD
  DEC C
  DEC C
  CALL ROUTINE_B8BD
  LD A,(VAR_B60B)
  AND $04
  JR Z,ROUTINE_B845_2
  INC B
  INC B
  DEC C
  CALL ROUTINE_B8BD
  INC C
  INC C
  INC B
  CALL ROUTINE_B8BD
  DEC B
  INC C
  INC C
  CALL ROUTINE_B8BD
  DEC B
  DEC B
  INC C
  CALL ROUTINE_B8BD
  DEC C
  DEC B
  DEC B
  CALL ROUTINE_B8BD
  DEC C
  DEC C
  DEC B
  CALL ROUTINE_B8BD
  INC B
  DEC C
  DEC C
  CALL ROUTINE_B8BD
  INC B
  INC B
  DEC C
  CALL ROUTINE_B8BD
ROUTINE_B845_2:
  POP BC
  LD ($5C7D),BC
  POP DE
  LD A,(VAR_B844)
  AND $7F
  LD (VAR_B844),A
  LD HL,VAR_B60C
  INC (HL)
  RET

; Routine at B8BD
;
; Used by the routine at ROUTINE_B845.
ROUTINE_B8BD:
  PUSH BC
  LD A,(VAR_B844)
  AND $80
  JR Z,ROUTINE_B8BD_0
  CALL ROUTINE_B733
  JR ROUTINE_B8BD_2
ROUTINE_B8BD_0:
  LD A,(VAR_B60B)
  AND $04
  JR Z,ROUTINE_B8BD_1
  LD A,(VAR_B60C)
  AND $07
  JR NZ,ROUTINE_B8BD_2
ROUTINE_B8BD_1:
  CALL $22E5              ; Plot command ROM routine.
ROUTINE_B8BD_2:
  POP BC
  RET

; Ranged combat
;
; Used by the routine at ROUTINE_AF0D_MAYBE_CREATURE_TURN.
RANGED_COMBAT:
  LD A,$43                ; Draw the border in magenta on black ($43).
  LD ($5C8F),A            ;
  CALL DRAW_BORDER        ;
  LD A,$44                ; Set the colours to green on black ($44).
  LD ($5C8F),A            ;
  LD BC,$1600             ; Print the message with ID $3B (RANGED
  LD A,$3B                ; COMBAT,RANGE=) at screen position $1600.
  CALL PRINT_MESSAGE_2    ;
  LD A,$46                ; Set the colours to yellow on black ($46).
  LD ($5C8F),A            ;
  LD A,(COMBAT_RANGE)     ; Print the ranged combat value.
  ADD A,$30               ;
  CALL PRINT_SINGLE_CHAR  ;
  LD BC,(XY_COORDS)
  LD (VAR_AC04),BC
  LD HL,$C257
  CALL SOUND_EFFECT_0
  EI
  LD A,(WIZ_IS_COMP_CONTROLLED) ; If the current wizard is player controlled
  OR A                          ; jump to RANGED_COMBAT_1.
  JR Z,RANGED_COMBAT_1          ;
  CALL R_CC56_MAYBE_COMP_PICK_TARGET
RANGED_COMBAT_1:
  CALL WAIT_FOR_KEYPRESS_2
  CALL WAIT_FOR_KEYPRESS_1 ; Wait for keypress
  LD HL,GRAPHICS_CURSOR_2 ; Set the graphic to cursor 2 ($5C7B).
  LD ($5C7B),HL           ;
RANGED_COMBAT_2_SELECT_TARGET:
  LD A,(WIZ_IS_COMP_CONTROLLED) ; If the current wizard is player controlled
  OR A                          ; jump to RANGED_COMBAT_3.
  JR Z,RANGED_COMBAT_3          ;
  CALL ROUTINE_CCC3_0
  JR RANGED_COMBAT_4_DID_USER_CANCEL
RANGED_COMBAT_3:
  CALL KEY_INPUT          ; User key input.
  CALL $02BF              ; Keyboard ROM subroutine.
RANGED_COMBAT_4_DID_USER_CANCEL:
  CP $4B                            ; If the user pressed anything other than K
  JR NZ,RANGED_COMBAT_5_CHECK_RANGE ; jump to RANGED_COMBAT_5_CHECK_RANGE.
  LD A,$41                ; Draw the border in blue on black ($41).
  LD ($5C8F),A            ;
  CALL DRAW_BORDER        ;
  CALL CLEAR_MESSAGE_BAR  ; Clear the message bar.
  LD HL,$C2B1
  CALL SOUND_EFFECT_0
  EI
  RET
RANGED_COMBAT_5_CHECK_RANGE:
  CP $53                              ; If the user pressed anything other than
  JR NZ,RANGED_COMBAT_2_SELECT_TARGET ; S jump back to
                                      ; RANGED_COMBAT_2_SELECT_TARGET.
  XOR A
  LD HL,(VAR_AC04)
  LD BC,(XY_COORDS)
  SBC HL,BC
  JR Z,RANGED_COMBAT_2_SELECT_TARGET
  LD BC,(VAR_AC04)
  LD (VAR_MAYBE_SPELL_SOURCE_COORDS),BC
  LD BC,(XY_COORDS)
  LD (VAR_MAYBE_SPELL_DESTINATION_COORDS),BC
  LD A,(COMBAT_RANGE)
  SLA A
  CALL GET_DISTANCE
  JP P,RANGED_COMBAT_6_CHECK_LOS
  LD A,$45                ; Set the colours to cyan on black ($45).
  LD ($5C8F),A            ;
  LD A,$35                ; Print the message with ID $35 (OUT OF RANGE) at
  LD BC,$1600             ; screen position $1600.
  CALL PRINT_MESSAGE_2    ;
  CALL WAIT_FOR_KEYPRESS_2
  CALL WAIT_FOR_KEYPRESS_1 ; Wait for keypress
  JR RANGED_COMBAT_2_SELECT_TARGET
RANGED_COMBAT_6_CHECK_LOS:
  XOR A
  LD (VAR_B754),A
  LD (VAR_B60B),A
  CALL ROUTINE_BA77
  CALL MAYBE_FIRE_ATTACK_ANIM
  CALL MAYBE_MARK_ARENA_SQUARES
  HALT
  LD A,(VAR_B754)
  OR A
  JR Z,RANGED_COMBAT_7
  LD A,$45                ; Set the colours to cyan on black ($45).
  LD ($5C8F),A            ;
  CALL CLEAR_MESSAGE_BAR  ; Clear the message bar.
  LD A,$3C                ; Print the message with ID $3C (NO LINE OF SIGHT) at
  LD BC,$1600             ; screen position $1600.
  CALL PRINT_MESSAGE_2    ;
  CALL WAIT_FOR_KEYPRESS_2
  CALL WAIT_FOR_KEYPRESS_1 ; Wait for keypress
  JP RANGED_COMBAT_2_SELECT_TARGET
RANGED_COMBAT_7:
  LD HL,$C275
  LD (SOUND_EFFECT_C2F3),HL
  LD HL,(LOCATION_SOURCE)
  LD A,(HL)
  CP $17
  JP M,RANGED_COMBAT_8
  CP $1A
  JP P,RANGED_COMBAT_8
  LD A,$04
  LD HL,VAR_C26B_MAYBE_TABLE
  LD (SOUND_EFFECT_C2F3),HL
  JR RANGED_COMBAT_10
RANGED_COMBAT_8:
  LD A,(HL)
  CP $15
  JR NZ,RANGED_COMBAT_9
  LD A,$02
  JR RANGED_COMBAT_10
RANGED_COMBAT_9:
  LD A,$01
RANGED_COMBAT_10:
  LD (VAR_B60B),A
  CALL SOUND_EFFECT
  CALL MAYBE_FIRE_ATTACK_ANIM
  CALL MAYBE_MARK_ARENA_SQUARES_0
  HALT
  DI
  LD HL,$C29D
  LD (SOUND_EFFECT_C2F3),HL
  LD HL,(LOCATION_TARGET)
  LD (VAR_E005_MAYBE_ARENA_COORDS),HL
  CALL MAYBE_FIND_ARENA_COORDS
  LD (VAR_DF4C),HL
  LD HL,GRAPHICS_CIRCLE_ANIMATION
  LD A,$47                ; Set the colours to white on black ($47).
  LD ($5C8F),A            ;
  LD A,(VAR_B60B)
  CP $04
  JR NZ,RANGED_COMBAT_11
  LD HL,VAR_C243_MAYBE_TABLE
  LD (SOUND_EFFECT_C2F3),HL
  LD HL,GRAPHICS_DRAGON_FIRE
  LD A,$46                ; Set the colours to yellow on black ($46).
  LD ($5C8F),A            ;
RANGED_COMBAT_11:
  PUSH HL
  CALL SOUND_EFFECT
  POP HL
  LD DE,$0020
  LD B,$09
RANGED_COMBAT_12:
  PUSH BC
  PUSH HL
  PUSH DE
  LD (VAR_DF4A),HL
  CALL MAYBE_ANIMATION
  CALL SOUND_EFFECT_1
  POP DE
  POP HL
  POP BC
  ADD HL,DE
  DJNZ RANGED_COMBAT_12
  LD BC,(VAR_AC04)
  LD (XY_COORDS),BC
  EI
  LD HL,(LOCATION_TARGET)
  LD A,(HL)
  OR A
  RET Z
  LD DE,$00A1
  ADD HL,DE
  LD (HL),$01
  LD DE,$00A0
  ADD HL,DE
  LD A,(HL)
  CP $04
  JR NZ,RANGED_COMBAT_13
  BIT 3,A
  RET Z
RANGED_COMBAT_13:
  LD HL,(LOCATION_TARGET) ; A = ID of the target object.
  LD A,(HL)               ;
  CP $24                  ; If A == $24 (Magic Wood), jump to RANGED_COMBAT_14.
  JR Z,RANGED_COMBAT_14   ;
  CP $25                  ; If A == $25 (Shadow Wood), jump to
  JR Z,RANGED_COMBAT_14   ; RANGED_COMBAT_14.
  CP $29                  ; If A >= $29 (Wizard) jump to RANGED_COMBAT_14.
  JP P,RANGED_COMBAT_14   ;
  CP $23                  ; If the target is pointing at anything from $23 to
  RET P                   ; $28, return. TODO What's going on here?
RANGED_COMBAT_14:
  JP ATTACK_CALC

; Variable - Temp variable for routine at ROUTINE_BA77.
TEMP_VAR_FOR_BA77:
  DEFB $BD,$E0

; Routine at BA77
;
; Used by the routines at ROUTINE_98DB and RANGED_COMBAT.
ROUTINE_BA77:
  DI
  LD HL,ARENA_STATE_1     ; Going to loop through every space in the arena
  LD B,$9F                ; table 1.
ROUTINE_BA77_0:
  PUSH BC                 ;
  LD (TEMP_VAR_FOR_BA77),HL ; Save current index to TEMP_VAR_FOR_BA77
  LD A,(HL)               ; If the space contains magic fire call ROUTINE_BABE.
  CP $23                  ;
  CALL Z,ROUTINE_BABE     ;
  CP $1D                  ; If the space contains a ghost call ROUTINE_BABE.
  CALL Z,ROUTINE_BABE     ;
  CP $1F                  ; If the space contains a wraith call ROUTINE_BABE.
  CALL Z,ROUTINE_BABE     ;
  LD DE,$0141             ; HL = the corresponding space in arena table 3
  ADD HL,DE               ;
  LD A,(HL)               ; If table 3 contains the value 4 call ROUTINE_BABE.
  CP $04                  ; TODO Why?
  CALL Z,ROUTINE_BABE
  XOR A
  LD HL,(TEMP_VAR_FOR_BA77) ; HL = current space - cursor (TODO starting
  LD DE,(LOCATION_TARGET)   ; position?)
  SBC HL,DE                 ;
  CALL Z,ROUTINE_BABE     ; If same space call ROUTINE_BABE?
  XOR A
  LD HL,(TEMP_VAR_FOR_BA77)
  LD DE,(LOCATION_SOURCE)
  SBC HL,DE
  CALL Z,ROUTINE_BABE
  LD HL,(TEMP_VAR_FOR_BA77)
  INC HL
  POP BC
  DJNZ ROUTINE_BA77_0
  EI
  RET

; Routine at BABE
;
; Used by the routine at ROUTINE_BA77.
ROUTINE_BABE:
  PUSH AF
  LD HL,(TEMP_VAR_FOR_BA77)
  LD (VAR_E005_MAYBE_ARENA_COORDS),HL
  CALL MAYBE_FIND_ARENA_COORDS
  LD (VAR_DF4C),HL
  LD HL,VAR_EB51_MAYBE_TABLE
  LD (VAR_DF4A),HL
  CALL MAYBE_ANIMATION
  POP AF
  RET

; Prints a single character, as set in A? TODO Check
;
; Used by the routines at KEYS_INPUT_NUMBERS, MAIN_LOOP, PRE_TURN_MENU,
; SPELL_MENU, DISPLAY_SPELL_INFO, PRINT_SPELL_TO_CAST, CREATURE_SELECTED,
; ROUTINE_AF0D_MAYBE_CREATURE_TURN, RANGED_COMBAT, ROUTINE_BAEE_PRINT_WORD,
; KEY_INPUT, DISPLAY_CREATURE_INFO, ROUTINE_C5FC and ROUTINE_C612.
PRINT_SINGLE_CHAR:
  LD HL,VAR_D808
  LD ($5C36),HL
  PUSH AF
  CALL ROUTINE_DF0F_MAYBE_PRINTING_CHARACTERS
  POP AF
  INC B
  LD HL,GRAPHICS_LETTERS_LOWER_CASE_TOP_HALVES
  LD ($5C36),HL
  CALL ROUTINE_DF0F_MAYBE_PRINTING_CHARACTERS
  DEC B
  INC C
  RET

; Routine at BAEE
;
; Used by the routines at PRINT_MESSAGE_1 and PRINT_MESSAGE_2.
ROUTINE_BAEE_PRINT_WORD:
  LD A,(HL)
  PUSH HL
  PUSH DE
  CALL PRINT_SINGLE_CHAR
  POP DE
  POP HL
  DEC E
  INC HL
  JR NZ,ROUTINE_BAEE_PRINT_WORD
  RET

; Print message to screen
;
; Prints one of the messages starting at STR_EMPTY_STRING (described in the
; table at TABLE_TEXT_MESSAGES_2).
;
; Used by the routines at MAIN_LOOP, CHECK_TREES_FOR_NEW_SPELL, PRE_TURN_MENU,
; SPELL_MENU, DISPLAY_SPELL_INFO, PRINT_SPELL_TO_CAST,
; DISPLAY_SUCCESS_FAIL_MESSAGE, PLAYER_CAST_LOCATIONAL_SPELL, CAST_LIGHTNING,
; WIZARD_TURN, CREATURE_SELECTED, ROUTINE_AF0D_MAYBE_CREATURE_TURN,
; FLYING_MOVEMENT, ATTACK_CALC, RANGED_COMBAT, KEY_INPUT, ENGAGED_TO_ENEMY,
; CLEAR_MESSAGE_BAR, DISPLAY_CREATURE_INFO, ROUTINE_C5FC and ROUTINE_C612.
PRINT_MESSAGE_2:
  PUSH HL
  PUSH DE
  PUSH BC
  LD H,$00
  LD L,A
  ADD HL,HL
  ADD HL,HL
  LD DE,TABLE_TEXT_MESSAGES_2
  ADD HL,DE
  LD E,(HL)
  INC HL
  LD D,(HL)
  INC HL
  LD C,(HL)
  EX DE,HL
  LD E,C
  POP BC
  CALL ROUTINE_BAEE_PRINT_WORD
  POP DE
  POP HL
  RET

; Data block at BB15
  DEFB $D0,$E4,$D0,$EA,$D0,$E4,$D0,$EA
  DEFB $57,$0B,$27,$0B,$57,$0B,$27,$0B
  DEFB $FF,$FF,$AA,$55,$88,$22,$88,$00
  DEFB $00,$11,$44,$11,$AA,$55,$FF,$FF
  DEFB $FF,$FF,$EA,$F5,$D0,$E4,$D0,$EA
  DEFB $FF,$FF,$AF,$5B,$87,$2B,$87,$0B
  DEFB $D0,$E1,$D4,$E1,$DA,$F5,$FF,$FF
  DEFB $57,$0B,$27,$0B,$AF,$57,$FF,$FF

; Data block at BB55
VAR_BB55:
  DEFB $15,$BB

; Draw the border.
;
; The colours used are stored in system variable $5C36, which should be set
; before calling this routine.
;
; Used by the routines at MAIN_LOOP, PRE_TURN_MENU, DISPLAY_SPELL_INFO,
; RANGED_COMBAT, MAYBE_MARK_ARENA_SQUARES and DISPLAY_CREATURE_INFO.
DRAW_BORDER:
  PUSH BC
  PUSH DE
  PUSH HL
  PUSH AF
  LD HL,(VAR_BB55)
  LD ($5C36),HL
  LD E,$14
DRAW_BORDER_0:
  LD A,$00
  LD C,$00
  LD B,E
  PUSH DE
  CALL ROUTINE_DF0F_MAYBE_PRINTING_CHARACTERS
  LD C,$1F
  LD A,$01
  CALL ROUTINE_DF0F_MAYBE_PRINTING_CHARACTERS
  POP DE
  DEC E
  JR NZ,DRAW_BORDER_0
  LD E,$1E
DRAW_BORDER_1:
  LD A,$02
  LD B,$00
  LD C,E
  PUSH DE
  CALL ROUTINE_DF0F_MAYBE_PRINTING_CHARACTERS
  LD B,$15
  LD A,$03
  CALL ROUTINE_DF0F_MAYBE_PRINTING_CHARACTERS
  POP DE
  DEC E
  JR NZ,DRAW_BORDER_1
  LD A,$04
  LD BC,$0000
  CALL ROUTINE_DF0F_MAYBE_PRINTING_CHARACTERS
  LD A,$05
  LD C,$1F
  CALL ROUTINE_DF0F_MAYBE_PRINTING_CHARACTERS
  LD A,$06
  LD BC,$1500
  CALL ROUTINE_DF0F_MAYBE_PRINTING_CHARACTERS
  LD C,$1F
  LD A,$07
  CALL ROUTINE_DF0F_MAYBE_PRINTING_CHARACTERS
  POP AF
  POP HL
  POP DE
  POP BC
  RET

; Wait for a user keypress, if the current wizard is not a computer player.
; What's the difference between this and WAIT_FOR_KEYPRESS_2?
;
; Used by the routines at DISPLAY_SPELL_INFO, CAST_SPELLS,
; PLAYER_CAST_LOCATIONAL_SPELL, CAST_LIGHTNING, WIZARD_TURN, FLYING_MOVEMENT,
; ATTACK_CALC, RANGED_COMBAT and DISPLAY_CREATURE_INFO.
WAIT_FOR_KEYPRESS_1:
  PUSH HL
  PUSH DE
  PUSH BC
  LD A,(WIZ_IS_COMP_CONTROLLED) ; If the current wizard is computer controlled
  OR A                          ; jump to WAIT_FOR_KEYPRESS_1_1.
  JR NZ,WAIT_FOR_KEYPRESS_1_1   ;
WAIT_FOR_KEYPRESS_1_0:
  PUSH BC
  CALL $028E              ; Keyboard scanning ROM subroutine.
  POP BC
  INC C
  LD A,E
  INC A
  OR A
  JR Z,WAIT_FOR_KEYPRESS_1_0
  LD A,C
  LD ($5C76),A            ; Set $5C76 (the seed for RND) to A
WAIT_FOR_KEYPRESS_1_1:
  POP BC
  POP DE
  POP HL
  RET

; Wait for a user keypress, if the current wizard is not a computer player.
; What's the difference between this and WAIT_FOR_KEYPRESS_1?
;
; Used by the routines at PRE_TURN_MENU, DISPLAY_ARENA_READ_ONLY, SPELL_MENU,
; DISPLAY_SPELL_INFO, PLAYER_CAST_LOCATIONAL_SPELL,
; CAST_DISBELIEVE_CHOOSE_TARGET, CAST_LIGHTNING, WIZARD_TURN,
; ROUTINE_AF0D_MAYBE_CREATURE_TURN, FLYING_MOVEMENT, ATTACK_CALC, RANGED_COMBAT
; and DISPLAY_CREATURE_INFO.
WAIT_FOR_KEYPRESS_2:
  PUSH HL
  PUSH DE
  PUSH BC
  LD A,(WIZ_IS_COMP_CONTROLLED) ; If the current wizard is computer controlled
  OR A                          ; jump to WAIT_FOR_KEYPRESS_2_1.
  JR NZ,WAIT_FOR_KEYPRESS_2_1   ;
WAIT_FOR_KEYPRESS_2_0:
  PUSH BC
  CALL $028E              ; Keyboard scanning ROM subroutine.
  POP BC
  INC C
  LD A,E
  INC A
  JR NZ,WAIT_FOR_KEYPRESS_2_0
  LD A,C
  LD ($5C76),A            ; Set $5C76 (the seed for RND) to A
WAIT_FOR_KEYPRESS_2_1:
  POP BC
  POP DE
  POP HL
  RET

; Check for cursor move keypresses.
;
; Used by the routines at CREATURE_SELECTED and KEY_INPUT.
MOVE_CURSOR_CHECK:
  PUSH HL
  PUSH DE
  LD A,$08
  LD ($5C6A),A
  PUSH BC
  LD A,(WIZ_IS_COMP_CONTROLLED) ; If the current wizard is computer controlled
  OR A                          ; jump to ROUTINE_CDB8_0.
  JP NZ,ROUTINE_CDB8_0          ;
  CALL $02BF              ; Keyboard ROM subroutine.
; This entry point is used by the routine at ROUTINE_CDB8.
MOVE_CURSOR_CHECK_UP:
  POP BC
  LD (LAST_KEYPRESS),A
  CP $57                  ; Key W
  JR NZ,MOVE_CURSOR_CHECK_DOWN
  LD A,$02
  LD (MAYBE_TEMP_MOVE_POINTS),A
  CALL MOVE_CURSOR_UP     ; Move cursor up.
MOVE_CURSOR_CHECK_DOWN:
  CP $58                  ; Key X
  JR NZ,MOVE_CURSOR_CHECK_LEFT
  LD A,$02
  LD (MAYBE_TEMP_MOVE_POINTS),A
  CALL MOVE_CURSOR_DOWN   ; Move cursor down.
MOVE_CURSOR_CHECK_LEFT:
  CP $41                  ; Key A
  JR NZ,MOVE_CURSOR_CHECK_RIGHT
  LD A,$02
  LD (MAYBE_TEMP_MOVE_POINTS),A
  CALL MOVE_CURSOR_LEFT   ; Move cursor left.
MOVE_CURSOR_CHECK_RIGHT:
  CP $44                  ; Key D
  JR NZ,MOVE_CURSOR_CHECK_UP_LEFT
  LD A,$02
  LD (MAYBE_TEMP_MOVE_POINTS),A
  CALL MOVE_CURSOR_RIGHT  ; Move cursor right.
MOVE_CURSOR_CHECK_UP_LEFT:
  CP $51                  ; Key Q
  JR NZ,MOVE_CURSOR_CHECK_UP_RIGHT
  LD A,$03
  LD (MAYBE_TEMP_MOVE_POINTS),A
  CALL MOVE_CURSOR_LEFT   ; Move cursor left.
  CALL MOVE_CURSOR_UP     ; Move cursor up.
MOVE_CURSOR_CHECK_UP_RIGHT:
  CP $45                  ; Key E
  JR NZ,MOVE_CURSOR_CHECK_DOWN_LEFT
  LD A,$03
  LD (MAYBE_TEMP_MOVE_POINTS),A
  CALL MOVE_CURSOR_RIGHT  ; Move cursor right.
  CALL MOVE_CURSOR_UP     ; Move cursor up.
MOVE_CURSOR_CHECK_DOWN_LEFT:
  CP $5A                  ; Key Z
  JR NZ,MOVE_CURSOR_CHECK_DOWN_RIGHT
  LD A,$03
  LD (MAYBE_TEMP_MOVE_POINTS),A
  CALL MOVE_CURSOR_DOWN   ; Move cursor down.
  CALL MOVE_CURSOR_LEFT   ; Move cursor left.
MOVE_CURSOR_CHECK_DOWN_RIGHT:
  CP $43                  ; Key C
  JR NZ,MOVE_CURSOR_CHECK_RETURN
  LD A,$03
  LD (MAYBE_TEMP_MOVE_POINTS),A
  CALL MOVE_CURSOR_RIGHT  ; Move cursor right.
  CALL MOVE_CURSOR_DOWN   ; Move cursor down.
MOVE_CURSOR_CHECK_RETURN:
  POP DE
  POP HL
  RET

; Move cursor up.
;
; Used by the routine at MOVE_CURSOR_CHECK.
MOVE_CURSOR_UP:
  DEC B
  JR NZ,MOVE_CURSOR_UP_0
  INC B
MOVE_CURSOR_UP_0:
  JR MOVE_CURSOR_RIGHT_1

; Move cursor down.
;
; Used by the routine at MOVE_CURSOR_CHECK.
MOVE_CURSOR_DOWN:
  INC B
  PUSH AF
  LD A,B
  CP $0B
  JR NZ,MOVE_CURSOR_DOWN_0
  DEC B
MOVE_CURSOR_DOWN_0:
  POP AF
  JR MOVE_CURSOR_RIGHT_1

; Move cursor left.
;
; Used by the routine at MOVE_CURSOR_CHECK.
MOVE_CURSOR_LEFT:
  DEC C
  JR NZ,MOVE_CURSOR_LEFT_0
  INC C
MOVE_CURSOR_LEFT_0:
  JR MOVE_CURSOR_RIGHT_1

; Move cursor right.
;
; Used by the routine at MOVE_CURSOR_CHECK.
MOVE_CURSOR_RIGHT:
  INC C
  PUSH AF
  LD A,C
  CP $10
  JR NZ,MOVE_CURSOR_RIGHT_0
  DEC C
MOVE_CURSOR_RIGHT_0:
  POP AF
; This entry point is used by the routines at MOVE_CURSOR_UP, MOVE_CURSOR_DOWN
; and MOVE_CURSOR_LEFT.
MOVE_CURSOR_RIGHT_1:
  RET

; Routine at BC8D
;
; Used by the routines at ROUTINE_9E38 and PRINT_CURSOR.
ROUTINE_BC8D:
  SLA B
  DEC B
  SLA C
  DEC C
  RET

; Variable - X-Y coordinates. The first byte holds the number of spaces in from
; the left, and the next holds the spaces from the top.
XY_COORDS:
  DEFB $0F,$0A

; Keyboard input.
;
; Used by the routines at CAST_SUBVERSION, CAST_RAISE_DEAD,
; DISPLAY_ARENA_READ_ONLY, PLAYER_CAST_LOCATIONAL_SPELL,
; CAST_DISBELIEVE_CHOOSE_TARGET, CAST_LIGHTNING, CAST_DARK_POWER_SELECT_TARGET,
; SELECT_CREATURE_CHECK, FLYING_MOVEMENT and RANGED_COMBAT.
KEY_INPUT:
  CALL $02BF              ; Keyboard ROM subroutine.
  CP $49                  ; If the key pressed was 'I' fall through, otherwise
  JR NZ,KEY_INPUT_0       ; jump to KEY_INPUT_0.
  CALL DISPLAY_CREATURE_INFO ; Display the 'I' key info page.
  HALT
  JR KEY_INPUT_2
KEY_INPUT_0:
  CALL $02BF              ; Keyboard ROM subroutine.
  CP $39                  ; If the user pressed 9 or higher jump to
  JP P,KEY_INPUT_2        ; KEY_INPUT_2.
  CP $31                  ; If the user pressed anything lower than 1 jump to
  JP M,KEY_INPUT_2        ; KEY_INPUT_2.
  SUB $31                 ; User pressed a number key. Subtract $31 to convert
                          ; the key code into the corresponding wizard ID
                          ; (first wizard = 0, etc.)
  LD HL,NUM_OF_WIZARDS    ; HL = mem address containing the number of wizards
                          ; in the game (NUM_OF_WIZARDS).
  CP (HL)
  JP P,KEY_INPUT_2        ; If it's too big to be a wizard ID, jump to
                          ; KEY_INPUT_2.
  LD (IDENTIFY_WIZARD_ID),A ; Set IDENTIFY_WIZARD_ID, storing the ID of the
                            ; wizard whose creations we want to identify
  CALL MAYBE_MARK_ARENA_SQUARES_0
  HALT
KEY_INPUT_1:
  CALL IDENTIFY_WIZARDS_CREATURES ; Flash the backgrounds of the creatures
                                  ; controlled by the wizard whose number was
                                  ; pressed.
  LD A,(IDENTIFY_WIZARD_ID)
  ADD A,$29
  LD BC,$1600
  LD HL,$5C8F
  LD (HL),$46
  CALL PRINT_MESSAGE_2
  LD A,$5F                ; Print the message with ID $5F ('S CREATIONS).
  CALL PRINT_MESSAGE_2    ;
  CALL $028E              ; Keyboard scanning ROM subroutine.
  INC E
  JR NZ,KEY_INPUT_1
  CALL CLEAR_MESSAGE_BAR  ; Clear the message bar.
  CALL MAYBE_MARK_ARENA_SQUARES_0
  HALT
KEY_INPUT_2:
  LD BC,(XY_COORDS)
  PUSH BC
  CALL MOVE_CURSOR_CHECK
  POP HL
  PUSH BC
  XOR A
  SBC HL,BC
  CALL NZ,CLEAR_MESSAGE_BAR
  POP BC
  LD (XY_COORDS),BC
  CALL PRINT_CURSOR
  CALL CONVERT_XY_COORDS  ; Maybe moving the cursor to a new position.
  LD (LOCATION_TARGET),HL
  LD HL,(LOCATION_TARGET)
  LD DE,$01E1             ; Add $01E1 to HL to get the corresponding location
  ADD HL,DE               ; in arena data table 4.
  LD A,(HL)               ; A = data in table 4 at the cursor position
  LD (CREATURE_STATUS_FLAGS),A ; Populate CREATURE_STATUS_FLAGS, which holds
                               ; creature data flags
  LD HL,(LOCATION_TARGET)
  LD A,$45                ; Set the colours to cyan on black ($45).
  LD ($5C8F),A            ;
  LD A,(HL)
  OR A
  JR Z,KEY_INPUT_7
  LD BC,$1600
  CALL PRINT_MESSAGE_2
  LD A,$44                ; Set the colours to green on black ($44).
  LD ($5C8F),A            ;
  LD A,(CREATURE_STATUS_FLAGS)
  BIT 3,A
  JR Z,KEY_INPUT_3
  LD A,$31                ; Print the message with ID $31 ((ASLEEP)). Note -
  CALL PRINT_MESSAGE_2    ; never used in game.
  JR Z,KEY_INPUT_7
KEY_INPUT_3:
  LD DE,$0141             ; Add $01E1 to HL to get the corresponding location
  ADD HL,DE               ; in arena data table 3.
  LD A,(HL)               ; A = status value from the current cursor location
                          ; in arena table 3.
  CP $04                  ; If A != 0, jump to KEY_INPUT_4.
  JR NZ,KEY_INPUT_4       ;
  LD A,$32                ; The creature at the space is dead. Print the
  CALL PRINT_MESSAGE_2    ; message with ID $32 ((DEAD)).
  JR KEY_INPUT_7
KEY_INPUT_4:
  LD DE,$0140             ; HL = HL + $0140, becoming the location in arena
  ADD HL,DE               ; table 5
  LD A,$47                ; Set the colours to white on black ($47).
  LD ($5C8F),A            ;
  LD A,(HL)
  OR A
  JR NZ,KEY_INPUT_5
  LD DE,$00A0
  ADD HL,DE
  LD A,(HL)
  OR A
  JR Z,KEY_INPUT_6
  LD A,$43                ; Set the colours to magenta on black ($43).
  LD ($5C8F),A            ;
KEY_INPUT_5:
  LD A,$23                ; Print the # character.
  CALL PRINT_SINGLE_CHAR  ;
KEY_INPUT_6:
  LD HL,(LOCATION_TARGET) ; A = ID of creature at cursor.
  LD A,(HL)               ;
  CP $29                  ; If A >= $29 (i.e. not a creature) jump to
  JP P,KEY_INPUT_7        ; KEY_INPUT_7.
  LD DE,$01E1             ; HL = HL + $01E1, so that it points to the
  ADD HL,DE               ; corresponding location in arena table 4.
  LD A,$46                ; Set the colours to yellow on black ($46).
  LD ($5C8F),A            ;
  LD A,$28                ; A = $28 (left bracket character)
  PUSH HL
  CALL PRINT_SINGLE_CHAR  ; Print the ( character.
  POP HL
  LD A,(HL)               ; A = data about the creature under the cursor
  AND $07                 ; Reset everything but the least 3 significant bits,
                          ; which are the ones storing the owning wizard's ID.
  ADD A,$29               ; A = A + $29, becoming the wizard's creature ID
  CALL PRINT_MESSAGE_2    ; Print the wizard's name.
  LD A,$29                ; A = $29 (right bracket character)
  CALL PRINT_SINGLE_CHAR  ; Print the ) character.
KEY_INPUT_7:
  LD B,$3C
KEY_INPUT_8:
  PUSH BC
  LD B,$F8
KEY_INPUT_9:
  DJNZ KEY_INPUT_9
  POP BC
  DJNZ KEY_INPUT_8
  CALL PRINT_CURSOR
  LD HL,(LOCATION_TARGET)
  LD A,(HL)
  OR A
  RET Z
  HALT
  HALT
  HALT
  LD DE,$00A1
  ADD HL,DE
  LD (HL),$01
  RET

; Prints the square cursor to the screen.
;
; Used by the routine at KEY_INPUT.
PRINT_CURSOR:
  LD A,$02
  CALL $1601              ; Chan-open ROM subroutine.
  LD BC,(XY_COORDS)
  CALL ROUTINE_BC8D
  LD A,$16
  RST $10
  LD A,B
  RST $10
  LD A,C
  RST $10
  LD A,$90
  RST $10
  LD A,$91
  RST $10
  INC B
  LD A,$16
  RST $10
  LD A,B
  RST $10
  LD A,C
  RST $10
  LD A,$92
  RST $10
  LD A,$93
  RST $10
  LD BC,(XY_COORDS)
  RET

; Convert XY coords stored in BC to a memory address in arena table 1, which
; gets stored in HL.
;
; Used by the routines at CREATURE_SELECTED, KEY_INPUT and
; CHECK_FOR_ADJACENT_ENEMIES_AT_XY.
CONVERT_XY_COORDS:
  PUSH BC
  DEC B
  DEC C
  SLA B
  SLA B
  SLA B
  SLA B
  LD A,B
  ADD A,C
  LD C,A
  LD B,$00
  LD HL,ARENA_STATE_1
  ADD HL,BC               ; HL = HL + BC, now pointing at a cell in arena table
                          ; 1.
  POP BC                  ; BC = the XY coords again
  RET

; Gets data about an object in the arena and saves it into memory.
;
; Used by the routine at CREATURE_SELECTED.
FETCH_OBJECT_DATA:
  LD HL,(LOCATION_TARGET)
  LD (LOCATION_SOURCE),HL
; This entry point is used by the routine at CREATURE_SELECTED.
FETCH_OBJECT_DATA_0:
  LD HL,(LOCATION_TARGET)
  LD A,(HL)
  LD (SELECTED_CREATURE_ID),A ; Set selected creature ID (SELECTED_CREATURE_ID)
                              ; to A
  LD DE,$01E1             ; Add $01E1 to HL to get the corresponding location
  ADD HL,DE               ; in arena data table 4.
  LD A,(HL)               ; A = data in table 4 at the cursor position
  LD (CREATURE_STATUS_FLAGS),A ; Populate CREATURE_STATUS_FLAGS, which holds
                               ; creature data flags
  LD DE,$00A0             ; A = data about the creature at arena table 5.
  ADD HL,DE               ;
  LD A,(HL)               ;
  LD (CREATURE_STATUS_FROM_TABLE_5),A ; Populate CREATURE_STATUS_FROM_TABLE_5,
                                      ; which holds creature data flags from
                                      ; arena table 5
  ADD HL,DE               ; A = data about the creature at arena table 6.
  LD A,(HL)               ;
  LD (CREATURE_STATUS_FROM_TABLE_6),A ; Populate CREATURE_STATUS_FROM_TABLE_6,
                                      ; which holds creature data flags from
                                      ; arena table 6
  RET

; Get creature data
;
; Given a creature ID and an offset pointing to a particular piece of data
; about a creature, set A to the piece of data.
;
; +--------------+--------------+-----------------------------------------------------+
; | Offset (hex) | Offset (dec) | Data                                                |
; +--------------+--------------+-----------------------------------------------------+
; | $00          | 00           | First char of name                                  |
; | $0D          | 13           | Combat                                              |
; | $0E          | 14           | Ranged Combat                                       |
; | $0F          | 15           | Range                                               |
; | $10          | 16           | Defence                                             |
; | $11          | 17           | Movement allowance                                  |
; | $12          | 18           | Manoeuvre rating                                    |
; | $13          | 19           | Magic resistance                                    |
; | $14          | 20           | Wizard only - no of spells? TODO                    |
; | $15          | 21           | Chaos/law value - and wizard "ability"? TODO} { $16 | 22 | TODO ??? |
; +--------------+--------------+-----------------------------------------------------+----+----------+
;
; Used by the routines at ROUTINE_859C, GET_SPELL_INFO, CAST_LIGHTNING,
; ROUTINE_9CA9, ROUTINE_9E38, MAYBE_BLOB_AND_FIRE_ACTIONS, CREATURE_SELECTED,
; ROUTINE_AF0D_MAYBE_CREATURE_TURN, ATTACK_CALC, DISPLAY_CREATURE_INFO,
; ROUTINE_C612 and ROUTINE_CBB9.
;
; I:D: The creature ID
; I:E: The offset detailing which piece of data to fetch
; O:A: Contains the data item
GET_CREATURE_DATA:
  PUSH HL
  PUSH BC
  LD HL,TABLE_CREATURE_DATA_ADDRESSES ; TABLE_CREATURE_DATA_ADDRESSES is the
                                      ; reference table describing where to get
                                      ; data on each creature.
  LD B,$00                ; Set BC to the creature ID.
  LD C,D                  ;
  DEC C                   ; Decrement C and shift left (double it) to get how
  SLA C                   ; many bytes to skip down the table.
  ADD HL,BC               ; Add BC to HL. HL will now point at the first byte
                          ; of the pair indicating the creature's data
                          ; location.
  LD C,(HL)               ; Set BC to the address for the creature's data.
  INC HL                  ;
  LD B,(HL)               ;
  LD H,$00                ; Set HL to the offset we should use: E
  LD L,E                  ;
  ADD HL,BC               ; Add BC to HL to get the memory location of the data
  LD A,(HL)               ; we want, and load the data into A.
  POP BC
  POP HL
  RET

; Check for adjacent enemies. If one is found, record its ID in
; ADJACENT_ENEMY_ID.
;
; Used by the routines at CREATURE_SELECTED and
; ROUTINE_AF0D_MAYBE_CREATURE_TURN.
CHECK_FOR_ADJACENT_ENEMIES:
  PUSH AF
  XOR A                    ; Set adjacent enemy ID (ADJACENT_ENEMY_ID) to 0.
  LD (ADJACENT_ENEMY_ID),A ;
  PUSH HL
  PUSH DE
  PUSH BC
  LD BC,(XY_COORDS)       ; BC = XY coords of the selected creature. B stores
                          ; the distance from the top and C the distance from
                          ; the left. Both start at 1.
  DEC C                                 ; Check for adjacent enemy to the left.
  CALL CHECK_FOR_ADJACENT_ENEMIES_AT_XY ;
  DEC B                                 ; Check for adjacent enemy to the top
  CALL CHECK_FOR_ADJACENT_ENEMIES_AT_XY ; left.
  INC C                                 ; Check for adjacent enemy to the top.
  CALL CHECK_FOR_ADJACENT_ENEMIES_AT_XY ;
  INC C                                 ; Check for adjacent enemy to the top
  CALL CHECK_FOR_ADJACENT_ENEMIES_AT_XY ; right.
  INC B                                 ; Check for adjacent enemy to the
  CALL CHECK_FOR_ADJACENT_ENEMIES_AT_XY ; right.
  INC B                                 ; Check for adjacent enemy to the
  CALL CHECK_FOR_ADJACENT_ENEMIES_AT_XY ; bottom right.
  DEC C                                 ; Check for adjacent enemy to the
  CALL CHECK_FOR_ADJACENT_ENEMIES_AT_XY ; bottom.
  DEC C                                 ; Check for adjacent enemy to the
  CALL CHECK_FOR_ADJACENT_ENEMIES_AT_XY ; bottom left.
  POP BC
  POP DE
  POP HL
  POP AF
  RET

; Checks for adjacent enemies in a single square at the XY coordinates stored
; in BC.
;
; Used by the routine at CHECK_FOR_ADJACENT_ENEMIES.
CHECK_FOR_ADJACENT_ENEMIES_AT_XY:
  LD A,B                  ; If we're checking off the edge of the arena (top),
  OR A                    ; return.
  RET Z                   ;
  LD A,C                  ; If we're checking off the edge of the arena (left),
  OR A                    ; return.
  RET Z                   ;
  LD A,$0F                ; If we're checking off the edge of the arena
  CP C                    ; (right), return.
  RET M                   ;
  LD A,$0A                ; If we're checking off the edge of the arena
  CP B                    ; (bottom), return.
  RET M                   ;
  CALL CONVERT_XY_COORDS  ; Convert the XY coords in BC to a mem address in
                          ; arena table 1 and store in HL.
  LD A,(HL)               ; A = the creature ID at the space we're
                          ; investigating.
  OR A                    ; If A == 0, return.
  RET Z                   ;
  PUSH HL
  LD DE,$0141             ; A = object data in arena table 3
  ADD HL,DE               ;
  LD A,(HL)               ;
  CP $04                  ; If data in table 3 equals 4 (i.e. it's a dead
  POP HL                  ; creature), return.
  RET Z                   ;
  LD A,(HL)               ; A = creature ID.
  CP $22                                  ; If A >= $22 (i.e. a blob or tree or
  JP P,CHECK_FOR_ADJACENT_ENEMIES_AT_XY_0 ; wall, and not a moving creature)
                                          ; jump to
                                          ; CHECK_FOR_ADJACENT_ENEMIES_AT_XY_0.
  LD DE,$01E1             ; A = corresponding data in arena table 4.
  ADD HL,DE               ;
  LD A,(HL)               ;
  AND $07                 ; Reset everything but the least 3 significant bits,
                          ; which are the ones storing the owning wizard's ID.
  INC A                     ; If the creature is owned by the wizard whose turn
  LD HL,(CURRENT_WIZARD_ID) ; it currently is, return. Both are incremented
  INC L                     ; before comparison so that we can use the zero
  CP L                      ; flag.
  RET Z                     ;
  JR CHECK_FOR_ADJACENT_ENEMIES_AT_XY_1
CHECK_FOR_ADJACENT_ENEMIES_AT_XY_0:
  SUB $29                 ; If the adjacent object isn't that of a wizard,
  RET M                   ; return.
  INC A                     ; There's an adjacent wizard. Return if it's the
  LD HL,(CURRENT_WIZARD_ID) ; wizard that controls the selected creature.
  INC L                     ;
  CP L                      ;
  RET Z                     ;
CHECK_FOR_ADJACENT_ENEMIES_AT_XY_1:
  LD (ADJACENT_ENEMY_ID),A ; There's an adjacent enemy. Record it in
                           ; ADJACENT_ENEMY_ID.
  RET

; Gets a random num between 0 and 9 inclusive, and loads it into A.
;
; Used by the routines at CAST_SPELLS, SPELL_ATTEMPT, CAST_CREATURE,
; CAST_LIGHTNING, ROUTINE_9CA9, ROUTINE_9E38, SPREAD_BLOB_AND_FIRE,
; MAYBE_BLOB_AND_FIRE_ACTIONS, CREATURE_SELECTED and ATTACK_CALC.
GET_RANDOM_NUM_0_TO_9:
  PUSH HL
  PUSH DE
GET_RANDOM_NUM_0_TO_9_0:
  LD A,R                  ; TODO R register - perhaps generating random number?
  LD E,A
  LD HL,$E0B5
  LD D,$00
  ADD HL,DE
  LD A,(HL)
  LD E,A
  LD A,R
  ADD A,E
  LD HL,$5C76             ; HL = $5C76 (the seed for RND)
  ADD A,(HL)
  AND $0F
  CP $0A
  JP P,GET_RANDOM_NUM_0_TO_9_0
  POP DE
  POP HL
  RET

; Engaged to enemy
;
; Used by the routines at CREATURE_SELECTED and
; ROUTINE_AF0D_MAYBE_CREATURE_TURN.
ENGAGED_TO_ENEMY:
  PUSH AF
  PUSH BC
  XOR A                   ; Set SELECT_SQUARE_RANGE (the select square range)
                          ; to 0.
  LD (SELECT_SQUARE_RANGE),A
  LD A,$01                   ; Set CREATURE_IS_ENGAGED to indicate that the
  LD (CREATURE_IS_ENGAGED),A ; creature is engaged in combat.
  LD A,$46                ; Set the colours to yellow on black ($46).
  LD ($5C8F),A            ;
  LD A,$34                ; Print the message with ID $34 (ENGAGED TO ENEMY) at
  LD BC,$1600             ; screen position $1600. Clear the message bar.
  CALL CLEAR_MESSAGE_BAR  ;
  CALL PRINT_MESSAGE_2    ;
  LD HL,$C289
  CALL SOUND_EFFECT_0
  EI
  POP BC
  POP AF
  RET

; Clear the message bar.
;
; Used by the routines at CAST_SUBVERSION, CAST_RAISE_DEAD,
; CHECK_TREES_FOR_NEW_SPELL, SPELL_MENU, CAST_SPELLS, COMP_WIZ_CASTS_SPELL,
; DISPLAY_SUCCESS_FAIL_MESSAGE, PLAYER_CAST_LOCATIONAL_SPELL, CAST_LIGHTNING,
; CAST_DARK_POWER_SELECT_TARGET, WIZARD_TURN, SELECT_CREATURE_CHECK,
; CREATURE_SELECTED, ROUTINE_AF0D_MAYBE_CREATURE_TURN, FLYING_MOVEMENT,
; ATTACK_CALC, RANGED_COMBAT, KEY_INPUT and ENGAGED_TO_ENEMY.
CLEAR_MESSAGE_BAR:
  PUSH AF
  PUSH DE
  PUSH HL
  PUSH BC
  LD A,$01                ; Print the message with ID $01 (empty string) at
  LD BC,$1600             ; screen position $1600.
  CALL PRINT_MESSAGE_2    ;
  POP BC
  POP HL
  POP DE
  POP AF
  RET

; Variable - the distance between two coordinates
VAR_DISTANCE:
  DEFB $02

; Variable - maybe the spell casting source location coordinates
VAR_MAYBE_SPELL_SOURCE_COORDS:
  DEFB $07,$06

; Variable - maybe the spell casting destination coordinates
VAR_MAYBE_SPELL_DESTINATION_COORDS:
  DEFB $07,$05

; Variable - temp variable used by get distance function (GET_DISTANCE) TODO X
; and Y diffs?
VAR_TEMP_GET_DISTANCE_1:
  DEFB $00

; Variable - temp variable used by get distance function (GET_DISTANCE)
VAR_TEMP_GET_DISTANCE_2:
  DEFB $01

; Gets the distance between two coordinates at VAR_MAYBE_SPELL_SOURCE_COORDS
; and VAR_MAYBE_SPELL_DESTINATION_COORDS and saves the result at VAR_DISTANCE.
;
; Used by the routines at SPELL_RANGE_CHECK, FLYING_MOVEMENT, RANGED_COMBAT,
; ROUTINE_C67A, ROUTINE_C7BC, ROUTINE_C8C7, MAYBE_COMP_WIZARD_MOVEMENT,
; ROUTINE_CA7C, ROUTINE_CBC7 and ROUTINE_CBCC.
GET_DISTANCE:
  PUSH BC
  PUSH HL
  PUSH DE
  PUSH AF
  XOR A
  LD HL,(VAR_MAYBE_SPELL_SOURCE_COORDS)
  LD DE,(VAR_MAYBE_SPELL_DESTINATION_COORDS)
  LD A,D
  CP H
  JP M,GET_DISTANCE_0
  SUB H
  LD (VAR_TEMP_GET_DISTANCE_2),A
  JR GET_DISTANCE_1
GET_DISTANCE_0:
  LD A,H
  SUB D
  LD (VAR_TEMP_GET_DISTANCE_2),A
GET_DISTANCE_1:
  LD A,E
  CP L
  JP M,GET_DISTANCE_2
  SUB L
  LD (VAR_TEMP_GET_DISTANCE_1),A
  JR GET_DISTANCE_3
GET_DISTANCE_2:
  LD A,L
  SUB E
  LD (VAR_TEMP_GET_DISTANCE_1),A
GET_DISTANCE_3:
  LD HL,(VAR_TEMP_GET_DISTANCE_1)
  LD A,H
  CP L
  JP M,GET_DISTANCE_4
  SLA H
  LD A,H
  ADD A,L
  JR GET_DISTANCE_5
GET_DISTANCE_4:
  SLA L
  LD A,L
  ADD A,H
GET_DISTANCE_5:
  LD E,A
  LD (VAR_DISTANCE),A
  POP AF
  CP E
  POP DE
  POP HL
  POP BC
  RET

; Graphics - star animation
GRAPHICS_STAR_ANIMATION:
  DEFB $01,$40,$00,$00,$01,$05,$03,$8F ; Frame 1
  DEFB $00,$04,$00,$00,$00,$40,$80,$E2 ;
  DEFB $03,$05,$01,$00,$00,$40,$01,$00 ;
  DEFB $80,$40,$00,$00,$00,$04,$00,$00 ;
  DEFB $00,$00,$00,$01,$09,$05,$00,$1C ; Frame 2
  DEFB $00,$00,$00,$00,$20,$40,$00,$70 ;
  DEFB $00,$05,$09,$01,$00,$00,$00,$00 ;
  DEFB $00,$40,$20,$00,$00,$00,$00,$00 ;
  DEFB $00,$00,$01,$11,$08,$00,$00,$30 ; Frame 3
  DEFB $00,$00,$00,$10,$20,$00,$00,$18 ;
  DEFB $00,$00,$08,$11,$01,$00,$00,$00 ;
  DEFB $00,$00,$20,$10,$00,$00,$00,$00 ;
  DEFB $00,$01,$21,$10,$00,$00,$00,$61 ; Frame 4
  DEFB $00,$00,$08,$10,$00,$00,$00,$0C ;
  DEFB $00,$00,$00,$10,$21,$01,$00,$00 ;
  DEFB $00,$00,$00,$10,$08,$00,$00,$00 ;

; Graphics - circle animation
GRAPHICS_CIRCLE_ANIMATION:
  DEFB $00,$00,$00,$00,$00,$00,$00,$01 ; Frame 1
  DEFB $00,$00,$00,$00,$00,$00,$00,$80 ;
  DEFB $01,$00,$00,$00,$00,$00,$00,$00 ;
  DEFB $80,$00,$00,$00,$00,$00,$00,$00 ;
  DEFB $00,$00,$00,$00,$00,$01,$03,$07 ; Frame 2
  DEFB $00,$00,$00,$00,$00,$80,$C0,$E0 ;
  DEFB $07,$03,$01,$00,$00,$00,$00,$00 ;
  DEFB $E0,$C0,$80,$00,$00,$00,$00,$00 ;
  DEFB $00,$00,$00,$03,$0F,$0F,$1F,$1F ; Frame 3
  DEFB $00,$00,$00,$C0,$F0,$F0,$F8,$F8 ;
  DEFB $1F,$1F,$0F,$0F,$03,$00,$00,$00 ;
  DEFB $F8,$F8,$F0,$F0,$C0,$00,$00,$00 ;
  DEFB $00,$07,$1F,$3F,$3F,$7F,$7F,$7F ; Frame 4
  DEFB $00,$E0,$F8,$FC,$FC,$FE,$FE,$FE ;
  DEFB $7F,$7F,$7F,$3F,$3F,$1F,$07,$00 ;
  DEFB $FE,$FE,$FE,$FC,$FC,$F8,$E0,$00 ;
  DEFB $07,$1F,$3F,$7F,$7F,$FF,$FF,$FE ; Frame 5
  DEFB $E0,$F8,$FC,$FE,$FE,$FF,$FF,$7F ;
  DEFB $FE,$FF,$FF,$7F,$7F,$3F,$1F,$07 ;
  DEFB $7F,$FF,$FF,$FE,$FE,$FC,$F8,$E0 ;
  DEFB $07,$1F,$3F,$7F,$7F,$FC,$F8,$F8 ; Frame 6
  DEFB $E0,$F8,$FC,$FE,$FE,$3F,$1F,$1F ;
  DEFB $F8,$F8,$FC,$7F,$7F,$3F,$1F,$07 ;
  DEFB $1F,$1F,$3F,$FE,$FE,$FC,$F8,$E0 ;
  DEFB $07,$1F,$3F,$7C,$70,$F0,$E0,$E0 ; Frame 7
  DEFB $E0,$F8,$FC,$3E,$0E,$0F,$07,$07 ;
  DEFB $E0,$E0,$F0,$70,$7C,$3F,$1F,$07 ;
  DEFB $07,$07,$0F,$0E,$3E,$FC,$F8,$E0 ;
  DEFB $07,$18,$20,$40,$40,$80,$80,$80 ; Frame 8
  DEFB $E0,$18,$04,$02,$02,$01,$01,$01 ;
  DEFB $80,$80,$80,$40,$40,$20,$18,$07 ;
  DEFB $01,$01,$01,$02,$02,$04,$18,$E0 ;

; Data block at C0B7
  DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Data block at C0BF
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Data block at C0D7
VAR_C0D7:
  DEFB $00

; Routine at C0D8 - maybe marks valid squares for casting creatures in arena?
;
; Used by the routine at RANGED_COMBAT.
MAYBE_MARK_ARENA_SQUARES:
  LD A,$01
  LD (VAR_C0D7),A
; This entry point is used by the routines at CAST_MAGIC_ARMOUR,
; CAST_MAGIC_SWORD, CAST_MAGIC_KNIFE, CAST_MAGIC_SHIELD, CAST_MAGIC_WINGS,
; CAST_MAGIC_BOW, ATTEMPT_RAISE_DEAD, CHECK_TREES_FOR_NEW_SPELL,
; DISPLAY_ARENA_READ_ONLY, CAST_SPELLS, PLAYER_CAST_LOCATIONAL_SPELL,
; ROUTINE_98DB, DISPLAY_EXPLOSION_ANIMATION, CAST_TREES_OR_CASTLE,
; CAST_LIGHTNING, ROUTINE_9CA9, ROUTINE_9E38, SPREAD_BLOB_AND_FIRE,
; MAYBE_BLOB_AND_FIRE_ACTIONS, DISPLAY_CAST_ANIMATION, WIZARD_TURN,
; SELECT_CREATURE_CHECK, WIZARD_DEATH, RANGED_COMBAT, KEY_INPUT,
; DISPLAY_CREATURE_INFO and COMP_WIZ_TURN.
MAYBE_MARK_ARENA_SQUARES_0:
  DI
  LD B,$A0
  LD HL,ARENA_STATE_1
MAYBE_MARK_ARENA_SQUARES_1:
  LD A,(HL)
  OR A
  JR NZ,MAYBE_MARK_ARENA_SQUARES_2
  PUSH HL
  LD DE,ARENA_STATE_1
  SBC HL,DE
  LD A,L
  INC A
  AND $0F
  POP HL
  JR Z,MAYBE_MARK_ARENA_SQUARES_2
  LD A,$01
  LD (HL),A
  LD DE,$0141             ; Add $0141 to HL to point it at the corresponding
  ADD HL,DE               ; space in arena table 3.
  XOR A
  LD (HL),A
  SBC HL,DE
MAYBE_MARK_ARENA_SQUARES_2:
  INC HL
  DJNZ MAYBE_MARK_ARENA_SQUARES_1
  LD HL,ARENA_STATE_2     ; Set all of arena table 2 to contain the value 1.
  LD DE,$E0C1             ; TODO Why?
  LD BC,$009F             ;
  LD (HL),$01             ;
  LDIR                    ;
  LD A,(VAR_C0D7)
  OR A
  JR NZ,MAYBE_MARK_ARENA_SQUARES_3
  LD A,$41                ; Draw the border in blue on black ($41).
  LD ($5C8F),A            ;
  CALL DRAW_BORDER        ;
MAYBE_MARK_ARENA_SQUARES_3:
  XOR A
  LD (VAR_C0D7),A
  EI
  RET

; Graphics - dragon fire animation
GRAPHICS_DRAGON_FIRE:
  DEFB $00,$00,$00,$00,$00,$00,$04,$03
  DEFB $00,$00,$00,$00,$00,$00,$80,$80
  DEFB $01,$02,$00,$00,$00,$00,$00,$00
  DEFB $C0,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$04,$06,$03
  DEFB $00,$00,$00,$00,$00,$40,$80,$C0
  DEFB $05,$02,$04,$00,$00,$00,$00,$00
  DEFB $F0,$A0,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$04,$08,$0A,$0C,$06,$03
  DEFB $00,$00,$00,$80,$60,$C0,$80,$90
  DEFB $0B,$06,$00,$08,$00,$00,$00,$00
  DEFB $E0,$50,$00,$00,$00,$00,$00,$00
  DEFB $00,$02,$24,$08,$0A,$02,$0B,$27
  DEFB $00,$40,$20,$60,$40,$20,$C4,$E8
  DEFB $13,$0D,$00,$08,$00,$00,$00,$00
  DEFB $B0,$40,$44,$00,$00,$00,$00,$00
  DEFB $00,$02,$04,$01,$02,$0A,$4A,$47
  DEFB $40,$20,$44,$42,$0A,$B2,$C4,$F0
  DEFB $23,$19,$00,$00,$00,$40,$00,$00
  DEFB $A0,$40,$00,$02,$20,$00,$00,$00
  DEFB $02,$00,$09,$0A,$42,$46,$04,$42
  DEFB $40,$44,$02,$0A,$90,$80,$08,$10
  DEFB $10,$00,$01,$00,$00,$00,$00,$00
  DEFB $10,$00,$20,$00,$00,$20,$00,$00
  DEFB $01,$09,$0A,$20,$44,$04,$40,$00
  DEFB $44,$04,$02,$88,$80,$00,$08,$10
  DEFB $00,$00,$00,$01,$00,$00,$00,$00
  DEFB $00,$00,$00,$10,$00,$00,$20,$00
  DEFB $09,$00,$20,$04,$00,$00,$00,$00
  DEFB $04,$00,$88,$00,$00,$08,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Data block at C22B
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Data block at C243
VAR_C243_MAYBE_TABLE:
  DEFB $32,$01,$0A,$1E,$32,$46,$14,$32
  DEFB $50,$8C,$05,$04,$0A,$14,$1E,$28
  DEFB $0A,$14,$1E,$28,$F0,$02,$14,$2E
  DEFB $39,$50,$FF,$FE,$FD,$FC,$14,$02
  DEFB $28,$28,$46,$64,$02,$03,$3C,$64

; Data block at C26B
VAR_C26B_MAYBE_TABLE:
  DEFB $01,$01,$0A,$0A,$28,$46,$02,$02
  DEFB $46,$28,$01,$04,$01,$02,$03,$04
  DEFB $01,$01,$01,$01,$FF,$01,$FF,$FF
  DEFB $FF,$FF,$FC,$FC,$FC,$FC,$20,$04
  DEFB $FF,$FF,$1E,$3C,$FA,$FA,$28,$50

; Data block at C293
VAR_C293_MAYBE_SOUND_EFFECT:
  DEFB $3F,$04,$01,$01,$28,$43,$04,$04
  DEFB $E2,$B0,$06,$03,$01,$01,$14,$1E
  DEFB $04,$04,$11,$17,$01,$01,$FF,$FF
  DEFB $FF,$FF,$FF,$FF,$FF,$FF,$32,$01
  DEFB $01,$01,$FF,$FF,$32,$32,$CE,$CE

; Sound effect - TODO identify
SOUND_EFFECT_C2BB:
  DEFB $7F,$01,$01,$01,$0F,$12,$05,$05
  DEFB $17,$25,$14,$03,$FF,$FF,$FF,$FF
  DEFB $FF,$FF,$F9,$E9,$5A,$01,$FF,$FF
  DEFB $FF,$FF,$00,$FF,$FF,$FE,$18,$0C
  DEFB $0C,$2E,$50,$A0,$18,$2F,$65,$9A

; Sound effect - menu chirp
SOUND_EFFECT_MENU_CHIRP:
  DEFB $14,$04,$17,$2D,$38,$3F,$04,$FD
  DEFB $FD,$C6,$93,$04,$04,$E2,$B0

; Data block at C2F2
VAR_C2F2_MAYBE_SOUND_EFFECT:
  DEFB $30

; Data block at C2F3
SOUND_EFFECT_C2F3:
  DEFB $9D,$C2,$00

; Play sound effect.
;
; Used by the routines at DISPLAY_EXPLOSION_ANIMATION, CAST_LIGHTNING,
; ROUTINE_9CA9, ROUTINE_9E38, MAYBE_BLOB_AND_FIRE_ACTIONS,
; DISPLAY_CAST_ANIMATION and RANGED_COMBAT.
SOUND_EFFECT:
  LD HL,(SOUND_EFFECT_C2F3)
; This entry point is used by the routines at CAST_SUBVERSION, CAST_RAISE_DEAD,
; KEYS_INPUT_NUMBERS, MAIN_LOOP, CHECK_TREES_FOR_NEW_SPELL, PRE_TURN_MENU,
; SPELL_MENU, DISPLAY_SPELL_INFO, ROUTINE_96D1, PLAYER_CAST_LOCATIONAL_SPELL,
; CAST_DISBELIEVE_CHOOSE_TARGET, CAST_LIGHTNING, CAST_DARK_POWER_SELECT_TARGET,
; MAYBE_BLOB_AND_FIRE_ACTIONS, SELECT_CREATURE_CHECK, CREATURE_SELECTED,
; ROUTINE_AF0D_MAYBE_CREATURE_TURN, FLYING_MOVEMENT, ATTACK_CALC,
; DISPLAY_ATTACK_ANIMATION, WIZARD_DEATH, RANGED_COMBAT, ENGAGED_TO_ENEMY and
; DISPLAY_CREATURE_INFO.
SOUND_EFFECT_0:
  LD DE,$C2E8
  LD BC,$000A
  LDIR
; This entry point is used by the routines at DISPLAY_EXPLOSION_ANIMATION,
; CAST_LIGHTNING, ROUTINE_9CA9, ROUTINE_9E38, DISPLAY_CAST_ANIMATION,
; DISPLAY_ATTACK_ANIMATION, WIZARD_DEATH, ROUTINE_B7D3 and RANGED_COMBAT.
SOUND_EFFECT_1:
  DI
  LD HL,$C2E8
  LD B,(HL)
SOUND_EFFECT_2:
  PUSH BC
  LD HL,$C2E9
  LD B,(HL)
SOUND_EFFECT_3:
  PUSH BC
  LD B,$04
  LD HL,$C2EA
SOUND_EFFECT_4:
  PUSH BC
  PUSH HL
  LD B,(HL)
  CALL ROUTINE_C33A
  LD A,(VAR_C2F2_MAYBE_SOUND_EFFECT)
  XOR $30
  LD (VAR_C2F2_MAYBE_SOUND_EFFECT),A
  OUT ($FE),A
  POP HL
  INC HL
  POP BC
  DJNZ SOUND_EFFECT_4
  POP BC
  DJNZ SOUND_EFFECT_3
  LD B,$04
  EX DE,HL
  LD HL,$C2EA
SOUND_EFFECT_5:
  LD A,(DE)
  ADD A,(HL)
  LD (HL),A
  INC DE
  INC HL
  DJNZ SOUND_EFFECT_5
  POP BC
  DJNZ SOUND_EFFECT_2
  RET

; Routine at C33A
;
; Used by the routine at SOUND_EFFECT.
ROUTINE_C33A:
  DJNZ ROUTINE_C33A
  RET

; Graphics - cursor1
GRAPHICS_CURSOR_1:
  DEFB $FF,$FF,$C0,$C0,$C0,$C0,$C0,$C0
  DEFB $FF,$FF,$03,$03,$03,$03,$03,$03
  DEFB $C0,$C0,$C0,$C0,$C0,$C0,$FF,$FF
  DEFB $03,$03,$03,$03,$03,$03,$FF,$FF

; Graphics - cursor - wings
GRAPHICS_CURSOR_WINGS:
  DEFB $C0,$E0,$70,$30,$00,$00,$1C,$3E
  DEFB $03,$07,$0E,$0C,$00,$00,$38,$7C
  DEFB $63,$01,$01,$02,$30,$70,$E0,$C0
  DEFB $C6,$80,$80,$40,$0C,$0E,$07,$03

; Graphics - cursor2
GRAPHICS_CURSOR_2:
  DEFB $F8,$E0,$F0,$B8,$98,$00,$00,$00
  DEFB $1F,$07,$0F,$1D,$19,$00,$00,$00
  DEFB $00,$00,$00,$98,$B8,$F0,$E0,$F8
  DEFB $00,$00,$00,$19,$1D,$0F,$07,$3F

; Data block at C39D
VAR_C39D:
  DEFB $00

; Data block at C39E
VAR_C39E:
  DEFB $00

; Data block at C39F
VAR_C39F:
  DEFB $00

; Data block at C3A0
VAR_C3A0:
  DEFB $00

; Data block at C3A1
VAR_C3A1:
  DEFB $00

; Data block at C3A2
VAR_C3A2:
  DEFB $00

; Data block at C3A3
VAR_C3A3:
  DEFB $00

; Variable - current chaos/law world tendency. Positive indicates lawful,
; negative indicates chaotic.
CHAOS_LAW_LEVEL:
  DEFB $03

; Data block at C3A5
VAR_C3A5_MAYBE_TABLE:
  DEFB $04,$06,$04,$08,$15,$08,$04,$0A
  DEFB $04,$0C,$04,$0E,$04,$10

; Display the 'I' key information screen
;
; Used by the routines at DISPLAY_ARENA_READ_ONLY, DISPLAY_SPELL_INFO,
; CREATURE_SELECTED, FLYING_MOVEMENT and KEY_INPUT.
DISPLAY_CREATURE_INFO:
  DI                      ; Disable interrupts.
  PUSH HL                 ; Save the register states.
  PUSH DE                 ;
  PUSH BC                 ;
  PUSH AF                 ;
  LD HL,(LOCATION_TARGET) ; Load A with a byte representing the object at the
  LD A,(HL)               ; current location. (See game state info table at
                          ; ARENA_STATE_1.)
  OR A                          ; If A is zero, there's nothing there and we
  JP Z,DISPLAY_CREATURE_INFO_24 ; can return without doing anything.
  LD (VAR_C39F),A
  LD HL,VAR_C39E
  RES 1,(HL)
  CP $29
  JP M,DISPLAY_CREATURE_INFO_1
  SET 1,(HL)
DISPLAY_CREATURE_INFO_1:
  LD DE,$0281             ; A = the creature's data from arena table 5.
  LD HL,(LOCATION_TARGET) ;
  ADD HL,DE               ;
  LD A,(HL)               ;
  OR A                         ; If A == 0 jump to DISPLAY_CREATURE_INFO_2.
  JR Z,DISPLAY_CREATURE_INFO_2 ;
  LD (VAR_C39D),A
  LD HL,VAR_C39E
  SET 2,(HL)
DISPLAY_CREATURE_INFO_2:
  CALL CLEAR_SCREEN       ; Clear the screen.
  LD HL,SOUND_EFFECT_MENU_CHIRP
  CALL SOUND_EFFECT_0
  LD A,$44                ; Draw the border in green on black ($44).
  LD ($5C8F),A            ;
  CALL DRAW_BORDER        ;
  LD A,$60                ; Set the colours to black on green ($60).
  LD ($5C8F),A            ;
  LD A,$3D                ; Print the message with ID $3D (PRESS ANY KEY) at
  LD BC,$1600             ; screen position $1600.
  CALL PRINT_MESSAGE_2    ;
  LD A,$46                ; Set the colours to yellow on black ($46).
  LD ($5C8F),A            ;
  LD BC,$0204
  LD A,(VAR_C39F)
  CALL PRINT_MESSAGE_2
  XOR A
  LD (VAR_C3A0),A
  LD HL,VAR_C39E
  BIT 1,(HL)
  JR Z,DISPLAY_CREATURE_INFO_8
  LD BC,$0404
  LD A,(VAR_C39F)
  SUB $29
  LD HL,WIZARD_STATUS_VALUES
  LD D,$00
  LD E,A
  ADD HL,DE
  LD A,(HL)
  LD (VAR_C3A1),A
  BIT 1,A
  JR Z,DISPLAY_CREATURE_INFO_3
  LD A,$3E
  CALL ROUTINE_C5FC
DISPLAY_CREATURE_INFO_3:
  LD HL,VAR_C3A1
  BIT 2,(HL)
  JR Z,DISPLAY_CREATURE_INFO_4
  LD A,$3F
  CALL ROUTINE_C5FC
DISPLAY_CREATURE_INFO_4:
  LD A,(VAR_C3A1)
  AND $C0
  CP $C0
  JR NZ,DISPLAY_CREATURE_INFO_5
  LD A,$40
  CALL ROUTINE_C5FC
DISPLAY_CREATURE_INFO_5:
  LD A,(VAR_C3A1)
  AND $C0
  CP $40
  JR NZ,DISPLAY_CREATURE_INFO_6
  LD A,$41
  CALL ROUTINE_C5FC
DISPLAY_CREATURE_INFO_6:
  LD A,(VAR_C3A1)
  BIT 5,A
  JR Z,DISPLAY_CREATURE_INFO_7
  LD A,$42
  CALL ROUTINE_C5FC
DISPLAY_CREATURE_INFO_7:
  LD A,(VAR_C3A1)
  BIT 3,A
  JP Z,DISPLAY_CREATURE_INFO_15
  LD A,$43
  CALL ROUTINE_C5FC
  JP DISPLAY_CREATURE_INFO_15
DISPLAY_CREATURE_INFO_8:
  INC C
  LD A,(VAR_C39F)
  LD D,A
  LD E,$15                ; A = the creature's chaos/law value.
  CALL GET_CREATURE_DATA  ;
  OR A
  JR Z,DISPLAY_CREATURE_INFO_10
  PUSH AF
  JP M,DISPLAY_CREATURE_INFO_9
  LD A,$45                ; Set the colours to cyan on black ($45).
  LD ($5C8F),A            ;
  LD A,$47                ; Print the message with ID $47 ((LAW).
  CALL PRINT_MESSAGE_2    ;
  POP AF
  ADD A,$30
  CALL PRINT_SINGLE_CHAR
  LD A,$29
  CALL PRINT_SINGLE_CHAR
  JR DISPLAY_CREATURE_INFO_10
DISPLAY_CREATURE_INFO_9:
  LD A,$43                ; Set the colours to magenta on black ($43).
  LD ($5C8F),A            ;
  LD A,$46                ; Print the message with ID $46 ((CHAOS).
  CALL PRINT_MESSAGE_2    ;
  POP AF
  NEG
  ADD A,$30
  CALL PRINT_SINGLE_CHAR
  LD A,$29
  CALL PRINT_SINGLE_CHAR
DISPLAY_CREATURE_INFO_10:
  LD A,$44                ; Set the colours to green on black ($44).
  LD ($5C8F),A            ;
  LD BC,$0404
  LD A,(VAR_C39F)
  CP $10
  JP M,DISPLAY_CREATURE_INFO_11
  CP $16
  JP P,DISPLAY_CREATURE_INFO_11
  LD A,$44
  CALL ROUTINE_C5FC
DISPLAY_CREATURE_INFO_11:
  LD A,(VAR_C39D)
  OR A
  JR Z,DISPLAY_CREATURE_INFO_12
  PUSH AF
  LD A,$28
  CALL PRINT_SINGLE_CHAR
  POP AF
  CALL PRINT_MESSAGE_2
  LD A,$29
  CALL PRINT_SINGLE_CHAR
  LD A,$01
  LD (VAR_C3A0),A
DISPLAY_CREATURE_INFO_12:
  LD A,(VAR_C39F)
  CP $13
  JP M,DISPLAY_CREATURE_INFO_13
  CP $1E
  JP P,DISPLAY_CREATURE_INFO_13
  LD A,$42
  CALL ROUTINE_C5FC
DISPLAY_CREATURE_INFO_13:
  LD HL,(LOCATION_TARGET)
  LD DE,$01E1
  ADD HL,DE
  BIT 6,(HL)
  JR NZ,DISPLAY_CREATURE_INFO_14
  LD A,(VAR_C39F)
  CP $1C
  JP M,DISPLAY_CREATURE_INFO_15
  CP $22
  JP P,DISPLAY_CREATURE_INFO_15
DISPLAY_CREATURE_INFO_14:
  LD A,$45
  CALL ROUTINE_C5FC
DISPLAY_CREATURE_INFO_15:
  LD A,$45                ; Set the colours to cyan on black ($45).
  LD ($5C8F),A            ;
  LD A,$48
  LD (VAR_C3A3),A
  LD A,$0D
  LD (VAR_C3A2),A
  LD HL,VAR_C3A5_MAYBE_TABLE
  LD B,$07
DISPLAY_CREATURE_INFO_16:
  PUSH BC
  LD C,(HL)
  INC HL
  LD B,(HL)
  INC HL
  PUSH HL
  CALL ROUTINE_C612
  POP HL
  POP BC
  DJNZ DISPLAY_CREATURE_INFO_16
  LD A,(VAR_C39E)
  BIT 0,A
  JR Z,DISPLAY_CREATURE_INFO_19
  LD A,$45                ; Set the colours to cyan on black ($45).
  LD ($5C8F),A            ;
  LD A,$4F                ; Print the message with ID $4F (CASTING CHANCE=) at
  LD BC,$1204             ; screen position $1204.
  CALL PRINT_MESSAGE_2    ;
  LD A,($FFFF)
  INC A
  CP $0A
  JR NZ,DISPLAY_CREATURE_INFO_17
  LD A,$50                ; Print the message with ID $50 (10).
  CALL PRINT_MESSAGE_2    ;
  JR DISPLAY_CREATURE_INFO_18
DISPLAY_CREATURE_INFO_17:
  ADD A,$30               ; Add $30 to get the character map code for the first
  CALL PRINT_SINGLE_CHAR  ; digit in the casting chance, and print it.)
DISPLAY_CREATURE_INFO_18:
  LD A,$30                ; Print "0".
  CALL PRINT_SINGLE_CHAR  ;
  LD A,$25                ; Print "%".
  CALL PRINT_SINGLE_CHAR  ;
DISPLAY_CREATURE_INFO_19:
  LD A,(VAR_C39E)
  BIT 1,A
  JR Z,DISPLAY_CREATURE_INFO_22
  LD A,$46                ; Set the colours to yellow on black ($46).
  LD ($5C8F),A            ;
  LD A,$51                ; Print the message with ID $51 (SPELLS=) at screen
  LD BC,$1204             ; position $1204.
  CALL PRINT_MESSAGE_2    ;
  LD A,(VAR_C39F)
  LD D,A
  LD E,$14                ; A = the wizard's spells value.
  CALL GET_CREATURE_DATA  ;
  CP $0A                        ; If A < 10 jump to DISPLAY_CREATURE_INFO_21.
  JP M,DISPLAY_CREATURE_INFO_21 ;
  CP $14                         ; If A == 20 jump to DISPLAY_CREATURE_INFO_20.
  JR NZ,DISPLAY_CREATURE_INFO_20 ;
  LD A,$32                ; Print "2".
  CALL PRINT_SINGLE_CHAR  ;
  LD A,$00
  JR DISPLAY_CREATURE_INFO_21
DISPLAY_CREATURE_INFO_20:
  SUB $0A
  PUSH AF
  LD A,$31
  CALL PRINT_SINGLE_CHAR
  POP AF
DISPLAY_CREATURE_INFO_21:
  ADD A,$30
  CALL PRINT_SINGLE_CHAR
  LD BC,$120E             ; Print the message with ID $52 (ABILITY=) at screen
  LD A,$52                ; position $120E.
  CALL PRINT_MESSAGE_2    ;
  LD A,(VAR_C39F)
  LD D,A
  LD E,$15
  CALL GET_CREATURE_DATA  ; A = ... TODO usually the creature's chaos/law
  ADD A,$30               ; value, but when it's a wizard?
  CALL PRINT_SINGLE_CHAR
DISPLAY_CREATURE_INFO_22:
  LD A,(VAR_C39D)
  OR A
  JR Z,DISPLAY_CREATURE_INFO_23
  LD HL,VAR_C39E
  RES 1,(HL)
  LD (VAR_C39F),A
  XOR A
  LD (VAR_C39D),A
  CALL WAIT_FOR_KEYPRESS_2
  CALL WAIT_FOR_KEYPRESS_1 ; Wait for keypress
  JP DISPLAY_CREATURE_INFO_2
DISPLAY_CREATURE_INFO_23:
  CALL WAIT_FOR_KEYPRESS_2
  CALL WAIT_FOR_KEYPRESS_1 ; Wait for keypress
  CALL CLEAR_SCREEN       ; Clear the screen.
  CALL MAYBE_MARK_ARENA_SQUARES_0
DISPLAY_CREATURE_INFO_24:
  POP HL                  ; Restore the register states.
  POP DE                  ;
  POP BC                  ;
  POP AF                  ;
  EI                      ; Re-enable interrupts.
  RET

; Clear screen.
;
; Used by the routines at MAIN_LOOP, PRE_TURN_MENU, DISPLAY_ARENA_READ_ONLY,
; SPELL_MENU, DISPLAY_SPELL_INFO, CAST_SPELLS and DISPLAY_CREATURE_INFO.
CLEAR_SCREEN:
  LD HL,DISPLAY_FILE
  LD DE,$4001
  LD BC,$1AFF
  LD (HL),$00
  LDIR
  RET

; Routine at C5FC
;
; Used by the routine at DISPLAY_CREATURE_INFO.
ROUTINE_C5FC:
  PUSH AF
  LD A,(VAR_C3A0)
  OR A
  JR Z,ROUTINE_C5FC_0
  LD A,$2C
  CALL PRINT_SINGLE_CHAR
ROUTINE_C5FC_0:
  POP AF
  CALL PRINT_MESSAGE_2
  LD A,$01
  LD (VAR_C3A0),A
  RET

; Routine at C612
;
; Used by the routine at DISPLAY_CREATURE_INFO.
ROUTINE_C612:
  LD A,(VAR_C3A3)
  PUSH AF
  CALL PRINT_MESSAGE_2
  POP AF
  INC A
  LD (VAR_C3A3),A
  LD A,$47                ; Set the colours to white on black ($47).
  LD ($5C8F),A            ;
  LD A,(VAR_C39F)
  LD D,A
  LD A,(VAR_C3A2)
  LD E,A
  INC A
  LD (VAR_C3A2),A
  CALL GET_CREATURE_DATA
  ADD A,$30
  CALL PRINT_SINGLE_CHAR
  LD A,$45                ; Set the colours to cyan on black ($45).
  LD ($5C8F),A            ;
  RET

; Routine at C63D
;
; Used by the routine at ROUTINE_C9D4.
ROUTINE_C63D:
  PUSH HL
  LD HL,(LOCATION_TARGET)
  CALL MAYBE_FIND_WIZ_COORDS
  LD A,L
  CP $10
  POP HL
  RET

; Variable - maybe wizard location
MAYBE_WIZ_LOCATION:
  DEFB $BD,$E0

; Variable - temp variable for shuffle TODO Why?
TEMP_VARIABLE_FOR_SHUFFLE:
  DEFB $0B

; Unknown purpose - shuffles computer player's spells around. TODO Why?
;
; Used by the routines at CAST_SUBVERSION, CAST_RAISE_DEAD,
; COMP_WIZ_CASTS_SPELL, COMP_WIZ_CASTS_DISBELIEVE, CAST_WALL, ROUTINE_C78D,
; ROUTINE_C8C7, MAYBE_COMP_WIZARD_MOVEMENT, ROUTINE_CA19, ROUTINE_CA92,
; ROUTINE_CBC7, ROUTINE_CBCC and R_CC56_MAYBE_COMP_PICK_TARGET.
SHUFFLE_INVENTORY_MAYBE:
  PUSH DE
  LD (TEMP_VARIABLE_FOR_SHUFFLE),A
  LD B,A
SHUFFLE_INVENTORY_MAYBE_0:
  PUSH BC
  PUSH HL
  LD A,(TEMP_VARIABLE_FOR_SHUFFLE)
  LD B,A
SHUFFLE_INVENTORY_MAYBE_1:
  PUSH BC
  LD E,(HL)
  INC HL
  LD D,(HL)
  INC HL
  LD C,(HL)
  INC HL
  LD B,(HL)
  DEC HL
  LD A,C
  CP E
  JR Z,SHUFFLE_INVENTORY_MAYBE_2
  JR C,SHUFFLE_INVENTORY_MAYBE_2
  INC HL
  LD (HL),D
  DEC HL
  LD (HL),E
  DEC HL
  LD (HL),B
  DEC HL
  LD (HL),C
  INC HL
  INC HL
SHUFFLE_INVENTORY_MAYBE_2:
  POP BC
  DJNZ SHUFFLE_INVENTORY_MAYBE_1
  POP HL
  POP BC
  DJNZ SHUFFLE_INVENTORY_MAYBE_0
  POP DE
  RET

; Data block at C679
TEMP_VAR_C679:
  DEFB $12

; Routine at C67A
;
; Used by the routines at ROUTINE_C7BC, R_CC56_MAYBE_COMP_PICK_TARGET and
; ROUTINE_CD92.
ROUTINE_C67A:
  LD HL,(LOCATION_TARGET)
  LD A,(HL)
  OR A
  JR Z,ROUTINE_C67A_0
  LD DE,$0141
  ADD HL,DE
  LD A,(HL)
  CP $04
  JR Z,ROUTINE_C67A_0
  LD HL,(LOCATION_TARGET)
  LD DE,$01E1             ; A = corresponding data in arena table 4.
  ADD HL,DE               ;
  LD A,(HL)               ;
  AND $07                 ; Reset everything but the least 3 significant bits,
                          ; which are the ones storing the owning wizard's ID.
  LD HL,(CURRENT_WIZARD_ID)
  CP L
  JR Z,ROUTINE_C67A_0
  LD HL,(LOCATION_TARGET)
  LD A,(HL)
  LD E,A
  DEC E
  DEC E
  LD D,$00
  LD HL,VAR_C6D4
  ADD HL,DE
  LD A,(HL)
  LD (TEMP_VAR_C679),A
  LD HL,(LOCATION_TARGET)
  CALL MAYBE_FIND_WIZ_COORDS
  LD (VAR_MAYBE_SPELL_SOURCE_COORDS),HL
  LD HL,(LOCATION_SOURCE)
  CALL MAYBE_FIND_WIZ_COORDS
  LD (VAR_MAYBE_SPELL_DESTINATION_COORDS),HL
  CALL GET_DISTANCE
  LD A,(VAR_DISTANCE)
  LD E,A
  LD A,(TEMP_VAR_C679)
  ADD A,$04
  LD HL,VAR_CC55
  ADD A,(HL)
  SUB E
  JP M,ROUTINE_C67A_0
  RET
ROUTINE_C67A_0:
  XOR A
  RET

; Data block at C6D4
VAR_C6D4:
  DEFB $08,$0B,$07,$09,$09,$0F,$0E,$06
  DEFB $0E,$0B,$0A,$0D,$09,$10,$0B,$0F
  DEFB $0F,$0F,$10,$15,$0F,$19,$19,$1B
  DEFB $11,$12,$13,$0D,$09,$0B,$07,$04
  DEFB $04,$00,$00,$00,$00,$00,$00,$09
  DEFB $09,$09,$09,$09,$09,$09,$09

; Routine at C703
;
; Used by the routines at SPELL_RANGE_CHECK, FIND_CURRENT_WIZARD, ROUTINE_980E,
; ROUTINE_9E38, MAYBE_BLOB_AND_FIRE_ACTIONS, ROUTINE_C63D, ROUTINE_C67A,
; COMP_WIZ_TURN, ROUTINE_C7BC, ROUTINE_C8C7, MAYBE_COMP_WIZARD_MOVEMENT,
; ROUTINE_C9D4, ROUTINE_CA7C, ROUTINE_CA92, ROUTINE_CBC7, ROUTINE_CBCC,
; ROUTINE_CCC3 and ROUTINE_CD3C.
MAYBE_FIND_WIZ_COORDS:
  LD (VAR_E005_MAYBE_ARENA_COORDS),HL
  CALL MAYBE_FIND_ARENA_COORDS
  SRL H
  INC H
  SRL L
  INC L
  RET

; Computer wizard turn.
;
; Used by the routine at WIZARD_TURN.
COMP_WIZ_TURN:
  LD HL,UNKNOWN_WIZARD_STATUS_VALUES
  LD A,(CURRENT_WIZARD_ID) ; Point HL to the wizard's value in the table at
  LD D,$00                 ; UNKNOWN_WIZARD_STATUS_VALUES.
  LD E,A                   ;
  ADD HL,DE                ;
  LD A,(HL)               ; If the wizard's value in the table at
  OR A                    ; UNKNOWN_WIZARD_STATUS_VALUES is not zero, jump to
  JP NZ,COMP_WIZ_TURN_1   ; COMP_WIZ_TURN_1.
  CALL ROUTINE_CA92
  LD HL,(MAYBE_WIZ_LOCATION)
  LD A,(HL)
  CP $24                  ; If A == $24, $26 or $27 (IDs of Magic Wood, Magic
  JR Z,COMP_WIZ_TURN_3    ; Castle or Dark Citadel respectively) jump to
  CP $26                  ; COMP_WIZ_TURN_3. TODO Maybe getting the wizard to
  JR Z,COMP_WIZ_TURN_3    ; sit in place if in one of these hideouts?
  CP $27                  ;
  JR Z,COMP_WIZ_TURN_3    ;
  LD A,$00
  LD (MAYBE_CREATURE_CAN_FLY),A
  LD A,$01
  LD (VAR_AC30),A
  LD (LOCATION_SOURCE),HL
  LD (LOCATION_TARGET),HL
  CALL MAYBE_FIND_WIZ_COORDS
  LD (XY_COORDS),HL
  LD (MAYBE_WIZ_XY_COORDS),HL
  CALL CREATURE_SELECTED
COMP_WIZ_TURN_1:
  CALL MAYBE_MARK_ARENA_SQUARES_0
  LD A,$01
  LD (MAYBE_CREATURE_CAN_FLY),A
  HALT
  HALT
  HALT
  LD HL,ARENA_STATE_1
  LD B,$9F
COMP_WIZ_TURN_2:
  PUSH BC
  PUSH HL
  LD (LOCATION_TARGET),HL
  LD (LOCATION_SOURCE),HL
  CALL MAYBE_FIND_WIZ_COORDS
  LD (XY_COORDS),HL
  LD (MAYBE_WIZ_XY_COORDS),HL
  CALL CREATURE_SELECTED
  POP HL
  INC HL
  POP BC
  DJNZ COMP_WIZ_TURN_2
  JP WIZARD_TURN_7
COMP_WIZ_TURN_3:
  LD A,$01
  LD (MAYBE_CREATURE_CAN_FLY),A
  LD HL,(MAYBE_WIZ_LOCATION)
  LD DE,$01E1
  ADD HL,DE
  SET 7,(HL)
  JP COMP_WIZ_TURN_1

; Data block at C78B
VAR_C78B:
  DEFB $75,$E0

; Routine at C78D
;
; Used by the routines at CAST_CREATURE and CREATURE_SELECTED.
ROUTINE_C78D:
  LD HL,(LOCATION_SOURCE)
  LD (VAR_C78B),HL
  LD HL,UNKNOWN_WIZARD_STATUS_VALUES
  LD A,(CURRENT_WIZARD_ID)
  LD D,$00
  LD E,A
  ADD HL,DE
  LD A,(HL)
  CP $0A
  JP M,ROUTINE_CA19
; This entry point is used by the routine at ROUTINE_CA19.
ROUTINE_C78D_0:
  CALL ROUTINE_C825
  LD HL,MAYBE_AI_TABLE
  LD A,$07
  CALL SHUFFLE_INVENTORY_MAYBE
  CALL ROUTINE_C8B9
; This entry point is used by the routine at ROUTINE_CA19.
ROUTINE_C78D_1:
  LD HL,(VAR_C78B)
  LD (LOCATION_SOURCE),HL
  CALL ROUTINE_C8C7
  RET

; Data block at C7BB
VAR_C7BB:
  DEFB $0B

; Routine at C7BC
;
; Used by the routines at CAST_SUBVERSION, COMP_WIZ_CASTS_DISBELIEVE, CAST_WALL
; and ROUTINE_CA19.
ROUTINE_C7BC:
  LD HL,(MAYBE_WIZ_LOCATION)
  LD (LOCATION_SOURCE),HL
  LD HL,MAYBE_AI_TABLE
  LD (VAR_CD86),HL
  CALL MAYBE_INIT_D3F2_STRIPES
  LD HL,ARENA_STATE_1
  LD (LOCATION_TARGET),HL
  LD A,$00
  LD (VAR_C7BB),A
  LD B,$9F
ROUTINE_C7BC_0:
  PUSH BC
  CALL ROUTINE_C67A
  OR A
  JR Z,ROUTINE_C7BC_1
  LD HL,VAR_C7BB
  INC (HL)
  ADD A,$14
  PUSH AF
  LD HL,(VAR_C78B)
  CALL MAYBE_FIND_WIZ_COORDS
  LD (VAR_MAYBE_SPELL_SOURCE_COORDS),HL
  LD HL,(LOCATION_TARGET)
  CALL MAYBE_FIND_WIZ_COORDS
  LD (VAR_MAYBE_SPELL_DESTINATION_COORDS),HL
  CALL GET_DISTANCE
  LD A,(VAR_DISTANCE)
  SRL A
  LD E,A
  POP AF
  SUB E
  LD HL,(VAR_CD86)
  LD (HL),A
  LD HL,(LOCATION_TARGET)
  LD DE,ARENA_STATE_1
  XOR A
  SBC HL,DE
  LD A,L
  LD HL,(VAR_CD86)
  INC HL
  LD (HL),A
  INC HL
  LD (VAR_CD86),HL
ROUTINE_C7BC_1:
  LD HL,(LOCATION_TARGET)
  INC HL
  LD (LOCATION_TARGET),HL
  POP BC
  DJNZ ROUTINE_C7BC_0
  RET

; Routine at C825
;
; Used by the routines at ROUTINE_C78D and R_CC56_MAYBE_COMP_PICK_TARGET.
ROUTINE_C825:
  LD HL,MAYBE_AI_TABLE
  LD (VAR_CD86),HL
  CALL MAYBE_INIT_D3F2_STRIPES
  LD HL,ARENA_STATE_1
  LD (LOCATION_TARGET),HL
  LD B,$9F
ROUTINE_C825_0:
  PUSH BC
  LD HL,(LOCATION_TARGET)
  LD A,(HL)
  CP $29
  CALL P,ROUTINE_C859
  LD HL,(LOCATION_TARGET)
  LD DE,$0281
  ADD HL,DE
  LD A,(HL)
  CP $29
  CALL P,ROUTINE_C859
  LD HL,(LOCATION_TARGET)
  INC HL
  LD (LOCATION_TARGET),HL
  POP BC
  DJNZ ROUTINE_C825_0
  RET

; Data block at C858
VAR_C858:
  DEFB $01

; Routine at C859
;
; Used by the routine at ROUTINE_C825.
ROUTINE_C859:
  SUB $29
  LD (VAR_C858),A
  LD HL,CURRENT_WIZARD_ID
  CP (HL)
  RET Z
  LD HL,(LOCATION_TARGET)
  LD DE,ARENA_STATE_1
  XOR A
  SBC HL,DE
  LD A,L
  LD HL,(VAR_CD86)
  INC HL
  LD (HL),A
  LD HL,ARENA_STATE_1
  LD B,$9F
ROUTINE_C859_0:
  PUSH BC
  PUSH HL
  LD A,(HL)
  LD C,A
  OR A
  JR Z,ROUTINE_C859_1
  CP $26
  JP P,ROUTINE_C859_1
  LD DE,$01E1             ; A = corresponding data in arena table 4.
  ADD HL,DE               ;
  LD A,(HL)               ;
  AND $07                 ; Reset everything but the least 3 significant bits,
                          ; which are the ones storing the owning wizard's ID.
  LD E,A
  LD A,(VAR_C858)
  CP E
  JR NZ,ROUTINE_C859_1
  LD HL,VAR_C6D4
  LD B,$00
  ADD HL,BC
  LD A,(HL)
  SRL A
  SRL A
  LD HL,(VAR_CD86)
  ADD A,(HL)
  LD (HL),A
ROUTINE_C859_1:
  POP HL
  INC HL
  POP BC
  DJNZ ROUTINE_C859_0
  LD HL,(VAR_CD86)
  LD A,(VAR_CC55)
  ADD A,(HL)
  LD (HL),A
  LD HL,(VAR_CD86)
  INC HL
  INC HL
  LD (VAR_CD86),HL
  RET

; Data block at C8B7
VAR_C8B7:
  DEFB $76,$E0

; Routine at C8B9
;
; Used by the routines at ROUTINE_C78D and ROUTINE_CA19.
ROUTINE_C8B9:
  LD HL,$D3F3
  LD E,(HL)
  LD HL,ARENA_STATE_1
  LD D,$00
  ADD HL,DE
  LD (VAR_C8B7),HL
  RET

; Routine at C8C7
;
; Used by the routines at CREATURE_SELECTED and ROUTINE_C78D.
ROUTINE_C8C7:
  CALL MAYBE_INIT_D3F2_STRIPES
  LD HL,MAYBE_AI_TABLE
  LD (VAR_CD86),HL
  LD HL,VAR_CD2A_MAYBE_TABLE
  LD (VAR_CD3A),HL
  LD HL,$CD88
  LD (VAR_CD90),HL
  LD HL,(LOCATION_SOURCE)
  LD (VAR_C78B),HL
  LD B,$08
ROUTINE_C8C7_0:
  PUSH BC
  CALL ROUTINE_CD3C
  LD A,(LOCATION_SOURCE)
  OR A
  JR Z,ROUTINE_C8C7_1
  LD HL,(VAR_C8B7)
  CALL MAYBE_FIND_WIZ_COORDS
  LD (VAR_MAYBE_SPELL_SOURCE_COORDS),HL
  LD HL,(LOCATION_SOURCE)
  CALL MAYBE_FIND_WIZ_COORDS
  LD (VAR_MAYBE_SPELL_DESTINATION_COORDS),HL
  CALL GET_DISTANCE
  LD A,(VAR_DISTANCE)
  LD HL,(VAR_CD86)
  LD (HL),A
  LD HL,(VAR_CD90)
  LD A,(HL)
  LD HL,(VAR_CD86)
  INC HL
  LD (HL),A
ROUTINE_C8C7_1:
  LD HL,(VAR_CD90)
  INC HL
  LD (VAR_CD90),HL
  LD HL,(VAR_CD86)
  INC HL
  INC HL
  LD (VAR_CD86),HL
  LD HL,(VAR_C78B)
  LD (LOCATION_SOURCE),HL
  POP BC
  DJNZ ROUTINE_C8C7_0
  LD HL,MAYBE_AI_TABLE
  LD A,$07
  CALL SHUFFLE_INVENTORY_MAYBE
  LD A,$01
  LD (VAR_AC30),A
  LD HL,(VAR_C78B)
  LD (LOCATION_SOURCE),HL
  LD (LOCATION_TARGET),HL
  CALL MAYBE_FIND_WIZ_COORDS
  LD (XY_COORDS),HL
  LD (MAYBE_WIZ_XY_COORDS),HL
  LD HL,$D401
  LD (VAR_CD86),HL
  LD BC,(XY_COORDS)
  RET

; Maybe computer wizard movement routine
;
; Used by the routines at CAST_CREATURE, CAST_TREES_OR_CASTLE, CAST_WALL and
; FLYING_MOVEMENT.
MAYBE_COMP_WIZARD_MOVEMENT:
  LD HL,ARENA_STATE_1
  LD (LOCATION_TARGET),HL
  LD HL,MAYBE_AI_TABLE
  LD (VAR_CD86),HL
  CALL MAYBE_INIT_D3F2_STRIPES
  LD HL,(LOCATION_SOURCE)
  LD (VAR_C78B),HL
  LD A,$01
  LD (VAR_C7BB),A
  LD B,$9F
MAYBE_COMP_WIZARD_MOVEMENT_0:
  PUSH BC
  LD HL,(LOCATION_TARGET)
  CALL ROUTINE_CA7C
  LD A,(SELECT_SQUARE_RANGE)
  LD HL,VAR_DISTANCE
  CP (HL)
  JP M,MAYBE_COMP_WIZARD_MOVEMENT_1
  LD HL,(VAR_C8B7)
  CALL MAYBE_FIND_WIZ_COORDS
  LD (VAR_MAYBE_SPELL_SOURCE_COORDS),HL
  LD HL,(LOCATION_TARGET)
  CALL MAYBE_FIND_WIZ_COORDS
  LD (VAR_MAYBE_SPELL_DESTINATION_COORDS),HL
  CALL GET_DISTANCE
  LD A,(VAR_DISTANCE)
  LD HL,(VAR_CD86)
  LD (HL),A
  LD HL,(LOCATION_TARGET)
  LD DE,ARENA_STATE_1
  XOR A
  SBC HL,DE
  LD A,L
  LD HL,(VAR_CD86)
  INC HL
  LD (HL),A
  INC HL
  LD (VAR_CD86),HL
  LD HL,VAR_C7BB
  INC (HL)
MAYBE_COMP_WIZARD_MOVEMENT_1:
  LD HL,(LOCATION_TARGET)
  INC HL
  LD (LOCATION_TARGET),HL
  POP BC
  DJNZ MAYBE_COMP_WIZARD_MOVEMENT_0
  LD HL,MAYBE_AI_TABLE
  LD A,(VAR_C7BB)
  CALL SHUFFLE_INVENTORY_MAYBE
  LD A,$01
  LD (VAR_AC30),A
  LD HL,$D4E5
  LD (VAR_CD86),HL
  RET

; Routine at C9D4
ROUTINE_C9D4:
  LD HL,(VAR_CD86)
  DEC HL
  DEC HL
  LD (VAR_CD86),HL
; This entry point is used by the routines at CAST_CREATURE,
; CAST_TREES_OR_CASTLE, CAST_WALL and FLYING_MOVEMENT.
ROUTINE_C9D4_0:
  LD HL,(VAR_CD86)
  DEC HL
  LD A,(HL)
  CP $FE
  JR NZ,ROUTINE_C9D4_1
  LD A,$4B
  LD (LAST_KEYPRESS),A
  RET
ROUTINE_C9D4_1:
  LD HL,(VAR_CD86)
  LD A,(HL)
  CP $FF
  JR Z,ROUTINE_C9D4
  LD HL,ARENA_STATE_1
  LD D,$00
  LD E,A
  ADD HL,DE
  LD (LOCATION_TARGET),HL
  CALL ROUTINE_C63D
  JR Z,ROUTINE_C9D4
  CALL MAYBE_FIND_WIZ_COORDS
  LD (XY_COORDS),HL
  LD HL,(VAR_CD86)
  DEC HL
  DEC HL
  LD (VAR_CD86),HL
  LD A,$53
  LD (LAST_KEYPRESS),A
  RET

; Data block at CA16
VAR_CA16:
  DEFB $65,$E0

; Data block at CA18
VAR_CA18:
  DEFB $0F

; Routine at CA19
;
; Used by the routine at ROUTINE_C78D.
ROUTINE_CA19:
  CALL ROUTINE_C7BC
  LD HL,(VAR_C78B)
  LD (LOCATION_SOURCE),HL
  LD HL,MAYBE_AI_TABLE
  LD A,(HL)
  OR A
  JP Z,ROUTINE_C78D_0
  LD A,(VAR_C7BB)
  INC A
  CALL SHUFFLE_INVENTORY_MAYBE
  CALL ROUTINE_C8B9
  LD DE,$01E1             ; A = corresponding data in arena table 4.
  ADD HL,DE               ;
  LD A,(HL)               ;
  AND $07                 ; Reset everything but the least 3 significant bits,
                          ; which are the ones storing the owning wizard's ID.
  LD E,A
  LD HL,ARENA_STATE_1
  LD B,$9F
ROUTINE_CA19_0:
  PUSH BC
  PUSH HL
  LD A,(HL)
  SUB $29
  CP E
  JR Z,ROUTINE_CA19_1
  LD BC,$0281
  ADD HL,BC
  LD A,(HL)
  SUB $29
  CP E
  JR Z,ROUTINE_CA19_1
  POP HL
  INC HL
  POP BC
  DJNZ ROUTINE_CA19_0
  JP ROUTINE_C78D_0
ROUTINE_CA19_1:
  POP HL
  POP BC
  LD (VAR_CA16),HL
  CALL ROUTINE_CA7C
  LD (VAR_CA18),A
  LD HL,(VAR_C8B7)
  CALL ROUTINE_CA7C
  LD HL,VAR_CA18
  CP (HL)
  JP M,ROUTINE_CA19_2
  LD HL,(VAR_CA16)
  LD (VAR_C8B7),HL
ROUTINE_CA19_2:
  JP ROUTINE_C78D_1

; Routine at CA7C
;
; Used by the routines at MAYBE_COMP_WIZARD_MOVEMENT and ROUTINE_CA19.
ROUTINE_CA7C:
  CALL MAYBE_FIND_WIZ_COORDS
  LD (VAR_MAYBE_SPELL_SOURCE_COORDS),HL
  LD HL,(VAR_C78B)
  CALL MAYBE_FIND_WIZ_COORDS
  LD (VAR_MAYBE_SPELL_DESTINATION_COORDS),HL
  CALL GET_DISTANCE
  LD A,(VAR_DISTANCE)
  RET

; Routine at CA92
;
; Used by the routines at CREATURE_SELECTED and COMP_WIZ_TURN.
ROUTINE_CA92:
  CALL MAYBE_INIT_D3F2_STRIPES
  LD HL,ARENA_STATE_1     ; Going to loop through every space in arena table 1.
  LD B,$9F                ;
ROUTINE_CA92_0:
  PUSH BC                 ;
  PUSH HL                 ;
  LD DE,$0281             ; HL = corresponding space in arena table 5.
  ADD HL,DE               ;
  LD A,(HL)               ; A = ID of object in arena table 5
  POP HL
  SUB $29                 ; If it's a wizard jump to ROUTINE_CA92_1.
  JP P,ROUTINE_CA92_1     ;
  LD A,(HL)               ; A = ID of object in arena table 1.
  SUB $29                 ;
  JP M,ROUTINE_CA92_2     ; If it's not a wizard jump to ROUTINE_CA92_2.
ROUTINE_CA92_1:
  LD E,A                  ; It's a wizard. Store the ID in E.
  LD A,(CURRENT_WIZARD_ID) ; A = current wizard ID (CURRENT_WIZARD_ID)
  CP E                    ; If it's not the current wizard jump to
  JR NZ,ROUTINE_CA92_2    ; ROUTINE_CA92_2.
  LD (LOCATION_SOURCE),HL ; Set current wizard's location in LOCATION_SOURCE.
ROUTINE_CA92_2:
  INC HL
  POP BC
  DJNZ ROUTINE_CA92_0
  LD HL,VAR_CD2A_MAYBE_TABLE
  LD (VAR_CD3A),HL
  LD HL,MAYBE_AI_TABLE
  LD (VAR_CD86),HL
  LD HL,$CD88
  LD (VAR_CD90),HL
  LD HL,(LOCATION_SOURCE)
  LD (MAYBE_WIZ_LOCATION),HL
  LD A,(HL)               ; A = ID from the space in arena table 1 where the
                          ; wizard is located.
  CP $13                  ; If A < $13 (indicating a non-flying mount - see the
  JP M,ROUTINE_CA92_3     ; IDs of the creatures at TABLE_SPELLS) jump to
                          ; ROUTINE_CA92_3.
  CP $16                  ; If A >= $16 (indicating either the wizard himself,
  JP P,ROUTINE_CA92_3     ; possibly hiding in a tree or castle) jump to
                          ; ROUTINE_CA92_3.
  CALL ROUTINE_CBB9
  LD A,$01                      ; Set MAYBE_CREATURE_CAN_FLY, indicating that
  LD (MAYBE_CREATURE_CAN_FLY),A ; the wizard can fly.
  JP ROUTINE_CA92_11
ROUTINE_CA92_3:
  CP $29                  ; If A < $29, indicating that the wizard is hiding,
  JP M,ROUTINE_CA92_4     ; jump to ROUTINE_CA92_4.
  SUB $29                    ; HL = location ofthe current wizard's status
  LD HL,WIZARD_STATUS_VALUES ; value in the table at WIZARD_STATUS_VALUES.
  LD D,$00                   ;
  LD E,A                     ;
  ADD HL,DE                  ;
  BIT 5,(HL)              ; If bit 5 is set (indicating that the wizard has
  JR Z,ROUTINE_CA92_4     ; magic wings) continue, otherwise jump to
                          ; ROUTINE_CA92_4.
  CALL ROUTINE_CBC7
  LD A,$01                      ; Set MAYBE_CREATURE_CAN_FLY, indicating that
  LD (MAYBE_CREATURE_CAN_FLY),A ; the wizard can fly.
  JP ROUTINE_CA92_11
ROUTINE_CA92_4:
  LD B,$08
ROUTINE_CA92_5:
  PUSH BC
  CALL ROUTINE_CD3C
  LD A,(LOCATION_SOURCE)
  OR A
  JR Z,ROUTINE_CA92_10
  LD HL,(LOCATION_SOURCE)
  LD A,(HL)
  CP $26
  JP M,ROUTINE_CA92_6
  CP $28
  JP P,ROUTINE_CA92_6
  LD HL,(VAR_CD86)
  LD (HL),$00
  JR ROUTINE_CA92_9
ROUTINE_CA92_6:
  LD HL,(LOCATION_SOURCE)
  LD A,(HL)
  CP $24
  JR NZ,ROUTINE_CA92_7
  LD HL,(VAR_CD86)
  LD (HL),$01
  JR ROUTINE_CA92_9
ROUTINE_CA92_7:
  LD HL,(LOCATION_SOURCE)
  LD A,(HL)
  CP $10
  JP M,ROUTINE_CA92_8
  CP $16
  JP P,ROUTINE_CA92_8
  LD DE,$01E1             ; A = corresponding data in arena table 4.
  ADD HL,DE               ;
  LD A,(HL)               ;
  AND $07                 ; Reset everything but the least 3 significant bits,
                          ; which are the ones storing the owning wizard's ID.
  LD HL,(CURRENT_WIZARD_ID)
  CP L
  JR NZ,ROUTINE_CA92_8
  LD HL,(LOCATION_SOURCE)
  LD DE,$0281
  ADD HL,DE
  LD A,(HL)
  OR A
  JR NZ,ROUTINE_CA92_8
  LD HL,(VAR_CD86)
  LD (HL),$02
  JR ROUTINE_CA92_9
ROUTINE_CA92_8:
  CALL ROUTINE_CD92
  LD HL,(VAR_CD86)
  INC (HL)
  INC (HL)
  INC (HL)
ROUTINE_CA92_9:
  LD HL,(VAR_CD90)
  LD A,(HL)
  LD HL,(VAR_CD86)
  INC HL
  LD (HL),A
  INC HL
  LD (VAR_CD86),HL
ROUTINE_CA92_10:
  LD HL,(MAYBE_WIZ_LOCATION)
  LD (LOCATION_SOURCE),HL
  LD HL,(VAR_CD90)
  INC HL
  LD (VAR_CD90),HL
  POP BC
  DEC B
  JP NZ,ROUTINE_CA92_5
  LD HL,MAYBE_AI_TABLE
  LD A,$07
  CALL SHUFFLE_INVENTORY_MAYBE
  LD HL,(MAYBE_WIZ_LOCATION)
  LD (LOCATION_TARGET),HL
  LD (LOCATION_SOURCE),HL
  LD HL,$D401
  LD (VAR_CD86),HL
ROUTINE_CA92_11:
  LD HL,(MAYBE_WIZ_LOCATION)
  CALL MAYBE_FIND_WIZ_COORDS
  LD (XY_COORDS),HL
  LD (MAYBE_WIZ_XY_COORDS),HL
  LD A,$01
  LD (VAR_AC30),A
  LD BC,(XY_COORDS)
  RET

; Unused
VAR_CBB8:
  DEFS $01

; Routine at CBB9
;
; Used by the routine at ROUTINE_CA92.
ROUTINE_CBB9:
  LD D,A
  LD E,$11                ; A = the creature's movement allowance.
  CALL GET_CREATURE_DATA  ;
  SLA A
  INC A
  LD (VAR_CBB8),A
  JR ROUTINE_CBCC

; Routine at CBC7
;
; Used by the routine at ROUTINE_CA92.
ROUTINE_CBC7:
  LD A,$0D
  LD (VAR_CBB8),A

; Routine at CBCC
;
; Used by the routine at ROUTINE_CBB9.
ROUTINE_CBCC:
  CALL MAYBE_INIT_D3F2_STRIPES
  LD A,$01
  LD (VAR_C7BB),A
  LD HL,MAYBE_AI_TABLE
  LD (VAR_CD86),HL
  LD HL,(LOCATION_SOURCE)
  LD (VAR_C78B),HL
  LD HL,ARENA_STATE_1
  LD (LOCATION_SOURCE),HL
  LD B,$9E
ROUTINE_CBCC_0:
  PUSH BC
  LD HL,(LOCATION_SOURCE)
  CALL MAYBE_FIND_WIZ_COORDS
  LD A,L
  CP $10
  JR Z,ROUTINE_CBCC_1
  LD (VAR_MAYBE_SPELL_SOURCE_COORDS),HL
  LD HL,(VAR_C78B)
  CALL MAYBE_FIND_WIZ_COORDS
  LD (VAR_MAYBE_SPELL_DESTINATION_COORDS),HL
  CALL GET_DISTANCE
  LD HL,VAR_DISTANCE
  LD A,(VAR_CBB8)
  CP (HL)
  JP M,ROUTINE_CBCC_1
  CALL ROUTINE_CD92
  LD HL,(LOCATION_SOURCE)
  LD DE,ARENA_STATE_1
  AND A
  SBC HL,DE
  LD A,L
  LD HL,(VAR_CD86)
  INC HL
  LD (HL),A
  INC HL
  LD (VAR_CD86),HL
  LD HL,VAR_C7BB
  INC (HL)
ROUTINE_CBCC_1:
  LD HL,(LOCATION_SOURCE)
  INC HL
  LD (LOCATION_SOURCE),HL
  POP BC
  DJNZ ROUTINE_CBCC_0
  LD A,(VAR_C7BB)
  LD HL,MAYBE_AI_TABLE
  CALL SHUFFLE_INVENTORY_MAYBE
  LD HL,$D493
ROUTINE_CBCC_2:
  DEC HL
  DEC HL
  LD A,(HL)
  CP $FF
  JR Z,ROUTINE_CBCC_2
  LD HL,ARENA_STATE_1
  LD D,$00
  LD E,A
  ADD HL,DE
  LD (VAR_C8B7),HL
  LD HL,(VAR_C78B)
  LD (LOCATION_SOURCE),HL
  RET

; Data block at CC55
VAR_CC55:
  DEFB $00

; Routine at CC56
;
; Used by the routines at CAST_LIGHTNING, ROUTINE_9D8A, ROUTINE_9EF9 and
; RANGED_COMBAT.
R_CC56_MAYBE_COMP_PICK_TARGET:
  LD HL,(LOCATION_SOURCE)
  LD (VAR_C78B),HL
  LD A,$3C
  LD (VAR_CC55),A
  CALL ROUTINE_C825
  LD A,$20
  LD (VAR_CC55),A
  LD HL,(MAYBE_WIZ_LOCATION)
  LD (LOCATION_SOURCE),HL
  LD HL,ARENA_STATE_1
  LD (LOCATION_TARGET),HL
  LD A,$09
  LD (VAR_C7BB),A
  LD B,$9E
R_CC56_MAYBE_COMP_PICK_TARGET_0:
  PUSH BC
  CALL ROUTINE_C67A
  OR A
  JR Z,R_CC56_MAYBE_COMP_PICK_TARGET_1
  LD HL,(VAR_CD86)
  LD (HL),A
  LD HL,(LOCATION_TARGET)
  AND A
  LD DE,ARENA_STATE_1
  SBC HL,DE
  LD A,L
  LD HL,(VAR_CD86)
  INC HL
  LD (HL),A
  INC HL
  LD (VAR_CD86),HL
  LD HL,VAR_C7BB
  INC (HL)
R_CC56_MAYBE_COMP_PICK_TARGET_1:
  LD HL,(LOCATION_TARGET)
  INC HL
  LD (LOCATION_TARGET),HL
  POP BC
  DJNZ R_CC56_MAYBE_COMP_PICK_TARGET_0
  LD HL,MAYBE_AI_TABLE
  LD A,(VAR_C7BB)
  CALL SHUFFLE_INVENTORY_MAYBE
  LD HL,$D3F3
  LD (VAR_CD86),HL
  LD HL,(VAR_C78B)
  LD (LOCATION_SOURCE),HL
  LD A,$00
  LD (VAR_CC55),A
  RET

; Routine at CCC3
ROUTINE_CCC3:
  LD HL,(VAR_CD86)
  INC HL
  INC HL
  LD (VAR_CD86),HL
; This entry point is used by the routine at RANGED_COMBAT.
ROUTINE_CCC3_0:
  LD HL,(VAR_CD86)
  LD A,(HL)
  CP $FF
  JR NZ,ROUTINE_CCC3_1
  LD A,$4B
  RET
ROUTINE_CCC3_1:
  LD HL,ARENA_STATE_1
  LD D,$00
  LD E,A
  ADD HL,DE
  LD (LOCATION_TARGET),HL
  LD A,(HL)
  CP $29
  JP P,ROUTINE_CCC3_3
  CP $24
  JR NZ,ROUTINE_CCC3_2
  LD DE,$0281
  ADD HL,DE
  LD A,(HL)
  OR A
  JR NZ,ROUTINE_CCC3_3
  JR ROUTINE_CCC3
ROUTINE_CCC3_2:
  CP $25
  JR Z,ROUTINE_CCC3_3
  CP $23
  JP P,ROUTINE_CCC3
ROUTINE_CCC3_3:
  LD HL,(LOCATION_SOURCE)
  LD A,(HL)
  CP $29
  JP P,ROUTINE_CCC3_4
  LD HL,(LOCATION_TARGET)
  LD A,(HL)
  CP $1C                  ; Maybe checking if creature is undead?
  JP M,ROUTINE_CCC3_4     ;
  CP $22                  ;
  JP P,ROUTINE_CCC3_4     ;
  JR ROUTINE_CCC3         ;
ROUTINE_CCC3_4:
  LD HL,(LOCATION_TARGET)
  CALL MAYBE_FIND_WIZ_COORDS
  LD (XY_COORDS),HL
  LD A,$53
  LD HL,(VAR_CD86)
  INC HL
  INC HL
  LD (VAR_CD86),HL
  RET

; Data block at CD2A
VAR_CD2A_MAYBE_TABLE:
  DEFB $FF,$FF,$FF,$00,$FF,$01,$00,$01
  DEFB $01,$01,$01,$00,$01,$FF,$00,$FF

; Data block at CD3A
VAR_CD3A:
  DEFB $3A,$CD

; Routine at CD3C
;
; Used by the routines at ROUTINE_98F1, ROUTINE_9C0F, SPREAD_BLOB_AND_FIRE,
; ROUTINE_C8C7 and ROUTINE_CA92.
ROUTINE_CD3C:
  PUSH HL
  PUSH DE
  PUSH BC
  PUSH AF
  LD HL,(LOCATION_SOURCE)
  CALL MAYBE_FIND_WIZ_COORDS
  EX DE,HL
  LD HL,(VAR_CD3A)
  LD A,(HL)
  ADD A,D
  JR Z,ROUTINE_CD3C_1
  CP $0B
  JR Z,ROUTINE_CD3C_1
  LD D,A
  INC HL
  LD A,(HL)
  ADD A,E
  JR Z,ROUTINE_CD3C_1
  CP $10
  JR Z,ROUTINE_CD3C_1
  DEC A
  DEC D
  SLA D
  SLA D
  SLA D
  SLA D
  ADD A,D
  LD B,$00
  LD C,A
  LD HL,ARENA_STATE_1
  ADD HL,BC
  LD (LOCATION_SOURCE),HL
ROUTINE_CD3C_0:
  LD HL,(VAR_CD3A)
  INC HL
  INC HL
  LD (VAR_CD3A),HL
  POP HL
  POP DE
  POP BC
  POP AF
  RET
ROUTINE_CD3C_1:
  LD HL,$0000
  LD (LOCATION_SOURCE),HL
  JR ROUTINE_CD3C_0

; Data block at CD86
VAR_CD86:
  DEFB $F5,$D3,$51,$57,$45,$44,$43,$58
  DEFB $5A,$41

; Data block at CD90
VAR_CD90:
  DEFB $90,$CD

; Routine at CD92
;
; Used by the routines at ROUTINE_CA92, ROUTINE_CBC7 and ROUTINE_CBCC.
ROUTINE_CD92:
  LD HL,ARENA_STATE_1
  LD B,$9E
ROUTINE_CD92_0:
  PUSH BC
  PUSH HL
  LD (LOCATION_TARGET),HL
  CALL ROUTINE_C67A
  LD HL,(VAR_CD86)
  ADD A,(HL)
  LD (HL),A
  POP HL
  INC HL
  POP BC
  DJNZ ROUTINE_CD92_0
  RET

; Init D3F2
;
; Used by the routines at ROUTINE_C7BC, ROUTINE_C825, ROUTINE_C8C7,
; MAYBE_COMP_WIZARD_MOVEMENT, ROUTINE_CA92, ROUTINE_CBC7 and ROUTINE_CBCC.
MAYBE_INIT_D3F2_STRIPES:
  LD HL,MAYBE_AI_TABLE           ; Sets the table at MAYBE_AI_TABLE to have an
  LD B,$9E                       ; alternating pattern of 0 and 255 (or -1).
MAYBE_INIT_D3F2_STRIPES_0:
  LD (HL),$00                    ; TODO Why?
  INC HL                         ;
  LD (HL),$FF                    ;
  INC HL                         ;
  DJNZ MAYBE_INIT_D3F2_STRIPES_0 ;
  RET

; Routine at CDB8
ROUTINE_CDB8:
  LD HL,(VAR_CD86)
  DEC HL
  DEC HL
  LD (VAR_CD86),HL
; This entry point is used by the routine at MOVE_CURSOR_CHECK.
ROUTINE_CDB8_0:
  LD HL,(VAR_CD86)
  LD A,(HL)
  INC A
  JR Z,ROUTINE_CDB8
  DEC A
  LD HL,(VAR_CD86)
  DEC HL
  DEC HL
  LD (VAR_CD86),HL
  JP MOVE_CURSOR_CHECK_UP

; Table - text message information
;
; Lists information about the creatures and the text messages starting at
; STR_EMPTY_STRING. Organised in sets of 4 bytes.
;
; * First two bytes (swapped around) list the memory address of the message
; * Third byte is the length of the message.
; * The last byte is zero.
TABLE_TEXT_MESSAGES_2:
  DEFB $CB,$CF,$20,$00    ; STR_EMPTY_STRING $00 Empty string
  DEFB $CB,$CF,$20,$00    ; STR_EMPTY_STRING $01 Empty string
  DEFB $63,$E4,$0A,$00    ; NAME_KING_COBRA $02 KING COBRA
  DEFB $D5,$E4,$09,$00    ; NAME_DIRE_WOLF $03 DIRE WOLF
  DEFB $21,$E5,$06,$00    ; NAME_GOBLIN $04 GOBLIN
  DEFB $47,$E5,$09,$00    ; NAME_CROCODILE $05 CROCODILE
  DEFB $B9,$E5,$04,$00    ; NAME_FAUN $06 FAUN
  DEFB $DF,$E5,$04,$00    ; NAME_LION $07 LION
  DEFB $2B,$E6,$03,$00    ; NAME_ELF $08 ELF
  DEFB $77,$E6,$03,$00    ; NAME_ORC $09 ORC
  DEFB $9F,$E7,$04,$00    ; NAME_BEAR $0A BEAR
  DEFB $C5,$E7,$07,$00    ; NAME_GORILLA $0B GORILLA
  DEFB $0E,$E8,$04,$00    ; NAME_OGRE $0C OGRE
  DEFB $C9,$E8,$05,$00    ; NAME_HYDRA $0D HYDRA
  DEFB $EF,$E8,$09,$00    ; NAME_GIANT_RAT $0E GIANT RAT
  DEFB $3B,$E9,$05,$00    ; NAME_GIANT $0F GIANT
  DEFB $51,$E6,$05,$00    ; NAME_HORSE $10 HORSE
  DEFB $33,$E7,$07,$00    ; NAME_UNICORN $11 UNICORN
  DEFB $15,$E9,$07,$00    ; NAME_CENTAUR $12 CENTAUR
  DEFB $7D,$E8,$07,$00    ; NAME_PEGASUS $13 PEGASUS
  DEFB $05,$E6,$07,$00    ; NAME_GRYPHON $14 GRYPHON
  DEFB $E6,$E6,$09,$00    ; NAME_MANTICORE $15 MANTICORE
  DEFB $89,$E4,$03,$00    ; NAME_BAT $16 BAT
  DEFB $6D,$E5,$0C,$00    ; NAME_GREEN_DRAGON $17 GREEN DRAGON
  DEFB $9D,$E6,$0A,$00    ; NAME_RED_DRAGON $18 RED DRAGON
  DEFB $61,$E9,$0D,$00    ; NAME_GOLDEN_DRAGON $19 GOLDEN DRAGON
  DEFB $57,$E8,$05,$00    ; NAME_HARPY $1A HARPY
  DEFB $A3,$E8,$05,$00    ; NAME_EAGLE $1B EAGLE
  DEFB $93,$E5,$07,$00    ; NAME_VAMPIRE $1C VAMPIRE
  DEFB $59,$E7,$05,$00    ; NAME_GHOST $1D GHOST
  DEFB $FB,$E4,$07,$00    ; NAME_SPECTRE $1E SPECTRE
  DEFB $7C,$E7,$06,$00    ; NAME_WRAITH $1F WRAITH
  DEFB $EB,$E7,$08,$00    ; NAME_SKELETON $20 SKELETON
  DEFB $34,$E8,$06,$00    ; NAME_ZOMBIE $21 ZOMBIE
  DEFB $AF,$E4,$04,$00    ; NAME_BLOB $22 BLOB
  DEFB $C3,$E6,$04,$00    ; NAME_FIRE $23 FIRE
  DEFB $F3,$E9,$0A,$00    ; NAME_MAGIC_WOOD $24 MAGIC WOOD
  DEFB $D0,$E9,$0B,$00    ; NAME_SHADOW_WOOD $25 SHADOW WOOD
  DEFB $AD,$E9,$0C,$00    ; NAME_MAGIC_CASTLE $26 MAGIC CASTLE
  DEFB $87,$E9,$0C,$00    ; NAME_DARK_CITADEL $27 DARK CITADEL
  DEFB $16,$EA,$04,$00    ; NAME_WALL $28 WALL
  DEFB $39,$EA,$06,$00    ; NAME_WIZ_1 $29 <Wizard 1 name>
  DEFB $5C,$EA,$07,$00    ; NAME_WIZ_2 $2A <Wizard 2 name>
  DEFB $7F,$EA,$0A,$00    ; NAME_WIZ_3 $2B <Wizard 3 name>
  DEFB $A2,$EA,$08,$00    ; NAME_WIZ_4 $2C <Wizard 4 name>
  DEFB $C5,$EA,$05,$00    ; NAME_WIZ_5 $2D <Wizard 5 name>
  DEFB $E8,$EA,$06,$00    ; NAME_WIZ_6 $2E <Wizard 6 name>
  DEFB $0B,$EB,$0A,$00    ; NAME_WIZ_7 $2F <Wizard 7 name>
  DEFB $2E,$EB,$0C,$00    ; NAME_WIZ_8 $30 <Wizard 8 name>
  DEFB $EA,$CF,$09,$00    ; STR_ASLEEP_BRACKETS $31 (ASLEEP)
  DEFB $F3,$CF,$07,$00    ; STR_DEAD_BRACKETS $32 (DEAD)
  DEFB $FA,$CF,$20,$00    ; STR_DISMOUNT $33 DISMOUNT WIZARD? (Y OR N)
  DEFB $1A,$D0,$20,$00    ; STR_ENGAGED $34 ENGAGED TO ENEMY
  DEFB $3A,$D0,$20,$00    ; STR_OUT_OF_RANGE $35 OUT OF RANGE
  DEFB $5A,$D0,$0E,$00    ; STR_FLYING_BRACKETS $36 (FLYING)
  DEFB $68,$D0,$07,$00    ; STR_S_TURN $37 'S TURN
  DEFB $6F,$D0,$15,$00    ; STR_MOVE_POINTS_LEFT $38 MOVEMENT POINTS LEFT=
  DEFB $84,$D0,$19,$00    ; STR_UNDEAD_CANNOT_ATTACK $39 UNDEAD-CANNOT BE
                          ; ATTACKED
  DEFB $9E,$D0,$0F,$00    ; STR_MOVEMENT_RANGE $3A MOVEMENT RANGE=
  DEFB $AD,$D0,$14,$00    ; STR_COMBAT_RANGE $3B RANGED COMBAT,RANGE=
  DEFB $C1,$D0,$10,$00    ; STR_NO_LOS $3C NO LINE OF SIGHT
  DEFB $D1,$D0,$20,$00    ; STR_PRESS_ANY_KEY $3D PRESS ANY KEY
  DEFB $F1,$D0,$05,$00    ; STR_KNIFE $3E KNIFE
  DEFB $F6,$D0,$05,$00    ; STR_SWORD $3F SWORD
  DEFB $FB,$D0,$06,$00    ; STR_ARMOUR $40 ARMOUR
  DEFB $01,$D1,$06,$00    ; STR_SHIELD $41 SHIELD
  DEFB $07,$D1,$06,$00    ; STR_FLYING $42 FLYING
  DEFB $0D,$D1,$06,$00    ; STR_SHADOW $43 SHADOW
  DEFB $13,$D1,$05,$00    ; STR_MOUNT $44 MOUNT
  DEFB $18,$D1,$06,$00    ; STR_UNDEAD $45 UNDEAD
  DEFB $1E,$D1,$07,$00    ; STR_CHAOS $46 (CHAOS
  DEFB $25,$D1,$05,$00    ; STR_LAW $47 (LAW
  DEFB $2A,$D1,$07,$00    ; STR_COMBAT $48 COMBAT=
  DEFB $31,$D1,$0E,$00    ; STR_RANGED_COMBAT $49 RANGED COMBAT=
  DEFB $3F,$D1,$06,$00    ; STR_RANGE $4A RANGE=
  DEFB $45,$D1,$08,$00    ; STR_DEFENCE $4B DEFENCE=
  DEFB $4D,$D1,$13,$00    ; STR_MOVEMENT $4C MOVEMENT ALLOWANCE=
  DEFB $60,$D1,$11,$00    ; STR_MANOEUVRE $4D MANOEUVRE RATING=
  DEFB $71,$D1,$11,$00    ; STR_MAGIC_RESISTANCE $4E MAGIC RESISTANCE=
  DEFB $82,$D1,$0F,$00    ; STR_CHANCE $4F CASTING CHANCE=
  DEFB $91,$D1,$02,$00    ; STR_10 $50 10
  DEFB $93,$D1,$07,$00    ; STR_SPELLS $51 SPELLS=
  DEFB $9A,$D1,$08,$00    ; STR_ABILITY $52 ABILITY=
  DEFB $A2,$D1,$09,$00    ; STR_S_SPELLS $53 'S SPELLS
  DEFB $AB,$D1,$0B,$00    ; STR_FAILS $54 SPELL FAILS
  DEFB $B6,$D1,$0E,$00    ; STR_SUCCEEDS $55 SPELL SUCCEEDS
  DEFB $C4,$D1,$0D,$00    ; STR_IS_THE_WINNER $56 IS THE WINNER
  DEFB $D1,$D1,$20,$00    ; STR_PRESS_1_TO_4 $57 PRESS KEYS 1 TO 4
  DEFB $F1,$D1,$20,$00    ; STR_PRESS_0 $58 PRESS '0' TO RETURN TO MAIN MENU
  DEFB $11,$D2,$10,$00    ; STR_1_EXAMINE $59 1.EXAMINE SPELLS
  DEFB $21,$D2,$0E,$00    ; STR_2_SELECT $5A 2.SELECT SPELL
  DEFB $2F,$D2,$0F,$00    ; STR_3_EXAMINE $5B 3.EXAMINE BOARD
  DEFB $3E,$D2,$14,$00    ; STR_4_CONTINUE $5C 4.CONTINUE WITH GAME
  DEFB $52,$D2,$0A,$00    ; STR_DISBELIEVE $5D DISBELIEVE
  DEFB $5C,$D2,$18,$00    ; STR_ILLUSION $5E ILLUSION? (PRESS Y OR N)
  DEFB $74,$D2,$0C,$00    ; STR_S_CREATIONS $5F 'S CREATIONS
  DEFB $80,$D2,$0A,$00    ; STR_MAGIC_FIRE $60 MAGIC FIRE
  DEFB $8A,$D2,$0A,$00    ; STR_GOOEY_BLOB $61 GOOEY BLOB
  DEFB $94,$D2,$09,$00    ; STR_LIGHTNING $62 LIGHTNING
  DEFB $9D,$D2,$09,$00    ; STR_VENGEANCE $63 VENGEANCE
  DEFB $A6,$D2,$0A,$00    ; STR_DARK_POWER $64 DARK POWER
  DEFB $B0,$D2,$06,$00    ; STR_DECREE $65 DECREE
  DEFB $B6,$D2,$07,$00    ; STR_JUSTICE $66 JUSTICE
  DEFB $BD,$D2,$05,$00    ; STR_LAW_1 $67 LAW-1
  DEFB $C2,$D2,$05,$00    ; STR_LAW_2 $68 LAW-2
  DEFB $C7,$D2,$07,$00    ; STR_CHAOS_1 $69 CHAOS-1
  DEFB $CE,$D2,$07,$00    ; STR_CHAOS_2 $6A CHAOS-2
  DEFB $D5,$D2,$0C,$00    ; STR_MAGIC_SHIELD $6B MAGIC SHIELD
  DEFB $E1,$D2,$0C,$00    ; STR_MAGIC_ARMOUR $6C MAGIC ARMOUR
  DEFB $ED,$D2,$0B,$00    ; STR_MAGIC_SWORD $6D MAGIC SWORD
  DEFB $F8,$D2,$0B,$00    ; STR_MAGIC_KNIFE $6E MAGIC KNIFE
  DEFB $03,$D3,$09,$00    ; STR_MAGIC_BOW $6F MAGIC BOW
  DEFB $11,$D3,$0A,$00    ; STR_MAGIC_BOLT $70 MAGIC BOLT
  DEFB $0C,$D3,$05,$00    ; STR_BLIND $71 BLIND
  DEFB $1B,$D3,$07,$00    ; STR_TEMPEST $72 TEMPEST
  DEFB $22,$D3,$0A,$00    ; STR_RAISE_DEAD $73 RAISE DEAD
  DEFB $2C,$D3,$08,$00    ; STR_TELEPORT $74 TELEPORT
  DEFB $34,$D3,$0A,$00    ; STR_SUBVERSION $75 SUBVERSION
  DEFB $3E,$D3,$07,$00    ; STR_TURMOIL $76 TURMOIL
  DEFB $45,$D3,$0C,$00    ; STR_DEAD_REVENGE $77 DEAD REVENGE
  DEFB $51,$D3,$0C,$00    ; STR_CONSECRATION $78 CONSECRATION
  DEFB $5D,$D3,$06,$00    ; STR_DISPEL $79 DISPEL
  DEFB $63,$D3,$0D,$00    ; STR_COUNTER_SPELL $7A COUNTER SPELL
  DEFB $70,$D3,$0B,$00    ; STR_MAGIC_WINGS $7B MAGIC WINGS
  DEFB $7B,$D3,$0B,$00    ; STR_MAGIC_SLEEP $7C MAGIC SLEEP
  DEFB $86,$D3,$0B,$00    ; STR_SHADOW_FORM $7D SHADOW FORM

; (Empty string of characters)
STR_EMPTY_STRING:
  DEFM "                               "

; (ASLEEP)
STR_ASLEEP_BRACKETS:
  DEFM " (ASLEEP)"

; (DEAD)
STR_DEAD_BRACKETS:
  DEFM " (DEAD)"

; DISMOUNT WIZARD? (Y OR N)
STR_DISMOUNT:
  DEFM "DISMOUNT WIZARD? (Y OR N)       "

; ENGAGED TO ENEMY
STR_ENGAGED:
  DEFM "ENGAGED TO ENEMY                "

; OUT OF RANGE
STR_OUT_OF_RANGE:
  DEFM "OUT OF RANGE                    "

; (FLYING)
STR_FLYING_BRACKETS:
  DEFM " (FLYING)     "

; 'S TURN
STR_S_TURN:
  DEFM "'S TURN"

; MOVEMENT POINTS LEFT=
STR_MOVE_POINTS_LEFT:
  DEFM "MOVEMENT POINTS LEFT="

; UNDEAD-CANNOT BE ATTACKED
STR_UNDEAD_CANNOT_ATTACK:
  DEFM "UNDEAD-CANNOT BE ATTACKED "

; MOVEMENT RANGE=
STR_MOVEMENT_RANGE:
  DEFM "MOVEMENT RANGE="

; RANGED COMBAT,RANGE=
STR_COMBAT_RANGE:
  DEFM "RANGED COMBAT,RANGE="

; NO LINE OF SIGHT
STR_NO_LOS:
  DEFM "NO LINE OF SIGHT"

; PRESS ANY KEY
STR_PRESS_ANY_KEY:
  DEFM "         PRESS ANY KEY          "

; KNIFE
STR_KNIFE:
  DEFM "KNIFE"

; SWORD
STR_SWORD:
  DEFM "SWORD"

; ARMOUR
STR_ARMOUR:
  DEFM "ARMOUR"

; SHIELD
STR_SHIELD:
  DEFM "SHIELD"

; FLYING
STR_FLYING:
  DEFM "FLYING"

; SHADOW
STR_SHADOW:
  DEFM "SHADOW"

; MOUNT
STR_MOUNT:
  DEFM "MOUNT"

; UNDEAD
STR_UNDEAD:
  DEFM "UNDEAD"

; (CHAOS
STR_CHAOS:
  DEFM "(CHAOS "

; (LAW
STR_LAW:
  DEFM "(LAW "

; COMBAT=
STR_COMBAT:
  DEFM "COMBAT="

; RANGED COMBAT=
STR_RANGED_COMBAT:
  DEFM "RANGED COMBAT="

; RANGE=
STR_RANGE:
  DEFM "RANGE="

; DEFENCE=
STR_DEFENCE:
  DEFM "DEFENCE="

; MOVEMENT ALLOWANCE=
STR_MOVEMENT:
  DEFM "MOVEMENT ALLOWANCE="

; MANOEUVRE RATING=
STR_MANOEUVRE:
  DEFM "MANOEUVRE RATING="

; MAGIC RESISTANCE=
STR_MAGIC_RESISTANCE:
  DEFM "MAGIC RESISTANCE="

; CASTING CHANCE=
STR_CHANCE:
  DEFM "CASTING CHANCE="

; 10
STR_10:
  DEFM "10"

; SPELLS=
STR_SPELLS:
  DEFM "SPELLS="

; ABILITY=
STR_ABILITY:
  DEFM "ABILITY="

; 'S SPELLS
STR_S_SPELLS:
  DEFM "'S SPELLS"

; SPELL FAILS
STR_FAILS:
  DEFM "SPELL FAILS"

; SPELL SUCCEEDS
STR_SUCCEEDS:
  DEFM "SPELL SUCCEEDS"

; IS THE WINNER
STR_IS_THE_WINNER:
  DEFM "IS THE WINNER"

; PRESS KEYS 1 TO 4
STR_PRESS_1_TO_4:
  DEFM "       PRESS KEYS 1 TO 4        "

; PRESS '0' TO RETURN TO MAIN MENU
STR_PRESS_0:
  DEFM "PRESS '0' TO RETURN TO MAIN MENU"

; 1.EXAMINE SPELLS
STR_1_EXAMINE:
  DEFM "1.EXAMINE SPELLS"

; 2.SELECT SPELL
STR_2_SELECT:
  DEFM "2.SELECT SPELL"

; 3.EXAMINE BOARD
STR_3_EXAMINE:
  DEFM "3.EXAMINE BOARD"

; 4.CONTINUE WITH GAME
STR_4_CONTINUE:
  DEFM "4.CONTINUE WITH GAME"

; DISBELIEVE
STR_DISBELIEVE:
  DEFM "DISBELIEVE"

; ILLUSION? (PRESS Y OR N)
STR_ILLUSION:
  DEFM "ILLUSION? (PRESS Y OR N)"

; 'S CREATIONS
STR_S_CREATIONS:
  DEFM "'S CREATIONS"

; MAGIC FIRE
STR_MAGIC_FIRE:
  DEFM "MAGIC FIRE"

; GOOEY BLOB
STR_GOOEY_BLOB:
  DEFM "GOOEY BLOB"

; LIGHTNING
STR_LIGHTNING:
  DEFM "LIGHTNING"

; VENGEANCE
STR_VENGEANCE:
  DEFM "VENGEANCE"

; DARK POWER
STR_DARK_POWER:
  DEFM "DARK POWER"

; DECREE
STR_DECREE:
  DEFM "DECREE"

; JUSTICE
STR_JUSTICE:
  DEFM "JUSTICE"

; LAW-1
STR_LAW_1:
  DEFM "LAW-1"

; LAW-2
STR_LAW_2:
  DEFM "LAW-2"

; CHAOS-1
STR_CHAOS_1:
  DEFM "CHAOS-1"

; CHAOS-2
STR_CHAOS_2:
  DEFM "CHAOS-2"

; MAGIC SHIELD
STR_MAGIC_SHIELD:
  DEFM "MAGIC SHIELD"

; MAGIC ARMOUR
STR_MAGIC_ARMOUR:
  DEFM "MAGIC ARMOUR"

; MAGIC SWORD
STR_MAGIC_SWORD:
  DEFM "MAGIC SWORD"

; MAGIC KNIFE
STR_MAGIC_KNIFE:
  DEFM "MAGIC KNIFE"

; MAGIC BOW
STR_MAGIC_BOW:
  DEFM "MAGIC BOW"

; BLIND
STR_BLIND:
  DEFM "BLIND"

; MAGIC BOLT
STR_MAGIC_BOLT:
  DEFM "MAGIC BOLT"

; TEMPEST
STR_TEMPEST:
  DEFM "TEMPEST"

; RAISE DEAD
STR_RAISE_DEAD:
  DEFM "RAISE DEAD"

; TELEPORT
STR_TELEPORT:
  DEFM "TELEPORT"

; SUBVERSION
STR_SUBVERSION:
  DEFM "SUBVERSION"

; TURMOIL
STR_TURMOIL:
  DEFM "TURMOIL"

; DEAD REVENGE
STR_DEAD_REVENGE:
  DEFM "DEAD REVENGE"

; CONSECRATION
STR_CONSECRATION:
  DEFM "CONSECRATION"

; DISPEL
STR_DISPEL:
  DEFM "DISPEL"

; COUNTER SPELL
STR_COUNTER_SPELL:
  DEFM "COUNTER SPELL"

; MAGIC WINGS
STR_MAGIC_WINGS:
  DEFM "MAGIC WINGS"

; MAGIC SLEEP
STR_MAGIC_SLEEP:
  DEFM "MAGIC SLEEP"

; SHADOW FORM
STR_SHADOW_FORM:
  DEFM "SHADOW FORM"

; Variable - used by the routine at IDENTIFY_WIZARDS_CREATURES when identifying
; which of the creatures are controlled by a particular wizard.
IDENTIFY_WIZARD_ID:
  DEFB $01

; Flashes the background of the wizard's creatures to identify them. Used when
; it's the start of a wizard's turn, or when pressing a number key on the
; arena.
;
; Used by the routines at WIZARD_TURN and KEY_INPUT.
IDENTIFY_WIZARDS_CREATURES:
  DI
  PUSH AF
  PUSH BC
  PUSH DE
  PUSH HL
  LD HL,ARENA_STATE_1     ; HL = first space in arena table 1
  LD B,$9F                ; B = $9F. We're going to loop over arena table 1.
IDENTIFY_WIZARDS_CREATURES_0:
  PUSH HL
  PUSH BC
  LD A,(HL)               ; Get the ID of the creature at the current space.
  OR A                    ; If it's 0 (there's nothing there), jump to
                          ; IDENTIFY_WIZARDS_CREATURES_1.
  JR Z,IDENTIFY_WIZARDS_CREATURES_1
  LD DE,$0141             ; There was something there. A = the data at
  ADD HL,DE               ; corresponding place in arena table 3.
  LD A,(HL)               ;
  CP $04                            ; If the data was $04 (indicating a dead
  JR Z,IDENTIFY_WIZARDS_CREATURES_1 ; creature) jump to
                                    ; IDENTIFY_WIZARDS_CREATURES_1.
  LD DE,$00A0             ; Point HL to the corresponding space in arena table
  ADD HL,DE               ; 4.
  LD A,(HL)               ; A = data from arena table 4
  LD DE,$01E1             ; HL is pointed back to another arena table - but is
  SBC HL,DE               ; it ever used?
  AND $07                 ; Reset everything but the least 3 significant bits,
                          ; which are the ones storing the owning wizard's ID.
  LD E,A                            ; If the wizard whose creatures we're
  LD A,(IDENTIFY_WIZARD_ID)         ; trying to identify owns the object at the
  CP E                              ; current space, jump to
  JR Z,IDENTIFY_WIZARDS_CREATURES_2 ; IDENTIFY_WIZARDS_CREATURES_2.
IDENTIFY_WIZARDS_CREATURES_1:
  POP BC                  ; Move to the next space and continue the loop, if
  POP HL                  ; there are more spaces to examine.
  INC HL                  ;
  DJNZ IDENTIFY_WIZARDS_CREATURES_0
  POP HL
  POP DE
  POP BC
  POP AF
  RET
IDENTIFY_WIZARDS_CREATURES_2:
  LD (VAR_E005_MAYBE_ARENA_COORDS),HL
  LD A,$02
  CALL $1601              ; Chan-open ROM subroutine.
  CALL MAYBE_FIND_ARENA_COORDS
  LD A,$16
  RST $10
  LD A,H
  RST $10
  LD A,L
  RST $10
  LD A,$8F
  RST $10
  LD A,$8F
  RST $10
  LD A,$16
  RST $10
  LD A,H
  INC A
  RST $10
  LD A,L
  RST $10
  LD A,$8F
  RST $10
  LD A,$8F
  RST $10
  JR IDENTIFY_WIZARDS_CREATURES_1

; Data block at D3F0
  DEFB $FE,$4B

; Mysterious table, seemingly used to decide where computer players move.
MAYBE_AI_TABLE:
  DEFB $3F,$46,$2D,$8A,$18,$46,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF
  DEFB $00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF
  DEFB $00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF
  DEFB $00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF
  DEFB $00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF
  DEFB $00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF
  DEFB $00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF
  DEFB $00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF
  DEFB $00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF
  DEFB $00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF
  DEFB $00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF
  DEFB $00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF
  DEFB $00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF
  DEFB $00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF
  DEFB $00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF
  DEFB $00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF
  DEFB $00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF
  DEFB $00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF
  DEFB $00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF
  DEFB $00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$CD,$D1,$97,$CD
  DEFB $56,$FE,$3E,$00,$32,$8D,$5C,$3E
  DEFB $FF,$32,$8E,$5C,$CD,$DD,$C0,$FB
  DEFB $76,$3E,$03,$32,$91,$5C,$CD,$D7
  DEFB $BE,$3A,$CE,$97,$47,$C5,$CD,$96
  DEFB $BC,$CD,$BF,$02,$FE,$53,$28,$0D
  DEFB $FE,$4B,$20,$F2,$C1,$21,$B1,$C2
  DEFB $CD,$F9,$C2,$FB,$C9,$CD,$CC,$BB
  DEFB $CD,$86,$97,$F2,$77,$98,$CD,$D7
  DEFB $BE,$01,$00,$16,$3E,$45,$32,$8F
  DEFB $5C,$3E,$35,$CD,$FB,$BA,$CD,$CC
  DEFB $BB,$CD,$B0,$BB,$18,$C8,$2A,$12
  DEFB $AC,$7E,$B7,$28,$14,$3A,$7B,$93
  DEFB $FE,$24,$F2,$3F,$98,$2A,$12,$AC
  DEFB $11,$41,$01,$19,$7E,$FE,$04,$20
  DEFB $AD,$CD,$F1,$98,$20,$A8,$CD,$0F
  DEFB $9C,$20,$A3,$CD,$DB,$98,$28,$19
  DEFB $3E,$45,$32,$8F,$5C,$CD,$D7,$BE
  DEFB $3E,$3C,$01,$00,$16,$CD,$FB,$BA
  DEFB $CD,$CC,$BB,$CD,$B0,$BB,$C3,$3F
  DEFB $98,$CD,$8A,$A1,$3A,$67,$91,$B7
  DEFB $28,$13,$CD,$41,$99,$C1,$C5,$78
  DEFB $FE,$01,$20,$03,$CD,$A3,$97,$C1
  DEFB $05,$C2,$3E,$98,$C9,$C1,$CD,$A3
  DEFB $97,$C9,$AF,$32,$54,$B7,$32,$0B
  DEFB $B6,$CD,$77,$BA,$CD,$26,$B6,$CD
  DEFB $DD,$C0,$76,$3A,$54,$B7,$B7,$C9
  DEFB $3E,$00,$32,$40,$99,$3A,$7B,$93
  DEFB $FE,$24,$FA,$3B,$99,$FE,$26,$F2
  DEFB $3B,$99,$21,$2A,$CD,$22,$3A,$CD
  DEFB $2A,$14,$AC,$22,$8B,$C7,$06,$08
  DEFB $C5,$2A,$12,$AC,$22,$14,$AC,$CD
  DEFB $3C,$CD,$2A,$14,$AC,$7C,$85,$28
  DEFB $10,$7E,$FE,$24,$FA,$32,$99,$FE
  DEFB $26,$F2,$32,$99,$3E,$01,$32,$40
  DEFB $99,$C1,$10,$DC,$2A,$8B,$C7,$22
  DEFB $14,$AC,$3A,$40,$99,$B7,$C9,$00
  DEFB $2A,$12,$AC,$3A,$7B,$93,$FE,$22
  DEFB $28,$0D,$FE,$23,$28,$09,$7E,$11
  DEFB $21,$03,$19,$77,$3A,$7B,$93,$2A
  DEFB $12,$AC,$77,$11,$A1,$00,$19,$36
  DEFB $01,$1B,$19,$36,$00,$19,$3A,$0E
  DEFB $AC,$77,$3A,$66,$91,$B7,$28,$02
  DEFB $CB,$E6,$76,$C9,$3E,$01,$32,$CE
  DEFB $97,$3A,$2E,$AC,$B7,$20,$04,$CD
  DEFB $1A,$98,$C9,$CD,$8D,$C7,$3E,$03
  DEFB $32,$03,$AC,$3A,$7B,$93,$FE,$22
  DEFB $FA,$99,$99,$3E,$0D,$32,$03,$AC
  DEFB $CD,$55,$C9,$CD,$DC,$C9,$FE,$4B
  DEFB $20,$06,$3E,$00,$32,$5F,$97,$C9
  DEFB $CD,$0E,$98,$28,$EE,$CD,$DB,$98
  DEFB $20,$E9,$2A,$12,$AC,$7E,$B7,$28
  DEFB $09,$11,$41,$01,$19,$7E,$FE,$04
  DEFB $20,$D9,$CD,$7A,$96,$CD,$8A,$A1
  DEFB $3A,$7B,$93,$FE,$22,$F2,$DE,$99
  DEFB $CD,$94,$BE,$FE,$02,$F2,$DE,$99
  DEFB $3E,$01,$32,$66,$91,$CD,$60,$97
  DEFB $3A,$67,$91,$B7,$C4,$41,$99,$3E
  DEFB $00,$32,$66,$91,$CD,$A3,$97,$C9
  DEFB $3A,$2E,$AC,$B7,$C2,$95,$9A,$CD
  DEFB $96,$BC,$CD,$BF,$02,$FE,$53,$28
  DEFB $0C,$FE,$4B,$20,$F2,$21,$B1,$C2
  DEFB $CD,$F9,$C2,$FB,$C9,$CD,$CC,$BB
  DEFB $2A,$12,$AC,$7E,$B7,$28,$E0,$FE
  DEFB $22,$F2,$F8,$99,$CD,$21,$9A,$C9
  DEFB $CD,$8A,$A1,$2A,$12,$AC,$3E,$00
  DEFB $32,$67,$91,$11,$E1,$01,$19,$CB
  DEFB $66,$28,$11,$11,$A0,$00,$19,$7E
  DEFB $2A,$12,$AC,$77,$CD,$52,$9A,$3E
  DEFB $01,$32,$67,$91,$CD,$A3,$97,$2A
  DEFB $12,$AC,$11,$E1,$01,$19,$CB,$EE
  DEFB $C9,$21,$21,$91,$22,$F3,$C2,$CD
  DEFB $F6,$C2,$3E,$46,$32,$8F,$5C,$21
  DEFB $45,$A3,$22,$88,$A1,$2A,$12,$AC
  DEFB $22,$05,$E0,$CD,$07,$E0,$22,$4C
  DEFB $DF,$06,$07,$F3,$C5,$2A,$88,$A1
  DEFB $22,$4A,$DF,$CD,$4E,$DF,$CD,$01
  DEFB $C3,$11,$20,$00,$2A,$88,$A1,$19
  DEFB $22,$88,$A1,$C1,$10,$E6,$CD,$DD
  DEFB $C0,$FB,$76,$C9,$2A,$14,$AC,$22
  DEFB $8B,$C7,$CD,$BC,$C7,$2A,$8B,$C7
  DEFB $22,$14,$AC,$21,$F2,$D3,$22,$86
  DEFB $CD,$3A,$BB,$C7,$3C,$CD,$4C,$C6
  DEFB $CD,$7E,$A1,$FE,$FF,$20,$06,$3E
  DEFB $00,$32,$5F,$97,$C9,$21,$1F,$E0
  DEFB $16,$00,$5F,$19,$22,$12,$AC,$7E
  DEFB $FE,$22,$F2,$B1,$9A,$11,$E1,$01
  DEFB $19,$CB,$6E,$20,$DB,$CD,$7A,$96
  DEFB $CD,$21,$9A,$C9,$3E,$08,$32,$CE
  DEFB $97,$3A,$7B,$93,$FE,$26,$FA,$EF
  DEFB $9A,$3E,$01,$32,$CE,$97,$3A,$2E
  DEFB $AC,$B7,$20,$0B,$3A,$7B

; Data block at D808
VAR_D808:
  DEFB $93,$FE,$24,$28,$23,$CD,$1A,$98
  DEFB $C9,$3A,$7B,$93,$FE,$26,$FA,$1C
  DEFB $9B,$2A,$12,$AC,$7E,$FE,$26,$FA
  DEFB $1C,$9B,$FE,$28,$F2,$1C,$9B,$3E
  DEFB $00,$32,$5F,$97,$C9,$CD,$7A,$96
  DEFB $2A,$14,$AC,$22,$B7,$C8,$3E,$0D
  DEFB $32,$03,$AC,$CD,$60,$97,$3A,$CE
  DEFB $97,$47,$C5,$CD,$55,$C9,$CD,$DC
  DEFB $C9,$FE,$4B,$28,$38,$CD,$0E,$98
  DEFB $28,$F4,$2A,$12,$AC,$7E,$B7,$20
  DEFB $ED,$CD,$F1,$98,$20,$E8,$CD,$DB
  DEFB $98,$20,$E3,$CD,$8A,$A1,$3A,$67
  DEFB $91,$B7,$28,$16,$3A,$7B,$93,$2A
  DEFB $12,$AC,$77,$11,$E1,$01,$19,$3A
  DEFB $0E,$AC,$77,$CD,$DD,$C0,$C1,$10
  DEFB $C1,$C9,$CD,$A3,$97,$C1,$C9,$3E
  DEFB $04,$32,$CE,$97,$3A,$2E,$AC,$B7
  DEFB $20,$04,$CD,$1A,$98,$C9,$3E,$09
  DEFB $32,$03,$AC,$2A,$14,$AC,$22,$8B
  DEFB $C7,$CD,$BC,$C7,$2A,$8B,$C7,$22
  DEFB $14,$AC,$21,$F2,$D3,$22,$86,$CD
  DEFB $3A,$BB,$C7,$3C,$CD,$4C,$C6,$CD
  DEFB $7E,$A1,$FE,$FF,$20,$06,$3E,$00
  DEFB $32,$5F,$97,$C9,$16,$00,$5F,$21
  DEFB $1F,$E0,$19,$22,$12,$AC,$22,$B7
  DEFB $C8,$7E,$FE,$1E,$F2,$CD,$9B,$FE
  DEFB $13,$FA,$CD,$9B,$18,$D9,$CD,$60
  DEFB $97,$CD,$7A,$96,$06,$04,$C5,$CD
  DEFB $55,$C9,$CD,$DC,$C9,$FE,$4B,$28
  DEFB $22,$CD,$0E,$98,$28,$F4,$2A,$12
  DEFB $AC,$7E,$B7,$20,$ED,$CD,$0F,$9C
  DEFB $20,$E8,$CD,$DB,$98,$20,$E3,$CD

; Graphics - Top half of symbol set 1
GRAPHICS_SYMBOLS_1_TOP_HALVES:
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $30,$30,$30,$30,$30,$30,$30,$00
  DEFB $66,$66,$22,$44,$00,$00,$00,$00
  DEFB $6C,$6C,$FE,$FE,$6C,$6C,$6C,$FE
  DEFB $10,$7C,$FE,$D6,$D0,$FC,$7E,$16
  DEFB $46,$A4,$AC,$48,$18,$10,$30,$24
  DEFB $30,$48,$48,$78,$30,$72,$DA,$CC
  DEFB $18,$18,$08,$10,$00,$00,$00,$00
  DEFB $0C,$18,$18,$30,$30,$30,$30,$30
  DEFB $60,$30,$30,$18,$18,$18,$18,$18
  DEFB $00,$00,$10,$92,$54,$38,$10,$38
  DEFB $00,$00,$18,$18,$18,$7E,$7E,$18
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$FE,$FE,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $06,$04,$0C,$08,$18,$10,$30,$20

; Graphics - Top half of the numbers
GRAPHICS_NUMBERS_TOP_HALVES:
  DEFB $38,$7C,$EE,$C6,$CE,$D6,$E6,$C6
  DEFB $18,$38,$78,$18,$18,$18,$18,$18
  DEFB $38,$7C,$CE,$06,$0E,$3C,$78,$E0
  DEFB $38,$7C,$CE,$06,$06,$1C,$06,$06
  DEFB $06,$0E,$1E,$36,$66,$C6,$FE,$FE
  DEFB $FE,$FE,$C0,$F8,$FC,$CE,$06,$06
  DEFB $38,$7C,$E6,$C0,$F8,$FC,$EE,$C6
  DEFB $FE,$FE,$06,$06,$0C,$0C,$18,$18
  DEFB $38,$7C,$EE,$C6,$EE,$7C,$EE,$C6
  DEFB $38,$7C,$EE,$C6,$EE,$7E,$3E,$06

; Graphics - Top half of symbol set 2
GRAPHICS_SYMBOLS_2_TOP_HALVES:
  DEFB $00,$00,$00,$00,$18,$18,$00,$00
  DEFB $00,$00,$00,$00,$18,$18,$00,$00
  DEFB $00,$00,$04,$0C,$18,$30,$60,$30
  DEFB $00,$00,$00,$FE,$FE,$00,$00,$FE
  DEFB $00,$00,$40,$60,$30,$18,$0C,$18
  DEFB $38,$7C,$CE,$06,$0E,$1C,$18,$18
  DEFB $38,$7C,$C6,$92,$AA,$AA,$AA,$94

; Graphics - Top half of the upper case letters
GRAPHICS_LETTERS_UPPER_CASE_TOP_HALVES:
  DEFB $38,$7C,$EE,$C6,$C6,$FE,$FE,$C6
  DEFB $FC,$FE,$C6,$C6,$FC,$FE,$C6,$C6
  DEFB $38,$7C,$E6,$C0,$C0,$C0,$C0,$C0
  DEFB $F8,$FC,$CE,$C6,$C6,$C6,$C6,$C6
  DEFB $FE,$FE,$C0,$C0,$F8,$F8,$C0,$C0
  DEFB $FE,$FE,$C0,$C0,$F8,$F8,$C0,$C0
  DEFB $38,$7C,$E6,$C0,$C0,$C0,$C0,$C6
  DEFB $C6,$C6,$C6,$C6,$FE,$FE,$C6,$C6
  DEFB $FC,$FC,$30,$30,$30,$30,$30,$30
  DEFB $FE,$FE,$18,$18,$18,$18,$18,$18
  DEFB $C2,$C6,$CC,$D8,$F0,$E0,$F0,$D8
  DEFB $C0,$C0,$C0,$C0,$C0,$C0,$C0,$C0
  DEFB $C6,$C6,$EE,$FE,$FE,$D6,$C6,$C6
  DEFB $C6,$C6,$E6,$E6,$F6,$D6,$DE,$CE
  DEFB $38,$7C,$EE,$C6,$C6,$C6,$C6,$C6
  DEFB $F8,$FC,$CE,$C6,$C6,$CE,$FC,$F8
  DEFB $38,$7C,$EE,$C6,$C6,$C6,$C6,$C6
  DEFB $FC,$FE,$C6,$C6,$FE,$FC,$CE,$C6
  DEFB $7C,$FE,$C6,$C0,$F8,$7C,$0E,$06
  DEFB $FE,$FE,$18,$18,$18,$18,$18,$18
  DEFB $C6,$C6,$C6,$C6,$C6,$C6,$C6,$C6
  DEFB $C6,$C6,$C6,$C6,$C6,$6C,$6C,$38
  DEFB $C6,$C6,$C6,$C6,$C6,$D6,$FE,$FE
  DEFB $C6,$C6,$6C,$6C,$38,$38,$38,$6C
  DEFB $CC,$CC,$CC,$CC,$CC,$FC,$78,$30
  DEFB $FE,$FE,$06,$0E,$1C,$38,$70,$E0

; Graphics - Top half of symbol set 3
GRAPHICS_SYMBOLS_3_TOP_HALVES:
  DEFB $7E,$7E,$60,$60,$60,$60,$60,$60
  DEFB $C0,$40,$60,$20,$30,$10,$18,$08
  DEFB $7C,$7C,$0C,$0C,$0C,$0C,$0C,$0C
  DEFB $10,$10,$38,$38,$7C,$54,$10,$10
  DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Graphics - Top half of the lower case letters
;
; GRAPHICS_LETTERS_LOWER_CASE_TOP_HALVES represents the pound sign (character
; map number $60) then the following are the top halves of the lower case
; letters.
GRAPHICS_LETTERS_LOWER_CASE_TOP_HALVES:
  DEFB $38,$7C,$E6,$C0,$C0,$FC,$7C,$60
  DEFB $00,$00,$00,$00,$3E,$7E,$E6,$C6
  DEFB $C0,$C0,$C0,$C0,$F8,$FC,$CE,$C6
  DEFB $00,$00,$00,$00,$3E,$7E,$E0,$C0
  DEFB $06,$06,$06,$06,$3E,$7E,$E6,$C6
  DEFB $00,$00,$00,$00,$38,$7C,$E6,$FE
  DEFB $38,$7C,$E6,$C0,$F8,$F8,$C0,$C0
  DEFB $00,$00,$00,$00,$3E,$7E,$E6,$C6
  DEFB $C0,$C0,$C0,$C0,$F8,$FC,$CE,$C6
  DEFB $30,$30,$00,$00,$30,$30,$30,$30
  DEFB $06,$06,$00,$00,$06,$06,$06,$06
  DEFB $C0,$C0,$C0,$C0,$C6,$DE,$F8,$E0
  DEFB $30,$30,$30,$30,$30,$30,$30,$30
  DEFB $00,$00,$00,$00,$EC,$FE,$FE,$D6
  DEFB $00,$00,$00,$00,$F8,$FC,$CE,$C6
  DEFB $00,$00,$00,$00,$38,$7C,$EE,$C6
  DEFB $00,$00,$00,$00,$F8,$FC,$CE,$C6
  DEFB $00,$00,$00,$00,$3E,$7E,$E6,$C6
  DEFB $00,$00,$00,$00,$38,$7C,$E6,$C0
  DEFB $00,$00,$00,$00,$7E,$FE,$C0,$7C
  DEFB $C0,$C0,$C0,$C0,$FC,$FC,$C0,$C0
  DEFB $00,$00,$00,$00,$C6,$C6,$C6,$C6
  DEFB $00,$00,$00,$00,$C6,$C6,$6C,$6C
  DEFB $00,$00,$00,$00,$C6,$C6,$C6,$D6
  DEFB $00,$00,$00,$00,$C6,$EE,$7C,$38
  DEFB $00,$00,$00,$00,$C6,$C6,$C6,$C6
  DEFB $00,$00,$00,$00,$FE,$FE,$0C,$18
  DEFB $0C,$18,$18,$18,$30,$E0,$30,$18
  DEFB $18,$18,$18,$18,$18,$18,$18,$18
  DEFB $E0,$30,$30,$30,$18,$0E,$18,$30
  DEFB $00,$32,$7E,$4C,$00,$00,$00,$00
  DEFB $38,$7C,$C6,$92,$AA,$A2,$AA,$92

; Graphics - Bottom half of symbol set 1
GRAPHICS_SYMBOLS_1_BOTTOM_HALVES:
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$30,$30,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $FE,$6C,$6C,$00,$00,$00,$00,$00
  DEFB $D6,$FE,$7C,$10,$00,$00,$00,$00
  DEFB $6A,$4A,$C4,$00,$00,$00,$00,$00
  DEFB $CE,$FA,$72,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $18,$18,$0C,$00,$00,$00,$00,$00
  DEFB $30,$30,$60,$00,$00,$00,$00,$00
  DEFB $54,$92,$10,$00,$00,$00,$00,$00
  DEFB $18,$18,$00,$00,$00,$00,$00,$00
  DEFB $18,$18,$08,$10,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$18,$18,$00,$00,$00,$00,$00
  DEFB $60,$40,$C0,$00,$00,$00,$00,$00

; Graphics - Bottom half of the numbers
GRAPHICS_NUMBERS_BOTTOM_HALVES:
  DEFB $EE,$7C,$38,$00,$00,$00,$00,$00
  DEFB $18,$7E,$7E,$00,$00,$00,$00,$00
  DEFB $C0,$FE,$FE,$00,$00,$00,$00,$00
  DEFB $CE,$7C,$38,$00,$00,$00,$00,$00
  DEFB $06,$06,$06,$00,$00,$00,$00,$00
  DEFB $CE,$7C,$38,$00,$00,$00,$00,$00
  DEFB $EE,$7C,$38,$00,$00,$00,$00,$00
  DEFB $30,$30,$30,$00,$00,$00,$00,$00
  DEFB $EE,$7C,$38,$00,$00,$00,$00,$00
  DEFB $CE,$7C,$38,$00,$00,$00,$00,$00

; Graphics - Bottom half of symbol set 2
GRAPHICS_SYMBOLS_2_BOTTOM_HALVES:
  DEFB $00,$18,$18,$00,$00,$00,$00,$00
  DEFB $00,$18,$18,$08,$10,$00,$00,$00
  DEFB $18,$0C,$04,$00,$00,$00,$00,$00
  DEFB $FE,$00,$00,$00,$00,$00,$00,$00
  DEFB $30,$60,$40,$00,$00,$00,$00,$00
  DEFB $00,$18,$18,$00,$00,$00,$00,$00
  DEFB $C0,$7E,$3C,$00,$00,$00,$00,$00

; Graphics - Bottom half of the upper case letters
GRAPHICS_LETTERS_UPPER_CASE_BOTTOM_HALVES:
  DEFB $C6,$C6,$C6,$00,$00,$00,$00,$00
  DEFB $C6,$FE,$FC,$00,$00,$00,$00,$00
  DEFB $E6,$7C,$38,$00,$00,$00,$00,$00
  DEFB $CE,$FC,$F8,$00,$00,$00,$00,$00
  DEFB $C0,$FE,$FE,$00,$00,$00,$00,$00
  DEFB $C0,$C0,$C0,$00,$00,$00,$00,$00
  DEFB $E6,$7E,$3E,$00,$00,$00,$00,$00
  DEFB $C6,$C6,$C6,$00,$00,$00,$00,$00
  DEFB $30,$FC,$FC,$00,$00,$00,$00,$00
  DEFB $38,$F0,$E0,$00,$00,$00,$00,$00
  DEFB $CC,$C6,$C2,$00,$00,$00,$00,$00
  DEFB $C0,$FE,$FE,$00,$00,$00,$00,$00
  DEFB $C6,$C6,$C6,$00,$00,$00,$00,$00
  DEFB $CE,$C6,$C6,$00,$00,$00,$00,$00
  DEFB $EE,$7C,$38,$00,$00,$00,$00,$00
  DEFB $C0,$C0,$C0,$00,$00,$00,$00,$00
  DEFB $EE,$7C,$38,$0E,$00,$00,$00,$00
  DEFB $C6,$C6,$C6,$00,$00,$00,$00,$00
  DEFB $C6,$FE,$7C,$00,$00,$00,$00,$00
  DEFB $18,$18,$18,$00,$00,$00,$00,$00
  DEFB $EE,$7C,$38,$00,$00,$00,$00,$00
  DEFB $38,$10,$10,$00,$00,$00,$00,$00
  DEFB $EE,$C6,$C6,$00,$00,$00,$00,$00
  DEFB $6C,$C6,$C6,$00,$00,$00,$00,$00
  DEFB $30,$30,$30,$00,$00,$00,$00,$00
  DEFB $C0,$FE,$FE,$00,$00,$00,$00,$00
  DEFB $60,$7E,$7E,$00,$00,$00,$00,$00

; Graphics - Bottom half of symbol set 3
GRAPHICS_SYMBOLS_3_BOTTOM_HALVES:
  DEFB $0C,$04,$06,$00,$00,$00,$00,$00
  DEFB $0C,$7C,$7C,$00,$00,$00,$00,$00
  DEFB $38,$38,$28,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$FF,$FF,$00,$00
  DEFB $60,$FE,$FE,$00,$00,$00,$00,$00

; Graphics - Bottom half of the lower case letters
GRAPHICS_LETTERS_LOWER_CASE_BOTTOM_HALVES:
  DEFB $E6,$7E,$3E,$00,$00,$00,$00,$00
  DEFB $CE,$FC,$F8,$00,$00,$00,$00,$00
  DEFB $E0,$7E,$3E,$00,$00,$00,$00,$00
  DEFB $E6,$7E,$3E,$00,$00,$00,$00,$00
  DEFB $E0,$7E,$3C,$00,$00,$00,$00,$00
  DEFB $C0,$C0,$C0,$00,$00,$00,$00,$00
  DEFB $E6,$7E,$3E,$06,$CE,$7C,$38,$00
  DEFB $C6,$C6,$C6,$00,$00,$00,$00,$00
  DEFB $30,$FC,$FC,$00,$00,$00,$00,$00
  DEFB $06,$06,$06,$06,$CE,$7C,$38,$00
  DEFB $F8,$DE,$C6,$00,$00,$00,$00,$00
  DEFB $30,$30,$18,$00,$00,$00,$00,$00
  DEFB $D6,$C6,$C6,$00,$00,$00,$00,$00
  DEFB $C6,$C6,$C6,$00,$00,$00,$00,$00
  DEFB $EE,$7C,$38,$00,$00,$00,$00,$00
  DEFB $CE,$FC,$F8,$C0,$C0,$C0,$C0,$00
  DEFB $E6,$7E,$3E,$06,$06,$06,$06,$00
  DEFB $C0,$C0,$C0,$00,$00,$00,$00,$00
  DEFB $06,$FE,$FC,$00,$00,$00,$00,$00
  DEFB $E6,$7C,$38,$00,$00,$00,$00,$00
  DEFB $EE,$7C,$38,$00,$00,$00,$00,$00
  DEFB $38,$38,$10,$00,$00,$00,$00,$00
  DEFB $D6,$FE,$6C,$00,$00,$00,$00,$00
  DEFB $7C,$EE,$C6,$00,$00,$00,$00,$00
  DEFB $E6,$7E,$3E,$06,$CE,$7C,$38,$00
  DEFB $30,$FE,$FE,$00,$00,$00,$00,$00
  DEFB $18,$18,$0C,$00,$00,$00,$00,$00
  DEFB $18,$18,$18,$00,$00,$00,$00,$00
  DEFB $30,$30,$E0,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $C6,$7C,$38,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00

; Routine at DF0C
;
; Used by the routine at ROUTINE_FE69.
ROUTINE_DF0C:
  JP ROUTINE_DF72

; Routine at DF0F - might be for printing text characters.
;
; Used by the routines at PRINT_SINGLE_CHAR, DRAW_BORDER and MAYBE_ANIMATION.
ROUTINE_DF0F_MAYBE_PRINTING_CHARACTERS:
  PUSH BC
  PUSH AF
  LD A,B
  AND $18
  OR $40
  LD H,A
  LD A,B
  AND $07
  RRCA
  RRCA
  RRCA
  ADD A,C
  LD L,A
  POP AF
  PUSH HL
  LD BC,($5C36)
  LD L,A
  LD H,$00
  ADD HL,HL
  ADD HL,HL
  ADD HL,HL
  ADD HL,BC
  POP DE
  PUSH DE
  LD B,$08
ROUTINE_DF0F_MAYBE_PRINTING_CHARACTERS_0:
  LD A,(HL)
  LD (DE),A
  INC D
  INC HL
  DJNZ ROUTINE_DF0F_MAYBE_PRINTING_CHARACTERS_0
  POP HL
  LD A,H
  RRCA
  RRCA
  RRCA
  AND $03
  OR $58
  LD H,A
  LD DE,($5C8F)
  LD (HL),E
  POP BC
  RET

; Data block at DF47
  DEFB $00,$00,$00

; Data block at DF4A
VAR_DF4A:
  DEFB $14,$FB

; Data block at DF4C
VAR_DF4C:
  DEFB $1D,$11

; Routine at DF4E maybe animation
;
; Used by the routines at DRAW_PICKED_CHARACTER, DISPLAY_EXPLOSION_ANIMATION,
; CAST_LIGHTNING, ROUTINE_9CA9, DISPLAY_CAST_ANIMATION,
; DISPLAY_ATTACK_ANIMATION, WIZARD_DEATH, RANGED_COMBAT, ROUTINE_BABE and
; ROUTINE_DF72.
MAYBE_ANIMATION:
  LD HL,(VAR_DF4A)
  DEC H
  LD ($5C36),HL
  LD BC,(VAR_DF4C)
  LD A,$20
  CALL ROUTINE_DF0F_MAYBE_PRINTING_CHARACTERS
  INC C
  LD A,$21
  CALL ROUTINE_DF0F_MAYBE_PRINTING_CHARACTERS
  DEC C
  INC B
  LD A,$22
  CALL ROUTINE_DF0F_MAYBE_PRINTING_CHARACTERS
  INC C
  LD A,$23
  CALL ROUTINE_DF0F_MAYBE_PRINTING_CHARACTERS
  RET

; Routine at DF72
;
; Used by the routine at ROUTINE_DF0C.
ROUTINE_DF72:
  PUSH HL
  PUSH BC
  PUSH DE
  PUSH AF
  LD A,($5C8F)
  PUSH AF
  LD HL,($5C36)
  PUSH HL
  LD HL,ARENA_STATE_1
  PUSH HL
  CALL $028E              ; Keyboard scanning ROM subroutine.
  POP HL
  LD A,D
  CP $28
  JR Z,ROUTINE_DF72_3
ROUTINE_DF72_0:
  LD A,(HL)
  CP $FF
  JR Z,ROUTINE_DF72_3
  OR A
  JR NZ,ROUTINE_DF72_4
ROUTINE_DF72_1:
  LD A,(HL)
  CP $01
  JR NZ,ROUTINE_DF72_2
  XOR A
  LD (HL),A
ROUTINE_DF72_2:
  INC HL
  JR ROUTINE_DF72_0
ROUTINE_DF72_3:
  POP HL
  LD ($5C36),HL
  POP AF
  LD ($5C8F),A
  POP AF
  POP DE
  POP BC
  POP HL
  RET
ROUTINE_DF72_4:
  PUSH HL
  PUSH AF
  LD DE,$00A1
  ADD HL,DE
  LD A,(HL)
  DEC A
  JR Z,ROUTINE_DF72_5
  LD (HL),A
  POP AF
  POP HL
  JR ROUTINE_DF72_1
ROUTINE_DF72_5:
  POP AF
  PUSH HL
  LD HL,TABLE_CREATURE_DATA_ADDRESSES
  DEC A
  ADD A,A
  LD B,$00
  LD C,A
  ADD HL,BC
  LD C,(HL)
  INC HL
  LD B,(HL)
  LD HL,$0016
  ADD HL,BC
  LD A,(HL)
  EX DE,HL
  POP HL
  LD (HL),A
  LD BC,$00A0
  ADD HL,BC
  LD A,(HL)
  INC A
  CP $04
  JR NZ,ROUTINE_DF72_6
  XOR A
ROUTINE_DF72_6:
  CP $05
  JR NZ,ROUTINE_DF72_7
  DEC A
ROUTINE_DF72_7:
  LD (HL),A
  EX DE,HL
  INC HL
  LD B,$00
  LD C,A
  ADD HL,BC
  ADD HL,BC
  ADD HL,BC
  LD C,(HL)
  INC HL
  LD B,(HL)
  LD (VAR_DF4A),BC
  INC HL
  LD A,(HL)
  LD ($5C8F),A
  POP HL
  LD (VAR_E005_MAYBE_ARENA_COORDS),HL
  PUSH HL
  CALL MAYBE_FIND_ARENA_COORDS
  LD (VAR_DF4C),HL
  CALL MAYBE_ANIMATION
  POP HL
  JR ROUTINE_DF72_1

; Variable - might be something to do with finding coordinates of something in
; the arena
VAR_E005_MAYBE_ARENA_COORDS:
  DEFB $AD,$E0

; Routine at E007
;
; Used by the routines at DISPLAY_EXPLOSION_ANIMATION, CAST_LIGHTNING,
; ROUTINE_9CA9, DISPLAY_CAST_ANIMATION, DISPLAY_ATTACK_ANIMATION, WIZARD_DEATH,
; RANGED_COMBAT, ROUTINE_BABE, MAYBE_FIND_WIZ_COORDS,
; IDENTIFY_WIZARDS_CREATURES and ROUTINE_DF72.
MAYBE_FIND_ARENA_COORDS:
  LD HL,(VAR_E005_MAYBE_ARENA_COORDS)
  XOR A
  LD DE,ARENA_STATE_1
  SBC HL,DE               ; A = HL - DE, to get how many spaces to count from
  LD A,L                  ; ARENA_STATE_1 before reaching the address that was
                          ; in HL.
  AND $F0
  RRCA
  RRCA
  RRCA
  LD H,A
  LD A,L
  RLA
  AND $1E
  LD L,A
  INC H
  INC L
  RET

; Arena Table 1 - game state information
;
; The board is 15x10. Each row here represents a row on the board, and each
; byte here represents the ID of something on the board (with the exception of
; the 16th byte, which is presumably there to make the maths easier - note how
; by using 16 bytes in each row, the hex addresses are simplified). As wizards,
; creatures etc are moved around the arena, their IDs are moved around these
; addresses.
ARENA_STATE_1:
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$10,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$15,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$12,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00

; Data block at E0BF
  DEFB $FF

; Arena Table 2 - ???
ARENA_STATE_2:
  DEFB $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
  DEFB $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
  DEFB $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
  DEFB $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
  DEFB $01,$01,$01,$01,$01,$01,$01,$05,$01,$01,$01,$01,$01,$01,$01,$01
  DEFB $01,$01,$01,$01,$01,$01,$04,$01,$01,$01,$01,$01,$01,$01,$01,$01
  DEFB $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
  DEFB $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
  DEFB $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$0F,$01
  DEFB $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01

; Arena Table 3 - TODO maybe records current animation frame, from 0-3?
;
; A value of 4 indicates that the creature is dead.
ARENA_STATE_3:
  DEFB $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00
  DEFB $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00
  DEFB $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00
  DEFB $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00
  DEFB $01,$01,$01,$01,$01,$01,$04,$02,$01,$01,$01,$01,$01,$01,$01,$00
  DEFB $01,$01,$01,$01,$01,$01,$03,$01,$01,$01,$01,$01,$01,$01,$01,$00
  DEFB $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00
  DEFB $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00
  DEFB $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00
  DEFB $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00

; Arena Table 4 - records data about the objects in the arena.
;
; +-------+-------------------------------------------------------------------------------------------------------------------+
; | Bit   | Use                                                                                                               |
; +-------+-------------------------------------------------------------------------------------------------------------------+
; | 7     | Set if the object has moved (or if fire/blob, spread) this turn.                                                  |
; | 6     | Tracks whether the creature at that space is undead through being brought back to life with the raise dead spell. |
; | 5     | Set if the creature has been disbelieved before and proved to be real.                                            |
; | 4     | Set if the creature is an illusion.                                                                               |
; | 3     | Whether the creature is asleep. Never used in game. See KEY_INPUT.                                                |
; | 2,1,0 | ID of the wizard that controls the object at this space.                                                          |
; +-------+-------------------------------------------------------------------------------------------------------------------+
ARENA_STATE_4:
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$80,$81,$01,$01,$01,$01,$01,$01,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$81,$00,$00,$00,$00,$00,$00,$01,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$00,$01,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$01,$00,$81,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$00

; Arena Table 5 - Contains the wizard's ID if he's hiding in a magic tree or
; castle, or on a mount.
ARENA_STATE_5:
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$2A,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00

; Arena Table 6 - records data about the objects in the arena.
;
; +-----+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; | Bit | Use                                                                                                                                                                |
; +-----+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; | 7   | ???                                                                                                                                                                |
; | 6   | Tracks whether the creature at that space is undead through being brought back to life with the raise dead spell. TODO Mistake? Isn't this in table 4? Or in both? |
; | 5   | ???                                                                                                                                                                |
; | 4   | ???                                                                                                                                                                |
; | 3   | ???                                                                                                                                                                |
; | 2   | ???                                                                                                                                                                |
; | 1   | ???                                                                                                                                                                |
; | 0   | ???                                                                                                                                                                |
; +-----+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+
ARENA_STATE_6:
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00

; Table - locations of creature, object and wizard data.
;
; Contains the address at which to find the data about a creature, object or
; wizard. If you offset from TABLE_CREATURE_DATA_ADDRESSES you get the creature
; IDs matching the spells at TABLE_SPELLS.
TABLE_CREATURE_DATA_ADDRESSES:
  DEFB $40,$E4            ; STRING_BLANK $01 01 Blank string
  DEFB $63,$E4            ; NAME_KING_COBRA $02 02
  DEFB $D5,$E4            ; NAME_DIRE_WOLF $03 03
  DEFB $21,$E5            ; NAME_GOBLIN $04 04
  DEFB $47,$E5            ; NAME_CROCODILE $05 05
  DEFB $B9,$E5            ; NAME_FAUN $06 06
  DEFB $DF,$E5            ; NAME_LION $07 07
  DEFB $2B,$E6            ; NAME_ELF $08 08
  DEFB $77,$E6            ; NAME_ORC $09 09
  DEFB $9F,$E7            ; NAME_BEAR $0A 10
  DEFB $C5,$E7            ; NAME_GORILLA $0B 11
  DEFB $0E,$E8            ; NAME_OGRE $0C 12
  DEFB $C9,$E8            ; NAME_HYDRA $0D 13
  DEFB $EF,$E8            ; NAME_GIANT_RAT $0E 14
  DEFB $3B,$E9            ; NAME_GIANT $0F 15
  DEFB $51,$E6            ; NAME_HORSE $10 16
  DEFB $33,$E7            ; NAME_UNICORN $11 17
  DEFB $15,$E9            ; NAME_CENTAUR $12 18
  DEFB $7D,$E8            ; NAME_PEGASUS $13 19
  DEFB $05,$E6            ; NAME_GRYPHON $14 20
  DEFB $E6,$E6            ; NAME_MANTICORE $15 21
  DEFB $89,$E4            ; NAME_BAT $16 22
  DEFB $6D,$E5            ; NAME_GREEN_DRAGON $17 23
  DEFB $9D,$E6            ; NAME_RED_DRAGON $18 24
  DEFB $61,$E9            ; NAME_GOLDEN_DRAGON $19 25
  DEFB $57,$E8            ; NAME_HARPY $1A 26
  DEFB $A3,$E8            ; NAME_EAGLE $1B 27
  DEFB $93,$E5            ; NAME_VAMPIRE $1C 28
  DEFB $59,$E7            ; NAME_GHOST $1D 29
  DEFB $FB,$E4            ; NAME_SPECTRE $1E 30
  DEFB $7C,$E7            ; NAME_WRAITH $1F 31
  DEFB $EB,$E7            ; NAME_SKELETON $20 32
  DEFB $34,$E8            ; NAME_ZOMBIE $21 33
  DEFB $AF,$E4            ; NAME_BLOB $22 34
  DEFB $C3,$E6            ; NAME_FIRE $23 35
  DEFB $F3,$E9            ; NAME_MAGIC_WOOD $24 36
  DEFB $D0,$E9            ; NAME_SHADOW_WOOD $25 37
  DEFB $AD,$E9            ; NAME_MAGIC_CASTLE $26 38
  DEFB $87,$E9            ; NAME_DARK_CITADEL $27 39
  DEFB $16,$EA            ; NAME_WALL $28 40
  DEFB $39,$EA            ; NAME_WIZ_1 $29 41 Wizard 1 name
  DEFB $5C,$EA            ; NAME_WIZ_2 $2A 42 Wizard 2 name
  DEFB $7F,$EA            ; NAME_WIZ_3 $2B 43 Wizard 3 name
  DEFB $A2,$EA            ; NAME_WIZ_4 $2C 44 Wizard 4 name
  DEFB $C5,$EA            ; NAME_WIZ_5 $2D 45 Wizard 5 name
  DEFB $E8,$EA            ; NAME_WIZ_6 $2E 46 Wizard 6 name
  DEFB $0B,$EB            ; NAME_WIZ_7 $2F 47 Wizard 7 name
  DEFB $2E,$EB            ; NAME_WIZ_8 $30 48 Wizard 8 name

; Blank string
STRING_BLANK:
  DEFM "             "

; Data block at E44D
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$01,$51,$EB,$45,$51,$EB,$45
  DEFB $51,$EB,$45,$51,$EB,$45

; Creature name: KING COBRA
NAME_KING_COBRA:
  DEFM "KING COBRA   "

; Creature data: KING COBRA
  DEFB $04,$00,$00,$01,$01,$06,$01,$08,$01,$1E

; Creature graphics data: KING COBRA
  DEFB $71,$EB,$44        ; GRAPHICS_KING_COBRA
  DEFB $91,$EB,$44
  DEFB $B3,$EB,$44
  DEFB $91,$EB,$44
  DEFB $53,$EC,$44        ; GRAPHICS_KING_COBRA_DEAD

; Creature name: BAT
NAME_BAT:
  DEFM "BAT          "

; Creature data: BAT
  DEFB $01,$00,$00,$01,$05,$09,$04,$07,$FF,$08

; Creature graphics data: BAT
  DEFB $F3,$EB,$47        ; GRAPHICS_BAT
  DEFB $13,$EC,$47
  DEFB $33,$EC,$47
  DEFB $13,$EC,$47
  DEFB $D3,$EB,$47

; Creature name: BLOB
NAME_BLOB:
  DEFM "BLOB         "

; Creature data: BLOB
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$28

; Creature graphics data: BLOB
  DEFB $73,$EC,$44        ; GRAPHICS_GOOEY_BLOB
  DEFB $93,$EC,$44
  DEFB $B3,$EC,$44
  DEFB $93,$EC,$44
  DEFB $D3,$EC,$04

; Creature name: DIRE WOLF
NAME_DIRE_WOLF:
  DEFM "DIRE WOLF    "

; Creature data: DIRE WOLF
  DEFB $03,$00,$00,$02,$03,$07,$02,$08,$FF,$0C

; Creature graphics data: DIRE WOLF
  DEFB $F3,$EC,$46        ; GRAPHICS_DIRE_WOLF
  DEFB $13,$ED,$46
  DEFB $33,$ED,$46
  DEFB $13,$ED,$46
  DEFB $53,$ED,$46

; Creature name: SPECTRE
NAME_SPECTRE:
  DEFM "SPECTRE      "

; Creature data: SPECTRE
  DEFB $04,$00,$00,$02,$01,$06,$04,$05,$FF,$0F

; Creature graphics data: SPECTRE
  DEFB $73,$ED,$47        ; GRAPHICS_SPECTRE
  DEFB $73,$ED,$45
  DEFB $73,$ED,$43
  DEFB $73,$ED,$41
  DEFB $93,$ED,$05

; Creature name: GOBLIN
NAME_GOBLIN:
  DEFM "GOBLIN       "

; Creature data: GOBLIN
  DEFB $02,$00,$00,$04,$01,$04,$04,$08,$FF,$0C

; Creature graphics data: GOBLIN
  DEFB $B3,$ED,$43        ; GRAPHICS_GOBLIN
  DEFB $D3,$ED,$43
  DEFB $F3,$ED,$43
  DEFB $D3,$ED,$43
  DEFB $13,$EE,$43

; Creature name: CROCODILE
NAME_CROCODILE:
  DEFM "CROCODILE    "

; Creature data: CROCODILE
  DEFB $05,$00,$00,$06,$01,$02,$02,$07,$00,$22

; Creature graphics data: CROCODILE
  DEFB $33,$EE,$44        ; GRAPHICS_CROCODILE
  DEFB $53,$EE,$44
  DEFB $73,$EE,$44
  DEFB $53,$EE,$44
  DEFB $93,$EE,$44

; Creature name: GREEN DRAGON
NAME_GREEN_DRAGON:
  DEFM "GREEN DRAGON "

; Creature data: GREEN DRAGON
  DEFB $05,$04,$06,$08,$03,$04,$04,$00,$FF,$20

; Creature graphics data: GREEN DRAGON
  DEFB $B3,$EE,$44        ; GRAPHICS_GREEN_DRAGON
  DEFB $D3,$EE,$44
  DEFB $F3,$EE,$44
  DEFB $D3,$EE,$44
  DEFB $13,$EF,$44

; Creature name: VAMPIRE
NAME_VAMPIRE:
  DEFM "VAMPIRE      "

; Creature data: VAMPIRE
  DEFB $06,$00,$00,$08,$04,$06,$05,$01,$FE,$28

; Creature graphics data: VAMPIRE
  DEFB $33,$EF,$42        ; GRAPHICS_VAMPIRE
  DEFB $53,$EF,$42
  DEFB $73,$EF,$42
  DEFB $53,$EF,$42
  DEFB $93,$EF,$42

; Creature name: FAUN
NAME_FAUN:
  DEFM "FAUN         "

; Creature data: FAUN
  DEFB $03,$00,$00,$02,$01,$07,$08,$07,$FF,$14

; Creature graphics data: FAUN
  DEFB $B3,$EF,$47        ; GRAPHICS_FAUN
  DEFB $D3,$EF,$47
  DEFB $F3,$EF,$47
  DEFB $D3,$EF,$47
  DEFB $13,$F0,$47

; Creature name: LION
NAME_LION:
  DEFM "LION         "

; Creature data: LION
  DEFB $06,$00,$00,$04,$04,$08,$03,$05,$01,$26

; Creature graphics data: LION
  DEFB $33,$F0,$46        ; GRAPHICS_LION
  DEFB $53,$F0,$46
  DEFB $73,$F0,$46
  DEFB $53,$F0,$46
  DEFB $93,$F0,$46

; Creature name: GRYPHON
NAME_GRYPHON:
  DEFM "GRYPHON      "

; Creature data: GRYPHON
  DEFB $03,$00,$00,$05,$05,$05,$06,$05,$01,$0A

; Creature graphics data: GRYPHON
  DEFB $B3,$F0,$07        ; GRAPHICS_GRYPHON
  DEFB $D3,$F0,$07
  DEFB $F3,$F0,$07
  DEFB $D3,$F0,$07
  DEFB $13,$F1,$07

; Creature name: ELF
NAME_ELF:
  DEFM "ELF          "

; Creature data: ELF
  DEFB $01,$02,$06,$02,$01,$05,$07,$06,$02,$1A

; Creature graphics data: ELF
  DEFB $33,$F1,$44        ; GRAPHICS_ELF
  DEFB $53,$F1,$44
  DEFB $73,$F1,$44
  DEFB $93,$F1,$44
  DEFB $B3,$F1,$44

; Creature name: HORSE
NAME_HORSE:
  DEFM "HORSE        "

; Creature data: HORSE
  DEFB $01,$00,$00,$03,$04,$08,$01,$08,$01,$15

; Creature graphics data: HORSE
  DEFB $D3,$F1,$06        ; GRAPHICS_HORSE
  DEFB $F3,$F1,$06
  DEFB $13,$F2,$06
  DEFB $F3,$F1,$06
  DEFB $33,$F2,$06

; Creature name: ORC
NAME_ORC:
  DEFM "ORC          "

; Creature data: ORC
  DEFB $02,$00,$00,$01,$01,$04,$04,$09,$FF,$15

; Creature graphics data: ORC
  DEFB $53,$F2,$45        ; GRAPHICS_ORC
  DEFB $73,$F2,$45
  DEFB $93,$F2,$45
  DEFB $73,$F2,$45
  DEFB $B3,$F2,$45

; Creature name: RED DRAGON
NAME_RED_DRAGON:
  DEFM "RED DRAGON   "

; Creature data: RED DRAGON
  DEFB $07,$03,$05,$09,$03,$04,$05,$00,$FE,$22

; Creature graphics data: RED DRAGON
  DEFB $D3,$F2,$42        ; GRAPHICS_RED_DRAGON
  DEFB $F3,$F2,$42
  DEFB $13,$F3,$42
  DEFB $F3,$F2,$42
  DEFB $13,$EF,$42

; Object name: FIRE
NAME_FIRE:
  DEFM "FIRE         "

; Object data: FIRE
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$0C

; Object graphics data: FIRE
  DEFB $33,$F3,$46        ; GRAPHICS_FIRE
  DEFB $93,$F3,$46
  DEFB $73,$F3,$46
  DEFB $53,$F3,$46

; Creature name: MANTICORE
NAME_MANTICORE:
  DEFM "MANTICORE    "

; Creature data: MANTICORE
  DEFB $03,$01,$03,$06,$05,$06,$08,$03,$FF,$0D

; Creature graphics data: MANTICORE
  DEFB $B3,$F3,$46        ; GRAPHICS_MANTICORE
  DEFB $D3,$F3,$46
  DEFB $F3,$F3,$46
  DEFB $D3,$F3,$46
  DEFB $13,$F4,$46
  DEFB $00

; Creature name: TROLL
NAME_TROLL:
  DEFM "TROLL        "

; Creature data: TROLL
  DEFB $04,$00,$00,$08,$01,$01,$04,$06,$FF,$16

; Creature graphics data: TROLL
  DEFB $33,$F4,$04        ; GRAPHICS_TROLL
  DEFB $53,$F4,$04
  DEFB $73,$F4,$04
  DEFB $53,$F4,$04
  DEFB $93,$F4,$04

; Creature name: UNICORN
NAME_UNICORN:
  DEFM "UNICORN      "

; Creature data: UNICORN
  DEFB $05,$00,$00,$04,$04,$09,$07,$05,$02,$10

; Creature graphics data: UNICORN
  DEFB $B3,$F4,$45        ; GRAPHICS_UNICORN
  DEFB $D3,$F4,$45
  DEFB $F3,$F4,$45
  DEFB $D3,$F4,$45
  DEFB $13,$F5,$45

; Creature name: GHOST
NAME_GHOST:
  DEFM "GHOST        "

; Creature data: GHOST
  DEFB $01,$00,$00,$03,$02,$09,$06,$04,$FF,$0F

; Creature graphics data: GHOST
  DEFB $33,$F5,$05        ; GRAPHICS_GHOST
  DEFB $53,$F5,$45
  DEFB $73,$F5,$05
  DEFB $93,$F5,$45

; Creature name: WRAITH
NAME_WRAITH:
  DEFM "WRAITH       "

; Creature data: WRAITH
  DEFB $05,$00,$00,$05,$02,$04,$05,$04,$FF,$0A

; Creature graphics data: WRAITH
  DEFB $B3,$F5,$45        ; GRAPHICS_WRAITH
  DEFB $D3,$F5,$45
  DEFB $13,$F6,$45
  DEFB $F3,$F5,$45

; Creature name: BEAR
NAME_BEAR:
  DEFM "BEAR         "

; Creature data: BEAR
  DEFB $06,$00,$00,$07,$02,$06,$02,$05,$01,$17

; Creature graphics data: BEAR
  DEFB $33,$F6,$42        ; GRAPHICS_BEAR
  DEFB $53,$F6,$42
  DEFB $74,$F6,$42
  DEFB $74,$F6,$42
  DEFB $94,$F6,$42

; Creature name: GORILLA
NAME_GORILLA:
  DEFM "GORILLA      "

; Creature data: GORILLA
  DEFB $06,$00,$00,$05,$01,$04,$02,$06,$00,$12

; Creature graphics data: GORILLA
  DEFB $B4,$F6,$06        ; GRAPHICS_GORILLA
  DEFB $D4,$F6,$06
  DEFB $F4,$F6,$06
  DEFB $D4,$F6,$06
  DEFB $14,$F7,$06

; Creature name: SKELETON
NAME_SKELETON:
  DEFM "SKELETON     "

; Creature data: SKELETON
  DEFB $03,$00,$00,$02,$01,$03,$04,$06,$FF,$11

; Creature graphics data: SKELETON
  DEFB $34,$F7,$47        ; GRAPHICS_SKELETON
  DEFB $54,$F7,$47
  DEFB $74,$F7,$47
  DEFB $54,$F7,$47

; Creature name: OGRE
NAME_OGRE:
  DEFM "OGRE         "

; Creature data: OGRE
  DEFB $04,$00,$00,$07,$01,$03,$06,$06,$FF,$17

; Creature graphics data: OGRE
  DEFB $94,$F7,$42        ; GRAPHICS_OGRE
  DEFB $B4,$F7,$42
  DEFB $D4,$F7,$42
  DEFB $B4,$F7,$42
  DEFB $F4,$F7,$42

; Creature name: ZOMBIE
NAME_ZOMBIE:
  DEFM "ZOMBIE       "

; Creature data: ZOMBIE
  DEFB $01,$00,$00,$01,$01,$02,$03,$08,$FF,$19

; Creature graphics data: ZOMBIE
  DEFB $14,$F8,$45        ; GRAPHICS_ZOMBIE
  DEFB $34,$F8,$45
  DEFB $54,$F8,$45
  DEFB $74,$F8,$45

; Creature name: HARPY
NAME_HARPY:
  DEFM "HARPY        "

; Creature data: HARPY
  DEFB $04,$00,$00,$02,$05,$08,$05,$05,$FF,$0D

; Creature graphics data: HARPY
  DEFB $94,$F8,$45        ; GRAPHICS_HARPY
  DEFB $B4,$F8,$45
  DEFB $D4,$F8,$45
  DEFB $B4,$F8,$45
  DEFB $F4,$F8,$45

; Creature name: PEGASUS
NAME_PEGASUS:
  DEFM "PEGASUS      "

; Creature data: PEGASUS
  DEFB $02,$00,$00,$04,$05,$06,$07,$05,$02,$10

; Creature graphics data: PEGASUS
  DEFB $14,$F9,$47        ; GRAPHICS_PEGASUS
  DEFB $34,$F9,$47
  DEFB $54,$F9,$47
  DEFB $34,$F9,$47
  DEFB $74,$F9,$47

; Creature name: EAGLE
NAME_EAGLE:
  DEFM "EAGLE        "

; Creature data: EAGLE
  DEFB $03,$00,$00,$03,$06,$08,$02,$06,$01,$0E

; Creature graphics data: EAGLE
  DEFB $94,$F9,$46        ; GRAPHICS_EAGLE
  DEFB $B4,$F9,$46
  DEFB $D4,$F9,$46
  DEFB $B4,$F9,$46
  DEFB $F4,$F9,$46

; Creature name: HYDRA
NAME_HYDRA:
  DEFM "HYDRA        "

; Creature data: HYDRA
  DEFB $07,$00,$00,$08,$01,$04,$06,$04,$FF,$24

; Creature graphics data: HYDRA
  DEFB $14,$FA,$44        ; GRAPHICS_HYDRA
  DEFB $34,$FA,$44
  DEFB $54,$FA,$44
  DEFB $34,$FA,$44
  DEFB $74,$FA,$44

; Creature name: GIANT RAT
NAME_GIANT_RAT:
  DEFM "GIANT RAT    "

; Creature data: GIANT RAT
  DEFB $01,$00,$00,$01,$03,$08,$02,$09,$00,$0D

; Creature graphics data: GIANT RAT
  DEFB $94,$FA,$07        ; GRAPHICS_GIANT_RAT
  DEFB $B4,$FA,$07
  DEFB $D4,$FA,$07
  DEFB $B4,$FA,$07
  DEFB $F4,$FA,$07

; Creature name: CENTAUR
NAME_CENTAUR:
  DEFM "CENTAUR      "

; Creature data: CENTAUR
  DEFB $01,$02,$04,$03,$04,$05,$05,$06,$01,$17

; Creature graphics data: CENTAUR
  DEFB $14,$FB,$06        ; GRAPHICS_CENTAUR
  DEFB $34,$FB,$06
  DEFB $54,$FB,$06
  DEFB $34,$FB,$06
  DEFB $74,$FB,$06

; Creature name: GIANT
NAME_GIANT:
  DEFM "GIANT        "

; Creature data: GIANT
  DEFB $09,$00,$00,$07,$02,$06,$05,$03,$01,$17

; Creature graphics data: GIANT
  DEFB $94,$FB,$05        ; GRAPHICS_GIANT
  DEFB $B4,$FB,$05
  DEFB $D4,$FB,$05
  DEFB $B4,$FB,$05
  DEFB $F4,$FB,$05

; Creature name: GOLDEN DRAGON
NAME_GOLDEN_DRAGON:
  DEFM "GOLDEN DRAGON"

; Creature data: GOLDEN DRAGON
  DEFB $09,$05,$04,$09,$03,$05,$05,$00,$02,$1B

; Creature graphics data: GOLDEN DRAGON
  DEFB $14,$FC,$46        ; GRAPHICS_GOLDEN_DRAGON
  DEFB $34,$FC,$46
  DEFB $54,$FC,$46
  DEFB $34,$FC,$46
  DEFB $74,$FC,$46

; Object name: DARK CITADEL
NAME_DARK_CITADEL:
  DEFM "DARK CITADEL "

; Object data: DARK CITADEL
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$32

; Object graphics data: DARK CITADEL
  DEFB $94,$FC,$43        ; GRAPHICS_DARK_CITADEL
  DEFB $94,$FC,$43
  DEFB $94,$FC,$03
  DEFB $94,$FC,$03
  DEFB $94,$FC,$03

; Object name: MAGIC CASTLE
NAME_MAGIC_CASTLE:
  DEFM "MAGIC CASTLE "

; Object data: MAGIC CASTLE
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$32

; Object graphics data: MAGIC CASTLE
  DEFB $B4,$FC,$45        ; GRAPHICS_MAGIC_CASTLE
  DEFB $B4,$FC,$05
  DEFB $B4,$FC,$45
  DEFB $B4,$FC,$05

; Object name: SHADOW WOOD
NAME_SHADOW_WOOD:
  DEFM "SHADOW WOOD  "

; Object data: SHADOW WOOD
  DEFB $02,$00,$00,$04,$00,$00,$09,$04,$FE,$1E

; Object graphics data: SHADOW WOOD
  DEFB $D4,$FC,$05        ; GRAPHICS_SHADOW_WOOD
  DEFB $D4,$FC,$05
  DEFB $D4,$FC,$45
  DEFB $D4,$FC,$45

; Object name: MAGIC WOOD
NAME_MAGIC_WOOD:
  DEFM "MAGIC WOOD   "

; Object data: MAGIC WOOD
  DEFB $00,$00,$00,$05,$00,$00,$09,$06,$02,$FA

; Object graphics data: MAGIC WOOD
  DEFB $F4,$FC,$04        ; GRAPHICS_MAGIC_WOOD
  DEFB $F4,$FC,$44
  DEFB $F4,$FC,$06
  DEFB $F4,$FC,$46

; Object name: WALL
NAME_WALL:
  DEFM "WALL         "

; Object data: WALL
  DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$1E

; Object graphics data: WALL
  DEFB $14,$FD,$72        ; GRAPHICS_WALL
  DEFB $14,$FD,$72
  DEFB $14,$FD,$72
  DEFB $14,$FD,$72

; Wizard 1 name: JULIANLL by default, will be overwritten after name entry
; screen
NAME_WIZ_1:
  DEFM "JULIANLL     "

; Wizard 1 data: JULIANLL
  DEFB $01,$00,$00,$01,$01,$03,$07,$0B,$00,$1E

; Wizard 1 graphics data: JULIANLL.
;
; Will be overwritten when choosing the wizard graphics or when a wizard status
; spell is cast.
GRAPH_WIZ_1:
  DEFB $34,$FD,$42        ; GRAPHICS_WIZ_1
  DEFB $34,$FD,$42
  DEFB $34,$FD,$42
  DEFB $34,$FD,$42

; Wizard 2 name: GANDALFRT by default, will be overwritten after name entry
; screen
NAME_WIZ_2:
  DEFM "GANDALFRT    "

; Wizard 2 data: GANDALFRT
  DEFB $01,$00,$00,$01,$01,$03,$06,$0F,$00,$1E

; Wizard 2 graphics data: GANDALFRT.
;
; Will be overwritten when choosing the wizard graphics or when a wizard status
; spell is cast.
GRAPH_WIZ_2:
  DEFB $54,$FD,$43        ; GRAPHICS_WIZ_2
  DEFB $54,$FD,$43
  DEFB $54,$FD,$43
  DEFB $54,$FD,$43

; Wizard 3 name: GREATFOGEY by default, will be overwritten after name entry
; screen
NAME_WIZ_3:
  DEFM "GREATFOGEY   "

; Wizard 3 data: GREATFOGEY
  DEFB $03,$00,$00,$03,$01,$05,$06,$00,$00,$1E

; Wizard 3 graphics data: GREATFOGEY.
;
; Will be overwritten when choosing the wizard graphics or when a wizard status
; spell is cast.
GRAPH_WIZ_3:
  DEFB $74,$FD,$44        ; GRAPHICS_WIZ_3
  DEFB $74,$FD,$44
  DEFB $74,$FD,$44
  DEFB $74,$FD,$44

; Wizard 4 name: DYERARTI by default, will be overwritten after name entry
; screen
NAME_WIZ_4:
  DEFM "DYERARTI     "

; Wizard 4 data: DYERARTI
  DEFB $01,$00,$00,$02,$01,$06,$07,$00,$00,$1E

; Wizard 4 graphics data: DYERARTI.
;
; Will be overwritten when choosing the wizard graphics or when a wizard status
; spell is cast.
GRAPH_WIZ_4:
  DEFB $94,$FD,$45        ; GRAPHICS_WIZ_4
  DEFB $94,$FD,$45
  DEFB $94,$FD,$45
  DEFB $94,$FD,$45

; Wizard 5 name: GOWIN by default, will be overwritten after name entry screen
NAME_WIZ_5:
  DEFM "GOWIN        "

; Wizard 5 data: GOWIN
  DEFB $02,$00,$00,$02,$01,$05,$00,$00,$00,$1E

; Wizard 5 graphics data: GOWIN.
;
; Will be overwritten when choosing the wizard graphics or when a wizard status
; spell is cast.
GRAPH_WIZ_5:
  DEFB $B4,$FD,$46        ; GRAPHICS_WIZ_5
  DEFB $B4,$FD,$46
  DEFB $B4,$FD,$46
  DEFB $B4,$FD,$46

; Wizard 6 name: MERLIN by default, will be overwritten after name entry screen
NAME_WIZ_6:
  DEFM "MERLIN       "

; Wizard 6 data: MERLIN
  DEFB $01,$00,$00,$04,$01,$04,$00,$00,$00,$1E

; Wizard 6 graphics data: MERLIN.
;
; Will be overwritten when choosing the wizard graphics or when a wizard status
; spell is cast.
GRAPH_WIZ_6:
  DEFB $D4,$FD,$47        ; GRAPHICS_WIZ_6
  DEFB $D4,$FD,$47
  DEFB $D4,$FD,$47
  DEFB $D4,$FD,$47

; Wizard 7 name: ILIAN RANE by default, will be overwritten after name entry
; screen
NAME_WIZ_7:
  DEFM "ILIAN RANE   "

; Wizard 7 data: ILIAN RANE
  DEFB $01,$00,$00,$02,$01,$04,$00,$00,$00,$1E

; Wizard 7 graphics data: ILIAN RANE.
;
; Will be overwritten when choosing the wizard graphics or when a wizard status
; spell is cast.
GRAPH_WIZ_7:
  DEFB $F4,$FD,$06        ; GRAPHICS_WIZ_7
  DEFB $F4,$FD,$06
  DEFB $F4,$FD,$06
  DEFB $F4,$FD,$06

; Wizard 8 name: ASIMONO ZARK by default, will be overwritten after name entry
; screen
NAME_WIZ_8:
  DEFM "ASIMONO ZARK "

; Wizard 8 data: ASIMONO ZARK
  DEFB $03,$00,$00,$02,$01,$06,$00,$00,$00,$1E

; Wizard 8 graphics data: ASIMONO ZARK.
;
; Will be overwritten when choosing the wizard graphics or when a wizard status
; spell is cast.
GRAPH_WIZ_8:
  DEFB $14,$FE,$05        ; GRAPHICS_WIZ_8
  DEFB $14,$FE,$05
  DEFB $14,$FE,$05
  DEFB $14,$FE,$05

; Data block at EB51
VAR_EB51_MAYBE_TABLE:
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Graphics - King Cobra
;
; There seem to be two bytes in the middle that shouldn't be there.
GRAPHICS_KING_COBRA:
  DEFB $00,$00,$00,$00,$01,$00,$00,$00
  DEFB $00,$00,$00,$00,$80,$80,$80,$80
  DEFB $00,$03,$04,$04,$03,$00,$00,$00
  DEFB $80,$00,$60,$10,$E0,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$03,$01,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$80
  DEFB $00,$03,$04,$04,$03,$00,$00,$00
  DEFB $80,$00,$60,$10,$E0,$00,$00,$00
  DEFB $73,$F2,$00,$00,$00,$00,$00,$00
  DEFB $07,$08,$00,$00,$00,$00,$00,$00
  DEFB $00,$80,$00,$03,$04,$04,$03,$00
  DEFB $00,$00,$80,$00,$60,$10,$E0,$00
  DEFB $00,$00

; Graphics - Bat (Dead)
GRAPHICS_BAT_DEAD:
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$01,$13,$0C,$00
  DEFB $00,$00,$00,$00,$00,$90,$60,$00

; Graphics - Bat
GRAPHICS_BAT:
  DEFB $00,$00,$00,$00,$00,$00,$0C,$13
  DEFB $00,$00,$00,$00,$00,$00,$60,$90
  DEFB $01,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$0F
  DEFB $00,$00,$00,$00,$00,$00,$00,$E0
  DEFB $11,$00,$00,$00,$00,$00,$00,$00
  DEFB $10,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$03
  DEFB $00,$00,$00,$00,$00,$00,$00,$80
  DEFB $05,$18,$00,$00,$00,$00,$00,$00
  DEFB $40,$30,$00,$00,$00,$00,$00,$00

; Graphics - Dead King Cobra
GRAPHICS_KING_COBRA_DEAD:
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$1E,$20,$18,$07,$00,$00,$00
  DEFB $00,$00,$38,$C4,$00,$00,$00,$00

; Graphics - Gooey Blob
GRAPHICS_GOOEY_BLOB:
  DEFB $01,$03,$07,$07,$03,$33,$7F,$FF
  DEFB $80,$C0,$E0,$E0,$C0,$CC,$FF,$FF
  DEFB $FF,$7F,$39,$03,$07,$0F,$0F,$06
  DEFB $CC,$E0,$FC,$BE,$9E,$8C,$00,$00
  DEFB $00,$01,$03,$03,$03,$01,$19,$7F
  DEFB $00,$80,$C0,$C0,$C0,$98,$FE,$FE
  DEFB $7F,$19,$01,$03,$07,$07,$03,$00
  DEFB $E0,$F0,$BE,$9E,$8C,$80,$00,$00
  DEFB $00,$00,$01,$03,$03,$01,$19,$3F
  DEFB $00,$00,$80,$C0,$C0,$98,$FC,$FC
  DEFB $3F,$19,$03,$07,$07,$03,$00,$00
  DEFB $E0,$F0,$BC,$9C,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$0C
  DEFB $00,$00,$00,$00,$00,$00,$00,$60
  DEFB $1A,$37,$3E,$6B,$7F,$00,$00,$00
  DEFB $E0,$B0,$F0,$A8,$FE,$00,$00,$00

; Graphics - Dire Wolf
GRAPHICS_DIRE_WOLF:
  DEFB $00,$00,$00,$00,$08,$78,$1C,$27
  DEFB $00,$00,$00,$00,$00,$08,$08,$F0
  DEFB $0F,$0A,$09,$05,$00,$00,$00,$00
  DEFB $F0,$28,$48,$50,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$08,$78,$1C,$27
  DEFB $00,$00,$00,$00,$00,$04,$08,$F0
  DEFB $0F,$0C,$14,$14,$00,$00,$00,$00
  DEFB $F0,$28,$28,$24,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$08,$78,$3C,$27
  DEFB $00,$00,$00,$00,$00,$00,$0C,$F0
  DEFB $0F,$0C,$28,$08,$00,$00,$00,$00
  DEFB $F0,$1C,$12,$08,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$04
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $05,$22,$1B,$7F,$00,$00,$00,$00
  DEFB $8A,$0C,$F0,$FE,$00,$00,$00,$00

; Graphics - Spectre
GRAPHICS_SPECTRE:
  DEFB $00,$00,$00,$40,$20,$11,$0A,$07
  DEFB $00,$00,$00,$60,$60,$F0,$F0,$E0
  DEFB $00,$00,$01,$01,$01,$03,$00,$00
  DEFB $E0,$F0,$B0,$10,$10,$18,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$01,$37,$3F,$00,$00
  DEFB $00,$00,$00,$00,$C4,$FC,$00,$00

; Graphics - Goblin
GRAPHICS_GOBLIN:
  DEFB $00,$00,$00,$61,$71,$37,$1F,$1B
  DEFB $00,$00,$00,$80,$80,$E0,$F0,$D8
  DEFB $03,$07,$06,$06,$06,$0E,$00,$00
  DEFB $C8,$E0,$60,$60,$60,$E0,$00,$00
  DEFB $00,$30,$30,$31,$31,$1F,$1F,$03
  DEFB $00,$00,$00,$80,$80,$E0,$F0,$D8
  DEFB $03,$07,$06,$06,$06,$0E,$00,$00
  DEFB $C8,$E0,$60,$60,$60,$E0,$00,$00
  DEFB $00,$06,$0C,$0D,$19,$1F,$0F,$03
  DEFB $00,$00,$00,$80,$80,$E0,$F0,$D8
  DEFB $03,$07,$06,$06,$06,$0E,$00,$00
  DEFB $C8,$E0,$60,$60,$60,$E0,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$11,$3B,$3F,$00,$00
  DEFB $00,$00,$00,$E2,$FE,$FE,$00,$00

; Graphics - Crocodile
GRAPHICS_CROCODILE:
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$0C
  DEFB $00,$01,$0F,$1F,$35,$01,$00,$00
  DEFB $02,$FC,$F8,$24,$04,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$0C
  DEFB $00,$1D,$7F,$1F,$35,$01,$00,$00
  DEFB $02,$FC,$F8,$24,$04,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$0C
  DEFB $70,$1D,$0F,$1F,$35,$01,$00,$00
  DEFB $02,$FC,$F8,$24,$04,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$20,$19,$0F,$7F,$00,$00,$00
  DEFB $10,$0C,$26,$FE,$FC,$00,$00,$00

; Graphics - Green Dragon
GRAPHICS_GREEN_DRAGON:
  DEFB $00,$F1,$18,$3C,$4C,$19,$31,$73
  DEFB $00,$C0,$E0,$F0,$F0,$F8,$E4,$00
  DEFB $7A,$7F,$3F,$1F,$14,$14,$24,$08
  DEFB $70,$F8,$FE,$F9,$2D,$25,$44,$08
  DEFB $60,$18,$0C,$3E,$06,$0C,$38,$71
  DEFB $00,$00,$40,$70,$78,$FC,$FE,$C0
  DEFB $7B,$7F,$3F,$1F,$14,$14,$24,$08
  DEFB $70,$F8,$FE,$F9,$2D,$25,$44,$08
  DEFB $18,$06,$03,$1F,$03,$0E,$38,$70
  DEFB $00,$00,$00,$00,$10,$3C,$7E,$F8
  DEFB $7B,$7F,$3F,$1F,$14,$14,$24,$08
  DEFB $F0,$F8,$FE,$F9,$2D,$25,$44,$08
  DEFB $00,$00,$00,$00,$00,$00,$00,$3C
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $73,$E8,$C5,$E7,$7F,$3F,$00,$00
  DEFB $08,$28,$9A,$F9,$FD,$FE,$00,$00

; Graphics - Vampire
GRAPHICS_VAMPIRE:
  DEFB $00,$00,$00,$00,$01,$01,$03,$03
  DEFB $00,$00,$00,$00,$80,$80,$C0,$C0
  DEFB $07,$07,$07,$0F,$0A,$02,$00,$00
  DEFB $E0,$E0,$F0,$F0,$48,$40,$00,$00
  DEFB $00,$00,$00,$00,$01,$01,$03,$03
  DEFB $00,$00,$00,$00,$80,$80,$C0,$E0
  DEFB $03,$07,$07,$06,$02,$02,$00,$00
  DEFB $F0,$F0,$F8,$5C,$40,$40,$00,$00
  DEFB $00,$00,$00,$00,$01,$01,$03,$03
  DEFB $00,$00,$00,$00,$80,$80,$C0,$E0
  DEFB $03,$03,$07,$06,$02,$02,$00,$00
  DEFB $F0,$F8,$CC,$44,$40,$40,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $02,$02,$02,$03,$37,$3F,$00,$00
  DEFB $00,$00,$00,$80,$E4,$FC,$00,$00

; Graphics - Faun
GRAPHICS_FAUN:
  DEFB $00,$00,$01,$01,$01,$23,$15,$09
  DEFB $00,$00,$40,$80,$80,$C0,$A0,$90
  DEFB $03,$03,$03,$01,$01,$02,$00,$00
  DEFB $C0,$C0,$60,$20,$20,$40,$00,$00
  DEFB $00,$00,$01,$11,$11,$0B,$0D,$01
  DEFB $00,$00,$40,$80,$80,$C0,$A0,$90
  DEFB $03,$03,$03,$01,$01,$02,$00,$00
  DEFB $C0,$C0,$60,$20,$20,$40,$00,$00
  DEFB $00,$00,$05,$05,$09,$0F,$01,$01
  DEFB $00,$00,$40,$80,$80,$C0,$A0,$90
  DEFB $03,$03,$03,$01,$01,$02,$00,$00
  DEFB $C0,$C0,$60,$20,$20,$40,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$01,$37,$7F,$00,$00
  DEFB $00,$00,$04,$38,$E2,$FC,$00,$00

; Graphics - Lion
GRAPHICS_LION:
  DEFB $00,$00,$00,$00,$18,$7E,$7F,$3F
  DEFB $00,$00,$00,$00,$00,$00,$F0,$F8
  DEFB $1F,$0F,$12,$22,$04,$00,$00,$00
  DEFB $FC,$2C,$24,$44,$08,$00,$00,$00
  DEFB $00,$00,$00,$18,$7C,$3E,$7F,$3F
  DEFB $00,$00,$00,$00,$00,$00,$F0,$F8
  DEFB $1F,$0F,$12,$22,$04,$00,$00,$00
  DEFB $FC,$2C,$24,$44,$08,$00,$00,$00
  DEFB $00,$00,$00,$2C,$1C,$1E,$3F,$1F
  DEFB $00,$00,$00,$00,$00,$00,$F0,$F8
  DEFB $1F,$0F,$12,$22,$04,$00,$00,$00
  DEFB $FC,$2C,$24,$44,$08,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$04
  DEFB $00,$00,$00,$00,$00,$00,$00,$22
  DEFB $09,$1A,$7F,$7F,$3F,$1C,$00,$00
  DEFB $92,$14,$FC,$FC,$F8,$00,$00,$00

; Graphics - Gryphon
GRAPHICS_GRYPHON:
  DEFB $00,$00,$03,$30,$79,$0D,$07,$03
  DEFB $00,$80,$C0,$C6,$8F,$98,$F0,$E0
  DEFB $03,$03,$02,$02,$02,$00,$00,$00
  DEFB $F0,$D0,$50,$50,$40,$00,$00,$00
  DEFB $00,$01,$07,$03,$01,$01,$0F,$7F
  DEFB $00,$00,$80,$80,$80,$80,$F8,$FF
  DEFB $03,$03,$02,$02,$02,$00,$00,$00
  DEFB $F0,$D0,$50,$50,$40,$00,$00,$00
  DEFB $00,$02,$0F,$03,$05,$01,$07,$0F
  DEFB $00,$00,$00,$00,$80,$80,$F0,$F8
  DEFB $1F,$33,$42,$02,$02,$00,$00,$00
  DEFB $FC,$D6,$51,$50,$40,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$11
  DEFB $00,$00,$00,$00,$00,$00,$00,$08
  DEFB $3A,$62,$73,$3F,$1F,$07,$00,$00
  DEFB $08,$18,$F0,$F8,$FE,$C0,$00,$00

; Graphics - Elf
GRAPHICS_ELF:
  DEFB $00,$00,$02,$06,$06,$3F,$06,$06
  DEFB $00,$00,$00,$C0,$C0,$C0,$C0,$C0
  DEFB $02,$00,$01,$01,$02,$02,$00,$00
  DEFB $C0,$C0,$40,$40,$40,$40,$00,$00
  DEFB $00,$00,$02,$05,$05,$1F,$05,$05
  DEFB $00,$00,$00,$C0,$C0,$E0,$C0,$C0
  DEFB $02,$00,$01,$01,$02,$02,$00,$00
  DEFB $C0,$C0,$40,$40,$40,$40,$00,$00
  DEFB $00,$00,$02,$05,$04,$0F,$04,$05
  DEFB $00,$00,$00,$C0,$C0,$F0,$C0,$C0
  DEFB $02,$00,$01,$01,$02,$02,$00,$00
  DEFB $C0,$C0,$40,$40,$40,$40,$00,$00
  DEFB $00,$00,$02,$04,$04,$F7,$04,$04
  DEFB $00,$00,$00,$C0,$C0,$F0,$E0,$C0
  DEFB $02,$00,$01,$01,$02,$02,$00,$00
  DEFB $C0,$C0,$40,$40,$40,$40,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$03,$04,$1B,$1F,$00,$00
  DEFB $00,$00,$E0,$90,$E4,$FC,$00,$00

; Graphics - Horse
GRAPHICS_HORSE:
  DEFB $00,$00,$00,$00,$30,$78,$DF,$1F
  DEFB $00,$00,$00,$00,$00,$00,$EC,$F2
  DEFB $0F,$14,$14,$12,$0A,$00,$00,$00
  DEFB $F0,$28,$28,$48,$50,$00,$00,$00
  DEFB $00,$00,$00,$00,$30,$78,$DF,$1F
  DEFB $00,$00,$00,$00,$00,$00,$EC,$F2
  DEFB $0F,$14,$14,$24,$08,$00,$00,$00
  DEFB $F0,$28,$28,$24,$20,$00,$00,$00
  DEFB $00,$00,$00,$00,$30,$78,$DF,$1F
  DEFB $00,$00,$00,$00,$00,$00,$EC,$F2
  DEFB $0F,$34,$44,$08,$08,$00,$00,$00
  DEFB $F0,$2C,$22,$10,$10,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$02
  DEFB $00,$00,$00,$00,$00,$00,$00,$09
  DEFB $04,$15,$33,$7F,$7F,$00,$00,$00
  DEFB $CA,$0A,$FC,$FC,$FB,$00,$00,$00

; Graphics - Orc
GRAPHICS_ORC:
  DEFB $00,$00,$00,$01,$01,$40,$23,$15
  DEFB $00,$00,$80,$80,$80,$B0,$78,$78
  DEFB $09,$01,$02,$02,$06,$00,$00,$00
  DEFB $B0,$C0,$40,$40,$C0,$00,$00,$00
  DEFB $00,$00,$00,$11,$11,$10,$13,$0D
  DEFB $00,$00,$80,$80,$80,$B0,$78,$78
  DEFB $01,$01,$02,$02,$06,$00,$00,$00
  DEFB $B0,$C0,$40,$40,$C0,$00,$00,$00
  DEFB $00,$00,$02,$05,$05,$08,$0F,$01
  DEFB $00,$00,$80,$80,$80,$B0,$78,$78
  DEFB $01,$01,$02,$02,$06,$00,$00,$00
  DEFB $B0,$C0,$40,$40,$C0,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$01,$1B,$1F,$00,$00,$00
  DEFB $00,$00,$C0,$E4,$FC,$00,$00,$00

; Graphics - Red Dragon
GRAPHICS_RED_DRAGON:
  DEFB $00,$00,$00,$10,$F8,$18,$31,$31
  DEFB $00,$00,$00,$00,$80,$C0,$E2,$F2
  DEFB $3B,$1E,$0F,$17,$15,$24,$08,$01
  DEFB $8A,$02,$E1,$F1,$F9,$79,$3A,$FC
  DEFB $00,$70,$08,$7C,$0C,$18,$18,$1D
  DEFB $00,$00,$00,$80,$E0,$F0,$FD,$C1
  DEFB $0F,$1F,$27,$29,$08,$00,$00,$01
  DEFB $01,$C2,$E2,$F2,$79,$79,$3A,$FC
  DEFB $30,$0C,$06,$0E,$3C,$0C,$0E,$1F
  DEFB $00,$00,$20,$38,$3E,$78,$C2,$82
  DEFB $23,$45,$08,$08,$00,$00,$00,$01
  DEFB $C2,$E1,$F1,$F9,$7A,$7A,$3A,$FC

; Graphics - Fire
GRAPHICS_FIRE:
  DEFB $20,$20,$21,$03,$05,$04,$04,$02
  DEFB $04,$84,$00,$00,$00,$80,$44,$48
  DEFB $12,$22,$32,$54,$4B,$27,$1F,$00
  DEFB $48,$54,$92,$92,$6A,$9C,$F8,$00
  DEFB $00,$00,$20,$30,$11,$11,$01,$41
  DEFB $00,$00,$04,$04,$08,$80,$58,$54
  DEFB $62,$52,$92,$94,$4B,$24,$1D,$00
  DEFB $54,$52,$8A,$92,$6A,$94,$B8,$00
  DEFB $01,$00,$20,$30,$10,$18,$28,$48
  DEFB $00,$00,$04,$04,$18,$30,$50,$48
  DEFB $8A,$93,$92,$94,$4B,$27,$1F,$00
  DEFB $24,$12,$92,$92,$6A,$9C,$F8,$00
  DEFB $00,$00,$01,$00,$01,$01,$01,$41
  DEFB $00,$80,$00,$00,$00,$80,$58,$54
  DEFB $62,$52,$92,$94,$4B,$24,$1D,$00
  DEFB $54,$52,$8A,$92,$6A,$94,$B8,$00

; Graphics - Manticore
GRAPHICS_MANTICORE:
  DEFB $07,$08,$08,$65,$65,$3B,$3F,$3F
  DEFB $80,$FC,$F0,$C5,$82,$0D,$F0,$F8
  DEFB $1F,$0F,$12,$22,$04,$00,$00,$00
  DEFB $FC,$2C,$24,$44,$08,$00,$00,$00
  DEFB $00,$00,$00,$67,$68,$3B,$3F,$3F
  DEFB $00,$00,$00,$05,$FE,$CD,$F0,$F8
  DEFB $1F,$0F,$12,$22,$04,$00,$00,$00
  DEFB $FC,$2C,$24,$44,$08,$00,$00,$00
  DEFB $00,$00,$00,$60,$60,$3B,$3F,$3F
  DEFB $00,$00,$00,$05,$02,$0D,$F0,$F8
  DEFB $1F,$0F,$12,$22,$04,$00,$00,$00
  DEFB $FC,$7C,$24,$44,$08,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$02
  DEFB $00,$00,$00,$00,$00,$00,$00,$04
  DEFB $14,$0C,$07,$6F,$7F,$03,$00,$00
  DEFB $32,$0A,$FC,$FC,$FF,$E0,$00,$00

; Graphics - Troll
GRAPHICS_TROLL:
  DEFB $00,$00,$03,$03,$01,$FF,$4F,$07
  DEFB $00,$00,$80,$80,$00,$E0,$F0,$D8
  DEFB $03,$03,$06,$06,$06,$0F,$00,$00
  DEFB $CC,$C0,$C0,$C0,$C0,$C0,$00,$00
  DEFB $00,$00,$23,$33,$19,$0F,$07,$07
  DEFB $00,$00,$80,$80,$00,$E0,$F0,$D8
  DEFB $03,$03,$06,$06,$06,$0F,$00,$00
  DEFB $CC,$C0,$C0,$C0,$C0,$C0,$00,$00
  DEFB $00,$08,$1B,$0B,$0D,$0F,$07,$07
  DEFB $00,$00,$80,$80,$00,$E0,$F0,$D8
  DEFB $03,$03,$06,$06,$06,$0F,$00,$00
  DEFB $CC,$C0,$C0,$C0,$C0,$C0,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$03,$37,$3F,$00,$00
  DEFB $00,$00,$00,$C4,$FC,$FC,$00,$00

; Graphics - Unicorn
GRAPHICS_UNICORN:
  DEFB $00,$00,$40,$20,$18,$3C,$6F,$0F
  DEFB $00,$00,$00,$00,$00,$00,$F6,$F9
  DEFB $07,$0A,$0A,$09,$05,$00,$00,$00
  DEFB $F8,$14,$14,$24,$28,$00,$00,$00
  DEFB $00,$00,$40,$20,$18,$3C,$6F,$0F
  DEFB $00,$00,$00,$00,$00,$00,$F7,$F8
  DEFB $07,$0A,$0A,$12,$04,$00,$00,$00
  DEFB $F8,$14,$14,$12,$10,$00,$00,$00
  DEFB $00,$00,$40,$20,$18,$3C,$6F,$0F
  DEFB $00,$00,$00,$00,$00,$01,$F6,$F8
  DEFB $07,$1A,$22,$04,$04,$00,$00,$00
  DEFB $F8,$16,$11,$08,$08,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$01
  DEFB $00,$00,$00,$00,$00,$00,$00,$09
  DEFB $02,$8A,$59,$3F,$3F,$00,$00,$00
  DEFB $6A,$8A,$FC,$FC,$FB,$00,$00,$00

; Graphics - Ghost
GRAPHICS_GHOST:
  DEFB $00,$00,$40,$47,$69,$F9,$FF,$CE
  DEFB $00,$04,$0C,$CE,$3E,$3E,$E3,$43
  DEFB $CE,$4F,$45,$05,$40,$02,$02,$00
  DEFB $41,$60,$E1,$61,$D0,$80,$10,$44
  DEFB $00,$00,$00,$07,$09,$79,$FF,$FE
  DEFB $00,$00,$04,$CC,$3C,$3E,$EE,$47
  DEFB $CE,$0E,$47,$43,$04,$45,$00,$02
  DEFB $40,$40,$60,$A1,$21,$90,$80,$10
  DEFB $00,$00,$00,$07,$09,$19,$3F,$FE
  DEFB $00,$00,$00,$C0,$24,$3C,$FE,$7E
  DEFB $CE,$CE,$4E,$07,$43,$44,$04,$40
  DEFB $63,$40,$40,$60,$A0,$A1,$00,$90
  DEFB $00,$00,$00,$07,$49,$79,$FF,$FE
  DEFB $00,$00,$04,$C4,$2C,$3E,$9A,$66
  DEFB $8E,$0E,$07,$03,$00,$00,$44,$04
  DEFB $43,$41,$40,$E0,$40,$80,$01,$20

; Graphics - Wraith
GRAPHICS_WRAITH:
  DEFB $00,$00,$00,$00,$00,$11,$0A,$04
  DEFB $00,$00,$00,$C0,$C0,$E0,$D0,$D0
  DEFB $00,$01,$01,$02,$02,$00,$00,$00
  DEFB $C0,$20,$20,$10,$10,$00,$00,$00
  DEFB $00,$00,$01,$01,$3B,$2E,$35,$1B
  DEFB $00,$00,$E0,$20,$30,$18,$28,$28
  DEFB $0F,$02,$06,$05,$05,$07,$00,$00
  DEFB $38,$D0,$D8,$E8,$28,$38,$00,$00
  DEFB $07,$04,$FC,$80,$80,$91,$8A,$84
  DEFB $F8,$08,$0C,$C6,$C2,$E2,$D2,$D2
  DEFB $C0,$61,$31,$12,$12,$10,$10,$1F
  DEFB $C2,$22,$22,$12,$12,$02,$02,$FE
  DEFB $00,$03,$02,$7E,$44,$40,$40,$60
  DEFB $00,$F0,$10,$18,$0C,$04,$04,$04
  DEFB $30,$1C,$08,$08,$08,$08,$0F,$00
  DEFB $04,$0C,$04,$04,$C4,$C4,$FC,$00

; Graphics - Bear
;
; There seems to be a byte at F673 that shouldn't be there.
GRAPHICS_BEAR:
  DEFB $00,$00,$03,$07,$03,$01,$0D,$07
  DEFB $00,$00,$00,$80,$C0,$C0,$E0,$E0
  DEFB $03,$01,$03,$03,$03,$03,$00,$00
  DEFB $E0,$E0,$E0,$60,$60,$60,$00,$00
  DEFB $00,$00,$03,$07,$03,$01,$07,$1F
  DEFB $00,$00,$00,$80,$C0,$C0,$E0,$E0
  DEFB $11,$01,$03,$03,$03,$03,$00,$00
  DEFB $E0,$E0,$E0,$60,$60,$60,$00,$00
  DEFB $00,$00,$00,$03,$07,$03,$01,$03
  DEFB $07,$00,$00,$00,$80,$C0,$C0,$E0
  DEFB $E0,$0D,$09,$03,$03,$03,$03,$00
  DEFB $00,$E0,$E0,$E0,$60,$60,$60,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$27,$7F,$7F,$3F,$00
  DEFB $00,$00,$C0,$80,$E2,$FE,$FE,$00
  DEFB $00

; Graphics - Gorilla
GRAPHICS_GORILLA:
  DEFB $00,$00,$19,$33,$33,$3E,$1E,$07
  DEFB $00,$00,$80,$80,$80,$F8,$F8,$20
  DEFB $03,$03,$07,$0E,$0C,$1C,$00,$00
  DEFB $C0,$C0,$E0,$70,$30,$38,$00,$00
  DEFB $00,$00,$01,$07,$0D,$1F,$0F,$07
  DEFB $00,$00,$80,$E0,$B0,$F8,$F0,$E0
  DEFB $03,$03,$07,$0E,$0C,$1C,$00,$00
  DEFB $C0,$C0,$E0,$70,$30,$38,$00,$00
  DEFB $00,$00,$01,$01,$01,$1F,$1F,$04
  DEFB $00,$00,$98,$CC,$CC,$7C,$78,$E0
  DEFB $03,$03,$07,$0E,$0C,$1C,$00,$00
  DEFB $C0,$C0,$E0,$70,$30,$38,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$01,$37,$3F,$3F,$00,$00
  DEFB $00,$00,$80,$E2,$FE,$FE,$00,$00

; Graphics - Skeleton
GRAPHICS_SKELETON:
  DEFB $00,$01,$01,$00,$03,$05,$09,$F0
  DEFB $00,$80,$88,$88,$F0,$C0,$C0,$80
  DEFB $01,$01,$01,$01,$01,$01,$03,$00
  DEFB $C0,$20,$10,$10,$20,$40,$20,$00
  DEFB $00,$01,$01,$00,$03,$45,$29,$10
  DEFB $00,$80,$80,$80,$FC,$C0,$C0,$80
  DEFB $01,$01,$02,$02,$02,$01,$03,$00
  DEFB $C0,$40,$20,$20,$20,$40,$60,$00
  DEFB $00,$01,$11,$10,$17,$19,$01,$00
  DEFB $00,$80,$80,$80,$F0,$C8,$C8,$80
  DEFB $01,$02,$04,$04,$02,$01,$02,$00
  DEFB $C0,$40,$40,$40,$40,$40,$60,$00

; Graphics - Ogre
GRAPHICS_OGRE:
  DEFB $00,$00,$00,$01,$01,$07,$4F,$FB
  DEFB $00,$00,$00,$80,$80,$E0,$F0,$D8
  DEFB $F3,$43,$07,$06,$06,$0E,$00,$00
  DEFB $C8,$E0,$F0,$30,$38,$00,$00,$00
  DEFB $00,$00,$00,$61,$71,$3F,$1F,$03
  DEFB $00,$00,$00,$80,$80,$E0,$F0,$D8
  DEFB $03,$03,$07,$06,$06,$0E,$00,$00
  DEFB $C8,$C0,$E0,$60,$60,$70,$00,$00
  DEFB $00,$00,$18,$3D,$19,$1F,$0F,$03
  DEFB $00,$00,$00,$80,$80,$E0,$F0,$D8
  DEFB $03,$07,$0F,$0C,$1C,$00,$00,$00
  DEFB $C8,$C0,$E0,$60,$60,$70,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$01,$1B,$1F,$1F,$00,$00
  DEFB $00,$00,$80,$E4,$FC,$FC,$00,$00

; Graphics - Zombie
GRAPHICS_ZOMBIE:
  DEFB $00,$00,$01,$01,$00,$1F,$01,$01
  DEFB $00,$00,$80,$80,$80,$80,$80,$80
  DEFB $01,$02,$04,$04,$04,$0C,$00,$00
  DEFB $80,$80,$80,$40,$20,$40,$00,$00
  DEFB $00,$00,$01,$01,$00,$1F,$01,$01
  DEFB $00,$00,$80,$80,$80,$80,$80,$80
  DEFB $01,$02,$02,$02,$02,$06,$00,$00
  DEFB $80,$80,$80,$70,$10,$00,$00,$00
  DEFB $00,$00,$01,$01,$00,$1F,$01,$01
  DEFB $00,$00,$80,$80,$80,$80,$80,$80
  DEFB $01,$01,$01,$01,$01,$03,$00,$00
  DEFB $80,$00,$00,$E0,$20,$00,$00,$00
  DEFB $00,$00,$01,$01,$00,$1F,$01,$01
  DEFB $00,$00,$80,$80,$80,$80,$80,$80
  DEFB $01,$02,$04,$02,$01,$03,$00,$00
  DEFB $80,$80,$80,$80,$80,$80,$00,$00

; Graphics - Harpy
GRAPHICS_HARPY:
  DEFB $00,$00,$01,$02,$1A,$1A,$0F,$07
  DEFB $00,$00,$E0,$7C,$78,$E0,$C0,$00
  DEFB $07,$03,$01,$02,$04,$00,$00,$00
  DEFB $80,$C0,$F0,$40,$40,$80,$00,$00
  DEFB $00,$00,$00,$00,$18,$1B,$0F,$07
  DEFB $00,$00,$00,$00,$00,$C0,$F8,$C0
  DEFB $07,$03,$01,$02,$04,$00,$00,$00
  DEFB $80,$C0,$F0,$40,$40,$80,$00,$00
  DEFB $00,$00,$00,$00,$18,$18,$0F,$07
  DEFB $00,$00,$00,$00,$00,$00,$00,$80
  DEFB $07,$03,$01,$02,$04,$00,$00,$00
  DEFB $C0,$F8,$F0,$40,$40,$80,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$01,$00,$33,$3F,$07,$01,$00
  DEFB $00,$20,$A0,$F0,$FC,$80,$E0,$00

; Graphics - Pegasus
GRAPHICS_PEGASUS:
  DEFB $00,$00,$01,$01,$31,$7B,$DF,$1F
  DEFB $00,$FC,$F8,$E0,$80,$00,$EC,$F2
  DEFB $0F,$14,$14,$12,$0A,$00,$00,$00
  DEFB $F0,$28,$28,$48,$50,$00,$00,$00
  DEFB $00,$00,$00,$00,$30,$7B,$DF,$1F
  DEFB $00,$00,$00,$00,$FC,$C0,$EE,$F0
  DEFB $0F,$14,$14,$24,$08,$00,$00,$00
  DEFB $F0,$28,$28,$24,$20,$00,$00,$00
  DEFB $00,$00,$00,$00,$30,$7B,$DF,$1F
  DEFB $00,$00,$00,$00,$00,$00,$EE,$F0
  DEFB $0F,$35,$44,$08,$08,$00,$00,$00
  DEFB $F0,$FC,$3E,$10,$10,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$02
  DEFB $00,$00,$00,$00,$00,$00,$00,$12
  DEFB $04,$15,$33,$7F,$7F,$03,$00,$00
  DEFB $D4,$14,$F8,$F8,$F6,$E0,$F8,$00

; Graphics - Eagle
GRAPHICS_EAGLE:
  DEFB $00,$00,$00,$00,$38,$6C,$07,$03
  DEFB $00,$00,$00,$00,$00,$78,$EC,$80
  DEFB $06,$02,$00,$00,$00,$00,$00,$00
  DEFB $80,$80,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$03,$1F
  DEFB $00,$00,$00,$00,$00,$00,$80,$E0
  DEFB $7E,$02,$00,$00,$00,$00,$00,$00
  DEFB $F8,$9E,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$03,$0F
  DEFB $00,$00,$00,$00,$00,$00,$80,$E0
  DEFB $1E,$3A,$30,$00,$00,$00,$00,$00
  DEFB $F0,$B8,$1C,$0C,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$70,$3D,$0F,$0F,$11,$00,$00
  DEFB $00,$00,$00,$40,$80,$E0,$78,$00

; Graphics - Hydra
GRAPHICS_HYDRA:
  DEFB $00,$36,$12,$12,$CA,$4A,$3F,$07
  DEFB $00,$C0,$40,$40,$98,$88,$30,$C0
  DEFB $0E,$1C,$19,$18,$1C,$0F,$07,$00
  DEFB $00,$F8,$3C,$0C,$1C,$F8,$F0,$00
  DEFB $00,$0D,$64,$24,$12,$CA,$7F,$07
  DEFB $00,$80,$80,$B0,$90,$90,$20,$C0
  DEFB $0E,$1C,$19,$18,$1C,$0F,$07,$00
  DEFB $00,$F8,$3C,$0C,$1C,$F8,$F0,$00
  DEFB $00,$03,$19,$09,$64,$32,$CF,$77
  DEFB $00,$00,$60,$20,$A0,$A0,$40,$80
  DEFB $0E,$1C,$19,$18,$1C,$0F,$07,$00
  DEFB $00,$F8,$3C,$0C,$1C,$F8,$F0,$00
  DEFB $00,$00,$00,$00,$00,$05,$56,$7F
  DEFB $00,$00,$00,$00,$00,$00,$20,$E8
  DEFB $1F,$38,$71,$62,$60,$7F,$3F,$00
  DEFB $F8,$00,$FC,$7E,$06,$FE,$F8,$00

; Graphics - Giant Rat
GRAPHICS_GIANT_RAT:
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$0C,$92
  DEFB $00,$1F,$7F,$FF,$11,$20,$00,$00
  DEFB $61,$01,$82,$FC,$80,$40,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$0C,$12,$21
  DEFB $00,$1F,$7F,$FF,$10,$10,$00,$00
  DEFB $21,$01,$82,$FC,$80,$80,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$0C,$12,$11
  DEFB $00,$1F,$7F,$FF,$11,$0A,$00,$00
  DEFB $09,$01,$82,$FC,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $08,$10,$1F,$FF,$7F,$00,$01,$02
  DEFB $00,$C0,$00,$80,$FE,$01,$FE,$00

; Graphics - Centaur
GRAPHICS_CENTAUR:
  DEFB $00,$00,$2C,$4C,$44,$7C,$4E,$4F
  DEFB $00,$00,$00,$00,$00,$00,$00,$F6
  DEFB $2F,$07,$0A,$0A,$09,$05,$00,$00
  DEFB $F9,$F8,$14,$14,$24,$28,$00,$00
  DEFB $00,$00,$2C,$4C,$44,$7C,$4E,$4F
  DEFB $00,$00,$00,$00,$00,$00,$00,$F6
  DEFB $2F,$07,$0A,$0A,$12,$04,$00,$00
  DEFB $F9,$F8,$14,$14,$12,$10,$00,$00
  DEFB $00,$00,$2C,$4C,$44,$7C,$4E,$4F
  DEFB $00,$00,$00,$00,$00,$00,$00,$F6
  DEFB $2F,$07,$1A,$22,$04,$04,$00,$00
  DEFB $F9,$F8,$16,$11,$08,$08,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$02
  DEFB $00,$00,$00,$00,$00,$00,$00,$09
  DEFB $04,$05,$03,$6F,$7F,$00,$00,$00
  DEFB $CA,$0A,$FC,$FC,$97,$00,$00,$00

; Graphics - Giant
GRAPHICS_GIANT:
  DEFB $00,$00,$03,$07,$07,$0F,$FD,$F9
  DEFB $C0,$C0,$F0,$F8,$F8,$EC,$E4,$E6
  DEFB $03,$03,$03,$03,$03,$03,$03,$07
  DEFB $F2,$F0,$30,$30,$30,$30,$30,$70
  DEFB $00,$00,$43,$E7,$7F,$3D,$19,$01
  DEFB $C0,$C0,$F0,$F8,$F8,$EC,$E4,$E6
  DEFB $03,$03,$03,$03,$03,$03,$03,$07
  DEFB $F2,$F0,$30,$30,$30,$30,$30,$70
  DEFB $30,$30,$33,$37,$3F,$1D,$01,$01
  DEFB $C0,$C0,$F0,$F8,$F8,$EC,$E4,$E6
  DEFB $03,$03,$03,$03,$03,$03,$03,$07
  DEFB $F2,$F0,$30,$30,$30,$30,$30,$70
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$0F,$DF,$FF,$00,$00
  DEFB $00,$00,$00,$C1,$FF,$FF,$00,$00

; Graphics - Golden Dragon
GRAPHICS_GOLDEN_DRAGON:
  DEFB $00,$17,$30,$71,$71,$FB,$FB,$CF
  DEFB $80,$D0,$D8,$9C,$9C,$3E,$3E,$66
  DEFB $87,$03,$03,$02,$04,$04,$00,$00
  DEFB $F2,$F8,$D4,$52,$52,$42,$04,$F8
  DEFB $1A,$07,$1B,$43,$63,$73,$FB,$FF
  DEFB $00,$00,$00,$04,$0C,$1C,$3E,$7E
  DEFB $C7,$83,$03,$02,$04,$04,$00,$00
  DEFB $F6,$FA,$D4,$52,$52,$42,$04,$F8
  DEFB $68,$1C,$1C,$66,$06,$83,$C3,$F3
  DEFB $00,$00,$00,$00,$00,$02,$06,$1E
  DEFB $FF,$FF,$63,$42,$04,$04,$00,$00
  DEFB $FE,$FE,$DC,$56,$52,$42,$04,$F8
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $04,$A5,$A3,$7F,$7F,$03,$00,$00
  DEFB $92,$0A,$FC,$FF,$FF,$C0,$F8,$00

; Graphics - Dark Citadel
GRAPHICS_DARK_CITADEL:
  DEFB $10,$10,$38,$38,$7C,$7C,$38,$39
  DEFB $08,$08,$1C,$1C,$3E,$3E,$1C,$9C
  DEFB $3B,$7F,$FF,$CE,$CC,$CC,$FC,$FC
  DEFB $DC,$FE,$FF,$73,$33,$33,$3F,$3F

; Graphics - Magic Castle
GRAPHICS_MAGIC_CASTLE:
  DEFB $0A,$0E,$0A,$0A,$0A,$CE,$CE,$CE
  DEFB $50,$70,$50,$50,$50,$73,$73,$73
  DEFB $CE,$FF,$7F,$36,$36,$36,$3E,$7F
  DEFB $7F,$FF,$FE,$6C,$6C,$6C,$7C,$FE

; Graphics - Shadow Wood
GRAPHICS_SHADOW_WOOD:
  DEFB $05,$02,$24,$14,$0C,$56,$23,$25
  DEFB $00,$20,$B8,$40,$88,$A6,$A8,$F0
  DEFB $09,$09,$01,$01,$01,$03,$05,$00
  DEFB $88,$84,$80,$80,$A0,$D0,$48,$00

; Graphics - Magic Wood
GRAPHICS_MAGIC_WOOD:
  DEFB $02,$15,$2A,$55,$2A,$55,$2A,$15
  DEFB $80,$50,$A8,$54,$A8,$54,$A8,$D0
  DEFB $0B,$01,$01,$01,$01,$03,$07,$00
  DEFB $A0,$80,$80,$80,$80,$C0,$E0,$00

; Graphics - Wall
GRAPHICS_WALL:
  DEFB $00,$EE,$EE,$00,$BB,$BB,$00,$EE
  DEFB $00,$EE,$EE,$00,$BB,$BB,$00,$EE
  DEFB $EE,$00,$BB,$BB,$00,$EE,$EE,$00
  DEFB $EE,$00,$BB,$BB,$00,$EE,$EE,$00

; Graphics - Wizard 1
GRAPHICS_WIZ_1:
  DEFB $00,$00,$01,$01,$07,$0F,$3B,$1B
  DEFB $00,$00,$80,$80,$FE,$9C,$8C,$84
  DEFB $13,$13,$03,$03,$07,$1F,$00,$00
  DEFB $80,$C0,$C0,$C0,$E0,$E0,$00,$00

; Graphics - Wizard 2
GRAPHICS_WIZ_2:
  DEFB $00,$00,$01,$11,$13,$17,$1B,$13
  DEFB $00,$00,$80,$80,$C0,$E2,$94,$88
  DEFB $13,$13,$12,$12,$12,$12,$00,$00
  DEFB $80,$C0,$40,$40,$40,$40,$00,$00

; Graphics - Wizard 3
GRAPHICS_WIZ_3:
  DEFB $00,$00,$01,$01,$03,$07,$07,$03
  DEFB $00,$00,$80,$80,$80,$C0,$F8,$B0
  DEFB $03,$03,$07,$07,$0F,$03,$00,$00
  DEFB $90,$C0,$C0,$C0,$60,$00,$00,$00

; Graphics - Wizard 4
GRAPHICS_WIZ_4:
  DEFB $00,$00,$01,$01,$3F,$0F,$01,$01
  DEFB $00,$00,$80,$80,$C0,$E0,$F0,$D8
  DEFB $03,$07,$06,$06,$06,$0E,$00,$00
  DEFB $C8,$C0,$C0,$C0,$60,$E0,$00,$00

; Graphics - Wizard 5
GRAPHICS_WIZ_5:
  DEFB $00,$00,$01,$01,$00,$43,$25,$19
  DEFB $00,$00,$80,$80,$80,$E0,$D0,$C8
  DEFB $09,$05,$03,$07,$04,$0C,$00,$00
  DEFB $C8,$C0,$60,$30,$90,$58,$00,$00

; Graphics - Wizard 6
GRAPHICS_WIZ_6:
  DEFB $00,$00,$01,$01,$00,$1F,$0C,$08
  DEFB $00,$00,$80,$80,$80,$C0,$E2,$D4
  DEFB $01,$03,$03,$03,$03,$00,$00,$00
  DEFB $C8,$D0,$E0,$E0,$F0,$FC,$00,$00

; Graphics - Wizard 7
GRAPHICS_WIZ_7:
  DEFB $00,$18,$19,$0D,$0E,$07,$03,$03
  DEFB $00,$18,$98,$B0,$70,$E0,$C0,$C0
  DEFB $03,$03,$07,$07,$07,$0F,$00,$00
  DEFB $C0,$C0,$C0,$C0,$C0,$E0,$00,$00

; Graphics - Wizard 8
GRAPHICS_WIZ_8:
  DEFB $00,$00,$01,$01,$00,$41,$23,$15
  DEFB $00,$00,$80,$80,$80,$80,$C0,$A0
  DEFB $09,$03,$02,$02,$02,$06,$00,$00
  DEFB $C0,$80,$80,$40,$20,$40,$00,$00

; Data block at FE14
  DEFB $C8,$1C,$00,$00,$47,$FE,$01,$43
  DEFB $33,$34,$5F,$C4,$E8,$1C,$00,$00
  DEFB $53,$FE,$01,$43,$33,$35,$5F,$B1
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00

; Routine at FE56
;
; Used by the routines at MAIN_LOOP, DISPLAY_ARENA_READ_ONLY, CAST_SPELLS and
; PLAYER_CAST_LOCATIONAL_SPELL.
ROUTINE_FE56:
  LD A,$09
  LD I,A
  IM 2
  RET

; Unused
  DEFS $03

; Routine at FE60
;
; Used by the routine at MAIN_LOOP.
ROUTINE_FE60:
  LD A,$3E
  LD I,A
  IM 1
  RET

; Unused
  DEFS $02

; Routine at FE69
ROUTINE_FE69:
  DI
  CALL ROUTINE_DF0C
  EI
  JP $0038

; Data block at FE71
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$00
  DEFB $00,$00,$00,$00,$00,$00,$00,$F3
  DEFB $0D,$CE,$0B,$E4,$50,$CE,$0B,$E5
  DEFB $50,$1C,$17,$DC,$0A,$CE,$0B,$EB
  DEFB $50,$16,$17,$DC,$0A,$D7,$18,$B1
  DEFB $33,$DE,$5C,$05,$00,$DB,$02,$DB
  DEFB $02,$4D,$00,$C0,$52,$3F,$00,$C0
  DEFB $52,$3A,$02,$5B,$0E,$C0,$57,$71
  DEFB $0E,$F3,$0D,$21,$17,$C6,$1E,$A7
  DEFB $61,$76,$1B,$03,$13,$00,$3E

; Data block at FF58
  DEFB $00,$3C,$42,$42,$7E,$42,$42,$00
  DEFB $00,$7C,$42,$7C,$42,$42,$7C,$00
  DEFB $00,$3C,$42,$40,$40,$42,$3C,$00
  DEFB $00,$78,$44,$42,$42,$44,$78,$00
  DEFB $00,$7E,$40,$7C,$40,$40,$7E,$00
  DEFB $00,$7E,$40,$7C,$40,$40,$40,$00
  DEFB $00,$3C,$42,$40,$4E,$42,$3C,$00
  DEFB $00,$42,$42,$7E,$42,$42,$42,$00
  DEFB $00,$3E,$08,$08,$08,$08,$3E,$00
  DEFB $00,$02,$02,$02,$42,$42,$3C,$00
  DEFB $00,$44,$48,$70,$48,$44,$42,$00
  DEFB $00,$40,$40,$40,$40,$40,$7E,$00
  DEFB $00,$42,$66,$5A,$42,$42,$42,$00
  DEFB $00,$42,$62,$52,$4A,$46,$42,$00
  DEFB $00,$3C,$42,$42,$42,$42,$3C,$00
  DEFB $00,$7C,$42,$42,$7C,$40,$40,$00
  DEFB $00,$3C,$42,$42,$52,$4A,$3C,$00
  DEFB $00,$7C,$42,$42,$7C,$44,$42,$00
  DEFB $00,$3C,$40,$3C,$02,$42,$3C,$00
  DEFB $00,$FE,$10,$10,$10,$10,$10,$00
  DEFB $00,$42,$42,$42,$42,$00,$01,$02

